declare const _default: import("vue").DefineComponent<{
    key: {
        type: StringConstructor;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    menuContext: Partial<Readonly<Pick<import("./interface").InternalMenuProps, "tooltipProps" | "mode" | "theme" | "triggerProps" | "popupMaxHeight" | "levelIndent" | "autoScrollIntoView" | "scrollConfig" | "inTrigger"> & {
        selectedKeys: string[];
        openKeys: string[];
        prefixCls: string;
        collapsed: boolean;
        expandIconDown?: (() => import("vue").VNodeTypes) | undefined;
        expandIconRight?: (() => import("vue").VNodeTypes) | undefined;
        onSubMenuClick?: ((key: string, level: number) => void) | undefined;
        onMenuItemClick?: ((key: string) => void) | undefined;
    }>>;
    level: import("vue").ComputedRef<number>;
    isSelected: import("vue").ComputedRef<boolean>;
    refItemElement: import("vue").Ref<HTMLDivElement | undefined>;
    onClick(e: MouseEvent): void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    key?: unknown;
    disabled?: unknown;
} & {
    disabled: boolean;
} & {
    key?: string | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
}>;
export default _default;
