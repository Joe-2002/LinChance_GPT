import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Tooltip from './tooltip';
declare const Tooltip: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            mini: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            content?: unknown;
            position?: unknown;
            mini?: unknown;
            backgroundColor?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupContainer?: unknown;
        } & {
            defaultPopupVisible: boolean;
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            mini: boolean;
        } & {
            popupVisible?: boolean | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            content?: string | undefined;
            backgroundColor?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "popupVisible" | "defaultPopupVisible" | "position" | "mini">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:popupVisible", visible: boolean) => void) & ((event: "popupVisibleChange", visible: boolean) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            content?: unknown;
            position?: unknown;
            mini?: unknown;
            backgroundColor?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupContainer?: unknown;
        } & {
            defaultPopupVisible: boolean;
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            mini: boolean;
        } & {
            popupVisible?: boolean | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            content?: string | undefined;
            backgroundColor?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
        }, {
            prefixCls: string;
            computedPopupVisible: import("vue").ComputedRef<boolean>;
            contentCls: import("vue").ComputedRef<(import("../_utils/types").ClassName | undefined)[]>;
            computedContentStyle: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
            arrowCls: import("vue").ComputedRef<(import("../_utils/types").ClassName | undefined)[]>;
            computedArrowStyle: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
            handlePopupVisibleChange: (visible: boolean) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:popupVisible': (visible: boolean) => true;
            popupVisibleChange: (visible: boolean) => true;
        }, string, {
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            mini: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        content?: unknown;
        position?: unknown;
        mini?: unknown;
        backgroundColor?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupContainer?: unknown;
    } & {
        defaultPopupVisible: boolean;
        position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
        mini: boolean;
    } & {
        popupVisible?: boolean | undefined;
        contentClass?: import("../_utils/types").ClassName | undefined;
        contentStyle?: import("vue").CSSProperties | undefined;
        arrowClass?: import("../_utils/types").ClassName | undefined;
        arrowStyle?: import("vue").CSSProperties | undefined;
        popupContainer?: string | HTMLElement | null | undefined;
        content?: string | undefined;
        backgroundColor?: string | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
        onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        computedPopupVisible: import("vue").ComputedRef<boolean>;
        contentCls: import("vue").ComputedRef<(import("../_utils/types").ClassName | undefined)[]>;
        computedContentStyle: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
        arrowCls: import("vue").ComputedRef<(import("../_utils/types").ClassName | undefined)[]>;
        computedArrowStyle: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
        handlePopupVisibleChange: (visible: boolean) => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    content?: unknown;
    position?: unknown;
    mini?: unknown;
    backgroundColor?: unknown;
    contentClass?: unknown;
    contentStyle?: unknown;
    arrowClass?: unknown;
    arrowStyle?: unknown;
    popupContainer?: unknown;
} & {
    defaultPopupVisible: boolean;
    position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
    mini: boolean;
} & {
    popupVisible?: boolean | undefined;
    contentClass?: import("../_utils/types").ClassName | undefined;
    contentStyle?: import("vue").CSSProperties | undefined;
    arrowClass?: import("../_utils/types").ClassName | undefined;
    arrowStyle?: import("vue").CSSProperties | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    content?: string | undefined;
    backgroundColor?: string | undefined;
}> & {
    "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
    onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
}, {
    prefixCls: string;
    computedPopupVisible: import("vue").ComputedRef<boolean>;
    contentCls: import("vue").ComputedRef<(import("../_utils/types").ClassName | undefined)[]>;
    computedContentStyle: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
    arrowCls: import("vue").ComputedRef<(import("../_utils/types").ClassName | undefined)[]>;
    computedArrowStyle: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
    handlePopupVisibleChange: (visible: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:popupVisible': (visible: boolean) => true;
    popupVisibleChange: (visible: boolean) => true;
}, string, {
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
    mini: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TooltipInstance = InstanceType<typeof _Tooltip>;
export default Tooltip;
