import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number | boolean>;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: PropType<string | number | boolean>;
        default: boolean;
    };
    type: {
        type: PropType<"button" | "radio">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    uninjectGroupContext: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string | number | boolean) => true;
    change: (value: string | number | boolean, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultChecked?: unknown;
    value?: unknown;
    type?: unknown;
    disabled?: unknown;
    uninjectGroupContext?: unknown;
} & {
    disabled: boolean;
    type: "button" | "radio";
    value: string | number | boolean;
    defaultChecked: boolean;
    uninjectGroupContext: boolean;
} & {
    modelValue?: string | number | boolean | undefined;
}> & {
    onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
}, {
    disabled: boolean;
    type: "button" | "radio";
    modelValue: string | number | boolean;
    value: string | number | boolean;
    defaultChecked: boolean;
    uninjectGroupContext: boolean;
}>;
export default _default;
