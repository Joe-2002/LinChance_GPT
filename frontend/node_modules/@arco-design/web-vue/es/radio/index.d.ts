import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Radio from './radio';
import _RadioGroup from './radio-group';
declare const Radio: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            type: "button" | "radio";
            modelValue: string | number | boolean;
            value: string | number | boolean;
            defaultChecked: boolean;
            uninjectGroupContext: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultChecked?: unknown;
            value?: unknown;
            type?: unknown;
            disabled?: unknown;
            uninjectGroupContext?: unknown;
        } & {
            disabled: boolean;
            type: "button" | "radio";
            value: string | number | boolean;
            defaultChecked: boolean;
            uninjectGroupContext: boolean;
        } & {
            modelValue?: string | number | boolean | undefined;
        }> & {
            onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
            "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "type" | "modelValue" | "value" | "defaultChecked" | "uninjectGroupContext">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:modelValue", value: string | number | boolean) => void) & ((event: "change", value: string | number | boolean, ev: Event) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultChecked?: unknown;
            value?: unknown;
            type?: unknown;
            disabled?: unknown;
            uninjectGroupContext?: unknown;
        } & {
            disabled: boolean;
            type: "button" | "radio";
            value: string | number | boolean;
            defaultChecked: boolean;
            uninjectGroupContext: boolean;
        } & {
            modelValue?: string | number | boolean | undefined;
        }> & {
            onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
            "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (value: string | number | boolean) => true;
            change: (value: string | number | boolean, ev: Event) => true;
        }, string, {
            disabled: boolean;
            type: "button" | "radio";
            modelValue: string | number | boolean;
            value: string | number | boolean;
            defaultChecked: boolean;
            uninjectGroupContext: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultChecked?: unknown;
        value?: unknown;
        type?: unknown;
        disabled?: unknown;
        uninjectGroupContext?: unknown;
    } & {
        disabled: boolean;
        type: "button" | "radio";
        value: string | number | boolean;
        defaultChecked: boolean;
        uninjectGroupContext: boolean;
    } & {
        modelValue?: string | number | boolean | undefined;
    }> & {
        onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultChecked?: unknown;
    value?: unknown;
    type?: unknown;
    disabled?: unknown;
    uninjectGroupContext?: unknown;
} & {
    disabled: boolean;
    type: "button" | "radio";
    value: string | number | boolean;
    defaultChecked: boolean;
    uninjectGroupContext: boolean;
} & {
    modelValue?: string | number | boolean | undefined;
}> & {
    onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string | number | boolean) => true;
    change: (value: string | number | boolean, ev: Event) => true;
}, string, {
    disabled: boolean;
    type: "button" | "radio";
    modelValue: string | number | boolean;
    value: string | number | boolean;
    defaultChecked: boolean;
    uninjectGroupContext: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Group: import("vue").DefineComponent<{
        modelValue: {
            type: import("vue").PropType<string | number | boolean>;
            default: undefined;
        };
        defaultValue: {
            type: import("vue").PropType<string | number | boolean>;
            default: string;
        };
        type: {
            type: import("vue").PropType<"button" | "radio">;
            default: string;
        };
        size: {
            type: import("vue").PropType<"mini" | "medium" | "large" | "small">;
        };
        options: {
            type: import("vue").PropType<(string | number | import("./interface").RadioOption)[]>;
        };
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        'update:modelValue': (value: string | number | boolean) => true;
        change: (value: string | number | boolean, ev: Event) => true;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        type?: unknown;
        size?: unknown;
        options?: unknown;
        direction?: unknown;
        disabled?: unknown;
    } & {
        disabled: boolean;
        type: "button" | "radio";
        defaultValue: string | number | boolean;
        direction: "horizontal" | "vertical";
    } & {
        size?: "mini" | "medium" | "large" | "small" | undefined;
        modelValue?: string | number | boolean | undefined;
        options?: (string | number | import("./interface").RadioOption)[] | undefined;
    }> & {
        onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
    }, {
        disabled: boolean;
        type: "button" | "radio";
        modelValue: string | number | boolean;
        defaultValue: string | number | boolean;
        direction: "horizontal" | "vertical";
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type RadioInstance = InstanceType<typeof _Radio>;
export declare type RadioGroupInstance = InstanceType<typeof _RadioGroup>;
export { _RadioGroup as RadioGroup };
export default Radio;
