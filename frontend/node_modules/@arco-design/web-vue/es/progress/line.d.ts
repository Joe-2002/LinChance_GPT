import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    percent: {
        type: NumberConstructor;
        default: number;
    };
    animation: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"medium" | "large" | "small">;
        default: string;
    };
    strokeWidth: {
        type: NumberConstructor;
        default: number;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    color: {
        type: (ObjectConstructor | StringConstructor)[];
        default: undefined;
    };
    trackColor: StringConstructor;
    formatText: {
        type: FunctionConstructor;
        default: undefined;
    };
    status: {
        type: PropType<"normal" | "success" | "warning" | "danger">;
    };
    showText: BooleanConstructor;
}, {
    prefixCls: string;
    style: import("vue").ComputedRef<{
        width: string | number;
        height: string;
        backgroundColor: string | undefined;
    }>;
    barStyle: import("vue").ComputedRef<{
        width: string;
    } | {
        backgroundImage: string;
        backgroundColor?: undefined;
        width: string;
    } | {
        backgroundColor: string;
        backgroundImage?: undefined;
        width: string;
    }>;
    text: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    percent?: unknown;
    animation?: unknown;
    size?: unknown;
    strokeWidth?: unknown;
    width?: unknown;
    color?: unknown;
    trackColor?: unknown;
    formatText?: unknown;
    status?: unknown;
    showText?: unknown;
} & {
    size: "medium" | "large" | "small";
    animation: boolean;
    strokeWidth: number;
    width: string | number;
    percent: number;
    showText: boolean;
} & {
    color?: string | Record<string, any> | undefined;
    status?: "normal" | "success" | "warning" | "danger" | undefined;
    trackColor?: string | undefined;
    formatText?: Function | undefined;
}>, {
    color: string | Record<string, any>;
    size: "medium" | "large" | "small";
    animation: boolean;
    strokeWidth: number;
    width: string | number;
    percent: number;
    formatText: Function;
    showText: boolean;
}>;
export default _default;
