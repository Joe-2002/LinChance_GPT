import { CSSProperties, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: StringConstructor;
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: PropType<number | {
            length: number;
            errorOnly?: boolean | undefined;
        }>;
        default: number;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoSize: {
        type: PropType<boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        }>;
        default: boolean;
    };
    wordLength: {
        type: PropType<(value: string) => number>;
    };
    wordSlice: {
        type: PropType<(value: string, maxLength: number) => string>;
    };
}, {
    prefixCls: string;
    wrapperCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    textareaRef: import("vue").Ref<HTMLInputElement | undefined>;
    textareaStyle: import("vue").Ref<CSSProperties | undefined>;
    mirrorRef: import("vue").Ref<HTMLInputElement | undefined>;
    mirrorStyle: import("vue").Ref<CSSProperties | undefined>;
    computedValue: import("vue").ComputedRef<string>;
    showClearBtn: import("vue").ComputedRef<string | false>;
    valueLength: import("vue").ComputedRef<number>;
    computedMaxLength: import("vue").ComputedRef<number>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    getWrapperAttrs: (attr: Record<string, any>) => Omit<{
        [x: string]: unknown;
    }, string>;
    getTextareaAttrs: (attr: Record<string, any>) => Pick<{
        [x: string]: unknown;
    }, string>;
    handleInput: (e: InputEvent) => void;
    handleFocus: (ev: FocusEvent) => void;
    handleBlur: (ev: FocusEvent) => void;
    handleComposition: (e: CompositionEvent) => void;
    handleClear: (ev: MouseEvent) => void;
    handleResize: () => void;
    handleMousedown: (e: MouseEvent) => void;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string) => true;
    input: (value: string, ev: Event) => true;
    change: (value: string, ev: Event) => true;
    clear: (ev: MouseEvent) => true;
    focus: (ev: FocusEvent) => true;
    blur: (ev: FocusEvent) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    placeholder?: unknown;
    disabled?: unknown;
    error?: unknown;
    maxLength?: unknown;
    showWordLimit?: unknown;
    allowClear?: unknown;
    autoSize?: unknown;
    wordLength?: unknown;
    wordSlice?: unknown;
} & {
    disabled: boolean;
    error: boolean;
    defaultValue: string;
    allowClear: boolean;
    maxLength: number | {
        length: number;
        errorOnly?: boolean | undefined;
    };
    showWordLimit: boolean;
    autoSize: boolean | {
        minRows?: number | undefined;
        maxRows?: number | undefined;
    };
} & {
    modelValue?: string | undefined;
    placeholder?: string | undefined;
    wordLength?: ((value: string) => number) | undefined;
    wordSlice?: ((value: string, maxLength: number) => string) | undefined;
}> & {
    onFocus?: ((ev: FocusEvent) => any) | undefined;
    onBlur?: ((ev: FocusEvent) => any) | undefined;
    onChange?: ((value: string, ev: Event) => any) | undefined;
    onInput?: ((value: string, ev: Event) => any) | undefined;
    onClear?: ((ev: MouseEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
}, {
    disabled: boolean;
    error: boolean;
    defaultValue: string;
    allowClear: boolean;
    maxLength: number | {
        length: number;
        errorOnly?: boolean | undefined;
    };
    showWordLimit: boolean;
    autoSize: boolean | {
        minRows?: number | undefined;
        maxRows?: number | undefined;
    };
}>;
export default _default;
