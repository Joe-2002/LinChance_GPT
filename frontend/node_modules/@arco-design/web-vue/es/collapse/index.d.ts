import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Collapse from './collapse';
import _CollapseItem from './collapse-item';
declare const Collapse: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            bordered: boolean;
            activeKey: (string | number)[];
            defaultActiveKey: (string | number)[];
            accordion: boolean;
            showExpandIcon: boolean;
            expandIconPosition: "left" | "right";
            destroyOnHide: boolean;
        }> & Omit<Readonly<{
            activeKey?: unknown;
            defaultActiveKey?: unknown;
            accordion?: unknown;
            showExpandIcon?: unknown;
            expandIconPosition?: unknown;
            bordered?: unknown;
            destroyOnHide?: unknown;
        } & {
            bordered: boolean;
            defaultActiveKey: (string | number)[];
            accordion: boolean;
            expandIconPosition: "left" | "right";
            destroyOnHide: boolean;
        } & {
            activeKey?: (string | number)[] | undefined;
            showExpandIcon?: boolean | undefined;
        }> & {
            onChange?: ((activeKey: (string | number)[], ev: Event) => any) | undefined;
            "onUpdate:activeKey"?: ((activeKey: (string | number)[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "bordered" | "activeKey" | "defaultActiveKey" | "accordion" | "showExpandIcon" | "expandIconPosition" | "destroyOnHide">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "change", activeKey: (string | number)[], ev: Event) => void) & ((event: "update:activeKey", activeKey: (string | number)[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            activeKey?: unknown;
            defaultActiveKey?: unknown;
            accordion?: unknown;
            showExpandIcon?: unknown;
            expandIconPosition?: unknown;
            bordered?: unknown;
            destroyOnHide?: unknown;
        } & {
            bordered: boolean;
            defaultActiveKey: (string | number)[];
            accordion: boolean;
            expandIconPosition: "left" | "right";
            destroyOnHide: boolean;
        } & {
            activeKey?: (string | number)[] | undefined;
            showExpandIcon?: boolean | undefined;
        }> & {
            onChange?: ((activeKey: (string | number)[], ev: Event) => any) | undefined;
            "onUpdate:activeKey"?: ((activeKey: (string | number)[]) => any) | undefined;
        }, {
            prefixCls: string;
            cls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:activeKey': (activeKey: (string | number)[]) => true;
            change: (activeKey: (string | number)[], ev: Event) => true;
        }, string, {
            bordered: boolean;
            activeKey: (string | number)[];
            defaultActiveKey: (string | number)[];
            accordion: boolean;
            showExpandIcon: boolean;
            expandIconPosition: "left" | "right";
            destroyOnHide: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        activeKey?: unknown;
        defaultActiveKey?: unknown;
        accordion?: unknown;
        showExpandIcon?: unknown;
        expandIconPosition?: unknown;
        bordered?: unknown;
        destroyOnHide?: unknown;
    } & {
        bordered: boolean;
        defaultActiveKey: (string | number)[];
        accordion: boolean;
        expandIconPosition: "left" | "right";
        destroyOnHide: boolean;
    } & {
        activeKey?: (string | number)[] | undefined;
        showExpandIcon?: boolean | undefined;
    }> & {
        onChange?: ((activeKey: (string | number)[], ev: Event) => any) | undefined;
        "onUpdate:activeKey"?: ((activeKey: (string | number)[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    activeKey?: unknown;
    defaultActiveKey?: unknown;
    accordion?: unknown;
    showExpandIcon?: unknown;
    expandIconPosition?: unknown;
    bordered?: unknown;
    destroyOnHide?: unknown;
} & {
    bordered: boolean;
    defaultActiveKey: (string | number)[];
    accordion: boolean;
    expandIconPosition: "left" | "right";
    destroyOnHide: boolean;
} & {
    activeKey?: (string | number)[] | undefined;
    showExpandIcon?: boolean | undefined;
}> & {
    onChange?: ((activeKey: (string | number)[], ev: Event) => any) | undefined;
    "onUpdate:activeKey"?: ((activeKey: (string | number)[]) => any) | undefined;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:activeKey': (activeKey: (string | number)[]) => true;
    change: (activeKey: (string | number)[], ev: Event) => true;
}, string, {
    bordered: boolean;
    activeKey: (string | number)[];
    defaultActiveKey: (string | number)[];
    accordion: boolean;
    showExpandIcon: boolean;
    expandIconPosition: "left" | "right";
    destroyOnHide: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Item: import("vue").DefineComponent<{
        key: (StringConstructor | NumberConstructor)[];
        header: StringConstructor;
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        showExpandIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        destroyOnHide: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        key?: unknown;
        header?: unknown;
        disabled?: unknown;
        showExpandIcon?: unknown;
        destroyOnHide?: unknown;
    } & {
        disabled: boolean;
        showExpandIcon: boolean;
        destroyOnHide: boolean;
    } & {
        key?: string | number | undefined;
        header?: string | undefined;
    }>, {
        disabled: boolean;
        showExpandIcon: boolean;
        destroyOnHide: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type CollapseInstance = InstanceType<typeof _Collapse>;
export declare type CollapseItemInstance = InstanceType<typeof _CollapseItem>;
export { _CollapseItem as CollapseItem };
export default Collapse;
