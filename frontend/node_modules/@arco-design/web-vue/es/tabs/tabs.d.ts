import type { PropType } from 'vue';
import type { TabsPosition, TabsType, TabTriggerEvent } from './interface';
declare const _default: import("vue").DefineComponent<{
    activeKey: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    defaultActiveKey: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    position: {
        type: PropType<TabsPosition>;
        default: string;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
    };
    type: {
        type: PropType<TabsType>;
        default: string;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showAddButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    destroyOnHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    lazyLoad: {
        type: BooleanConstructor;
        default: boolean;
    };
    justify: {
        type: BooleanConstructor;
        default: boolean;
    };
    animation: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoSwitch: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideContent: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: PropType<TabTriggerEvent>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:activeKey': (key: string | number) => true;
    change: (key: string | number) => true;
    tabClick: (key: string | number, ev: Event) => true;
    add: (ev: Event) => true;
    delete: (key: string | number, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    activeKey?: unknown;
    defaultActiveKey?: unknown;
    position?: unknown;
    size?: unknown;
    type?: unknown;
    direction?: unknown;
    editable?: unknown;
    showAddButton?: unknown;
    destroyOnHide?: unknown;
    lazyLoad?: unknown;
    justify?: unknown;
    animation?: unknown;
    headerPadding?: unknown;
    autoSwitch?: unknown;
    hideContent?: unknown;
    trigger?: unknown;
} & {
    trigger: TabTriggerEvent;
    position: TabsPosition;
    justify: boolean;
    type: TabsType;
    direction: "horizontal" | "vertical";
    animation: boolean;
    destroyOnHide: boolean;
    editable: boolean;
    showAddButton: boolean;
    lazyLoad: boolean;
    headerPadding: boolean;
    autoSwitch: boolean;
    hideContent: boolean;
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    activeKey?: string | number | undefined;
    defaultActiveKey?: string | number | undefined;
}> & {
    onChange?: ((key: string | number) => any) | undefined;
    "onUpdate:activeKey"?: ((key: string | number) => any) | undefined;
    onAdd?: ((ev: Event) => any) | undefined;
    onDelete?: ((key: string | number, ev: Event) => any) | undefined;
    onTabClick?: ((key: string | number, ev: Event) => any) | undefined;
}, {
    trigger: TabTriggerEvent;
    position: TabsPosition;
    justify: boolean;
    type: TabsType;
    direction: "horizontal" | "vertical";
    animation: boolean;
    activeKey: string | number;
    defaultActiveKey: string | number;
    destroyOnHide: boolean;
    editable: boolean;
    showAddButton: boolean;
    lazyLoad: boolean;
    headerPadding: boolean;
    autoSwitch: boolean;
    hideContent: boolean;
}>;
export default _default;
