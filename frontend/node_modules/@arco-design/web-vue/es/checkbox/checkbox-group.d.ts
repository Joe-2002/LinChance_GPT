import type { PropType } from 'vue';
import { CheckboxOption } from './interface';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<(string | number | boolean)[]>;
        default: undefined;
    };
    defaultValue: {
        type: PropType<(string | number | boolean)[]>;
        default: () => never[];
    };
    max: {
        type: NumberConstructor;
    };
    options: {
        type: PropType<(string | number | CheckboxOption)[]>;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: (string | number | boolean)[]) => true;
    change: (value: (string | number | boolean)[], ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    max?: unknown;
    options?: unknown;
    direction?: unknown;
    disabled?: unknown;
} & {
    disabled: boolean;
    defaultValue: (string | number | boolean)[];
    direction: "horizontal" | "vertical";
} & {
    modelValue?: (string | number | boolean)[] | undefined;
    max?: number | undefined;
    options?: (string | number | CheckboxOption)[] | undefined;
}> & {
    onChange?: ((value: (string | number | boolean)[], ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: (string | number | boolean)[]) => any) | undefined;
}, {
    disabled: boolean;
    modelValue: (string | number | boolean)[];
    defaultValue: (string | number | boolean)[];
    direction: "horizontal" | "vertical";
}>;
export default _default;
