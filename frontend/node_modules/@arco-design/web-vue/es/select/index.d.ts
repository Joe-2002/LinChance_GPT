import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Select from './select';
import _Option from './option';
import _Optgroup from './optgroup';
declare const Select: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            disabled: boolean;
            unmountOnClose: boolean;
            scrollbar: boolean | import("..").ScrollbarProps;
            multiple: boolean;
            error: boolean;
            defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
            allowClear: boolean;
            loading: boolean;
            bordered: boolean;
            allowCreate: boolean;
            allowSearch: boolean | {
                retainInputValue?: boolean | undefined;
            };
            maxTagCount: number;
            defaultInputValue: string;
            filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
            options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
            searchDelay: number;
            valueKey: string;
            defaultActiveFirstOption: boolean;
            fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
            showExtraOptions: boolean;
            limit: number;
            showHeaderOnEmpty: boolean;
            showFooterOnEmpty: boolean;
        }> & Omit<Readonly<{
            multiple?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            inputValue?: unknown;
            defaultInputValue?: unknown;
            size?: unknown;
            placeholder?: unknown;
            loading?: unknown;
            disabled?: unknown;
            error?: unknown;
            allowClear?: unknown;
            allowSearch?: unknown;
            allowCreate?: unknown;
            maxTagCount?: unknown;
            popupContainer?: unknown;
            bordered?: unknown;
            defaultActiveFirstOption?: unknown;
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            unmountOnClose?: unknown;
            filterOption?: unknown;
            options?: unknown;
            virtualListProps?: unknown;
            triggerProps?: unknown;
            formatLabel?: unknown;
            fallbackOption?: unknown;
            showExtraOptions?: unknown;
            valueKey?: unknown;
            searchDelay?: unknown;
            limit?: unknown;
            fieldNames?: unknown;
            scrollbar?: unknown;
            showHeaderOnEmpty?: unknown;
            showFooterOnEmpty?: unknown;
        } & {
            defaultPopupVisible: boolean;
            disabled: boolean;
            unmountOnClose: boolean;
            scrollbar: boolean | import("..").ScrollbarProps;
            multiple: boolean;
            error: boolean;
            defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
            allowClear: boolean;
            loading: boolean;
            bordered: boolean;
            allowCreate: boolean;
            allowSearch: boolean | {
                retainInputValue?: boolean | undefined;
            };
            maxTagCount: number;
            defaultInputValue: string;
            filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
            options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
            searchDelay: number;
            valueKey: string;
            defaultActiveFirstOption: boolean;
            fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
            showExtraOptions: boolean;
            limit: number;
            showHeaderOnEmpty: boolean;
            showFooterOnEmpty: boolean;
        } & {
            popupVisible?: boolean | undefined;
            popupContainer?: string | HTMLElement | undefined;
            size?: "mini" | "medium" | "large" | "small" | undefined;
            modelValue?: string | number | Record<string, any> | (string | number | Record<string, any>)[] | undefined;
            inputValue?: string | undefined;
            formatLabel?: ((data: import("./interface").SelectOptionData) => string) | undefined;
            placeholder?: string | undefined;
            fieldNames?: import("../_utils/types").FieldString<import("./interface").SelectOptionData> | undefined;
            virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
            triggerProps?: import("..").TriggerProps | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
            onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
            "onUpdate:inputValue"?: ((inputValue: string) => any) | undefined;
            onInputValueChange?: ((inputValue: string) => any) | undefined;
            onClear?: ((ev: Event) => any) | undefined;
            onRemove?: ((removed: string | number | Record<string, any> | undefined) => any) | undefined;
            "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
            onSearch?: ((inputValue: string) => any) | undefined;
            onDropdownScroll?: ((ev: Event) => any) | undefined;
            onDropdownReachBottom?: ((ev: Event) => any) | undefined;
            onExceedLimit?: ((value: string | number | Record<string, any> | undefined, ev: Event) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "popupVisible" | "defaultPopupVisible" | "disabled" | "unmountOnClose" | "scrollbar" | "multiple" | "error" | "defaultValue" | "allowClear" | "loading" | "bordered" | "allowCreate" | "allowSearch" | "maxTagCount" | "defaultInputValue" | "filterOption" | "options" | "searchDelay" | "valueKey" | "defaultActiveFirstOption" | "fallbackOption" | "showExtraOptions" | "limit" | "showHeaderOnEmpty" | "showFooterOnEmpty">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:popupVisible", visible: boolean) => void) & ((event: "popupVisibleChange", visible: boolean) => void) & ((event: "clear", ev: Event) => void) & ((event: "update:inputValue", inputValue: string) => void) & ((event: "inputValueChange", inputValue: string) => void) & ((event: "update:modelValue", value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => void) & ((event: "change", value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => void) & ((event: "remove", removed: string | number | Record<string, any> | undefined) => void) & ((event: "search", inputValue: string) => void) & ((event: "dropdownScroll", ev: Event) => void) & ((event: "dropdownReachBottom", ev: Event) => void) & ((event: "exceedLimit", value: string | number | Record<string, any> | undefined, ev: Event) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            multiple?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            inputValue?: unknown;
            defaultInputValue?: unknown;
            size?: unknown;
            placeholder?: unknown;
            loading?: unknown;
            disabled?: unknown;
            error?: unknown;
            allowClear?: unknown;
            allowSearch?: unknown;
            allowCreate?: unknown;
            maxTagCount?: unknown;
            popupContainer?: unknown;
            bordered?: unknown;
            defaultActiveFirstOption?: unknown;
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            unmountOnClose?: unknown;
            filterOption?: unknown;
            options?: unknown;
            virtualListProps?: unknown;
            triggerProps?: unknown;
            formatLabel?: unknown;
            fallbackOption?: unknown;
            showExtraOptions?: unknown;
            valueKey?: unknown;
            searchDelay?: unknown;
            limit?: unknown;
            fieldNames?: unknown;
            scrollbar?: unknown;
            showHeaderOnEmpty?: unknown;
            showFooterOnEmpty?: unknown;
        } & {
            defaultPopupVisible: boolean;
            disabled: boolean;
            unmountOnClose: boolean;
            scrollbar: boolean | import("..").ScrollbarProps;
            multiple: boolean;
            error: boolean;
            defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
            allowClear: boolean;
            loading: boolean;
            bordered: boolean;
            allowCreate: boolean;
            allowSearch: boolean | {
                retainInputValue?: boolean | undefined;
            };
            maxTagCount: number;
            defaultInputValue: string;
            filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
            options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
            searchDelay: number;
            valueKey: string;
            defaultActiveFirstOption: boolean;
            fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
            showExtraOptions: boolean;
            limit: number;
            showHeaderOnEmpty: boolean;
            showFooterOnEmpty: boolean;
        } & {
            popupVisible?: boolean | undefined;
            popupContainer?: string | HTMLElement | undefined;
            size?: "mini" | "medium" | "large" | "small" | undefined;
            modelValue?: string | number | Record<string, any> | (string | number | Record<string, any>)[] | undefined;
            inputValue?: string | undefined;
            formatLabel?: ((data: import("./interface").SelectOptionData) => string) | undefined;
            placeholder?: string | undefined;
            fieldNames?: import("../_utils/types").FieldString<import("./interface").SelectOptionData> | undefined;
            virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
            triggerProps?: import("..").TriggerProps | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
            onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
            "onUpdate:inputValue"?: ((inputValue: string) => any) | undefined;
            onInputValueChange?: ((inputValue: string) => any) | undefined;
            onClear?: ((ev: Event) => any) | undefined;
            onRemove?: ((removed: string | number | Record<string, any> | undefined) => any) | undefined;
            "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
            onSearch?: ((inputValue: string) => any) | undefined;
            onDropdownScroll?: ((ev: Event) => any) | undefined;
            onDropdownReachBottom?: ((ev: Event) => any) | undefined;
            onExceedLimit?: ((value: string | number | Record<string, any> | undefined, ev: Event) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => true;
            'update:inputValue': (inputValue: string) => true;
            'update:popupVisible': (visible: boolean) => true;
            change: (value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => true;
            inputValueChange: (inputValue: string) => true;
            popupVisibleChange: (visible: boolean) => true;
            clear: (ev: Event) => true;
            remove: (removed: string | number | Record<string, any> | undefined) => true;
            search: (inputValue: string) => true;
            dropdownScroll: (ev: Event) => true;
            dropdownReachBottom: (ev: Event) => true;
            exceedLimit: (value: string | number | Record<string, any> | undefined, ev: Event) => true;
        }, string, {
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            disabled: boolean;
            unmountOnClose: boolean;
            scrollbar: boolean | import("..").ScrollbarProps;
            multiple: boolean;
            error: boolean;
            defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
            allowClear: boolean;
            loading: boolean;
            bordered: boolean;
            allowCreate: boolean;
            allowSearch: boolean | {
                retainInputValue?: boolean | undefined;
            };
            maxTagCount: number;
            defaultInputValue: string;
            filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
            options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
            searchDelay: number;
            valueKey: string;
            defaultActiveFirstOption: boolean;
            fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
            showExtraOptions: boolean;
            limit: number;
            showHeaderOnEmpty: boolean;
            showFooterOnEmpty: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        multiple?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        inputValue?: unknown;
        defaultInputValue?: unknown;
        size?: unknown;
        placeholder?: unknown;
        loading?: unknown;
        disabled?: unknown;
        error?: unknown;
        allowClear?: unknown;
        allowSearch?: unknown;
        allowCreate?: unknown;
        maxTagCount?: unknown;
        popupContainer?: unknown;
        bordered?: unknown;
        defaultActiveFirstOption?: unknown;
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        unmountOnClose?: unknown;
        filterOption?: unknown;
        options?: unknown;
        virtualListProps?: unknown;
        triggerProps?: unknown;
        formatLabel?: unknown;
        fallbackOption?: unknown;
        showExtraOptions?: unknown;
        valueKey?: unknown;
        searchDelay?: unknown;
        limit?: unknown;
        fieldNames?: unknown;
        scrollbar?: unknown;
        showHeaderOnEmpty?: unknown;
        showFooterOnEmpty?: unknown;
    } & {
        defaultPopupVisible: boolean;
        disabled: boolean;
        unmountOnClose: boolean;
        scrollbar: boolean | import("..").ScrollbarProps;
        multiple: boolean;
        error: boolean;
        defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
        allowClear: boolean;
        loading: boolean;
        bordered: boolean;
        allowCreate: boolean;
        allowSearch: boolean | {
            retainInputValue?: boolean | undefined;
        };
        maxTagCount: number;
        defaultInputValue: string;
        filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
        options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
        searchDelay: number;
        valueKey: string;
        defaultActiveFirstOption: boolean;
        fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
        showExtraOptions: boolean;
        limit: number;
        showHeaderOnEmpty: boolean;
        showFooterOnEmpty: boolean;
    } & {
        popupVisible?: boolean | undefined;
        popupContainer?: string | HTMLElement | undefined;
        size?: "mini" | "medium" | "large" | "small" | undefined;
        modelValue?: string | number | Record<string, any> | (string | number | Record<string, any>)[] | undefined;
        inputValue?: string | undefined;
        formatLabel?: ((data: import("./interface").SelectOptionData) => string) | undefined;
        placeholder?: string | undefined;
        fieldNames?: import("../_utils/types").FieldString<import("./interface").SelectOptionData> | undefined;
        virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
        triggerProps?: import("..").TriggerProps | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
        onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
        onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
        "onUpdate:inputValue"?: ((inputValue: string) => any) | undefined;
        onInputValueChange?: ((inputValue: string) => any) | undefined;
        onClear?: ((ev: Event) => any) | undefined;
        onRemove?: ((removed: string | number | Record<string, any> | undefined) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
        onSearch?: ((inputValue: string) => any) | undefined;
        onDropdownScroll?: ((ev: Event) => any) | undefined;
        onDropdownReachBottom?: ((ev: Event) => any) | undefined;
        onExceedLimit?: ((value: string | number | Record<string, any> | undefined, ev: Event) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    multiple?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    size?: unknown;
    placeholder?: unknown;
    loading?: unknown;
    disabled?: unknown;
    error?: unknown;
    allowClear?: unknown;
    allowSearch?: unknown;
    allowCreate?: unknown;
    maxTagCount?: unknown;
    popupContainer?: unknown;
    bordered?: unknown;
    defaultActiveFirstOption?: unknown;
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    unmountOnClose?: unknown;
    filterOption?: unknown;
    options?: unknown;
    virtualListProps?: unknown;
    triggerProps?: unknown;
    formatLabel?: unknown;
    fallbackOption?: unknown;
    showExtraOptions?: unknown;
    valueKey?: unknown;
    searchDelay?: unknown;
    limit?: unknown;
    fieldNames?: unknown;
    scrollbar?: unknown;
    showHeaderOnEmpty?: unknown;
    showFooterOnEmpty?: unknown;
} & {
    defaultPopupVisible: boolean;
    disabled: boolean;
    unmountOnClose: boolean;
    scrollbar: boolean | import("..").ScrollbarProps;
    multiple: boolean;
    error: boolean;
    defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
    allowClear: boolean;
    loading: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean | {
        retainInputValue?: boolean | undefined;
    };
    maxTagCount: number;
    defaultInputValue: string;
    filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
    options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
    searchDelay: number;
    valueKey: string;
    defaultActiveFirstOption: boolean;
    fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
    showExtraOptions: boolean;
    limit: number;
    showHeaderOnEmpty: boolean;
    showFooterOnEmpty: boolean;
} & {
    popupVisible?: boolean | undefined;
    popupContainer?: string | HTMLElement | undefined;
    size?: "mini" | "medium" | "large" | "small" | undefined;
    modelValue?: string | number | Record<string, any> | (string | number | Record<string, any>)[] | undefined;
    inputValue?: string | undefined;
    formatLabel?: ((data: import("./interface").SelectOptionData) => string) | undefined;
    placeholder?: string | undefined;
    fieldNames?: import("../_utils/types").FieldString<import("./interface").SelectOptionData> | undefined;
    virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
    triggerProps?: import("..").TriggerProps | undefined;
}> & {
    "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
    onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
    onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
    "onUpdate:inputValue"?: ((inputValue: string) => any) | undefined;
    onInputValueChange?: ((inputValue: string) => any) | undefined;
    onClear?: ((ev: Event) => any) | undefined;
    onRemove?: ((removed: string | number | Record<string, any> | undefined) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => any) | undefined;
    onSearch?: ((inputValue: string) => any) | undefined;
    onDropdownScroll?: ((ev: Event) => any) | undefined;
    onDropdownReachBottom?: ((ev: Event) => any) | undefined;
    onExceedLimit?: ((value: string | number | Record<string, any> | undefined, ev: Event) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => true;
    'update:inputValue': (inputValue: string) => true;
    'update:popupVisible': (visible: boolean) => true;
    change: (value: string | number | Record<string, any> | (string | number | Record<string, any>)[]) => true;
    inputValueChange: (inputValue: string) => true;
    popupVisibleChange: (visible: boolean) => true;
    clear: (ev: Event) => true;
    remove: (removed: string | number | Record<string, any> | undefined) => true;
    search: (inputValue: string) => true;
    dropdownScroll: (ev: Event) => true;
    dropdownReachBottom: (ev: Event) => true;
    exceedLimit: (value: string | number | Record<string, any> | undefined, ev: Event) => true;
}, string, {
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    disabled: boolean;
    unmountOnClose: boolean;
    scrollbar: boolean | import("..").ScrollbarProps;
    multiple: boolean;
    error: boolean;
    defaultValue: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[];
    allowClear: boolean;
    loading: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean | {
        retainInputValue?: boolean | undefined;
    };
    maxTagCount: number;
    defaultInputValue: string;
    filterOption: boolean | ((inputValue: string, option: import("./interface").SelectOptionData) => boolean);
    options: (string | number | import("./interface").SelectOptionData | import("./interface").SelectOptionGroup)[];
    searchDelay: number;
    valueKey: string;
    defaultActiveFirstOption: boolean;
    fallbackOption: boolean | ((value: string | number | Record<string, unknown>) => import("./interface").SelectOptionData);
    showExtraOptions: boolean;
    limit: number;
    showHeaderOnEmpty: boolean;
    showFooterOnEmpty: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Option: import("vue").DefineComponent<{
        value: (ObjectConstructor | StringConstructor | NumberConstructor)[];
        label: StringConstructor;
        disabled: BooleanConstructor;
        tagProps: {
            type: import("vue").PropType<import("..").TagProps>;
        };
        extra: {
            type: ObjectConstructor;
        };
        index: {
            type: NumberConstructor;
        };
        internal: BooleanConstructor;
    }, {
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean | undefined;
        })[]>;
        selectCtx: import("./context").SelectContext | undefined;
        itemRef: import("vue").Ref<HTMLElement | undefined>;
        component: import("vue").ComputedRef<string>;
        isSelected: import("vue").ComputedRef<boolean>;
        isValid: import("vue").Ref<boolean>;
        handleClick: (ev: MouseEvent) => void;
        handleMouseEnter: () => void;
        handleMouseLeave: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        value?: unknown;
        label?: unknown;
        disabled?: unknown;
        tagProps?: unknown;
        extra?: unknown;
        index?: unknown;
        internal?: unknown;
    } & {
        disabled: boolean;
        internal: boolean;
    } & {
        label?: string | undefined;
        value?: string | number | Record<string, any> | undefined;
        tagProps?: import("..").TagProps | undefined;
        index?: number | undefined;
        extra?: Record<string, any> | undefined;
    }>, {
        disabled: boolean;
        internal: boolean;
    }>;
    OptGroup: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
        };
    }, {
        prefixCls: string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        label?: unknown;
    } & {} & {
        label?: string | undefined;
    }>, {}>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type SelectInstance = InstanceType<typeof _Select>;
export declare type SelectOptionInstance = InstanceType<typeof _Option>;
export declare type SelectOptGroupInstance = InstanceType<typeof _Optgroup>;
export type { SelectProps, SelectOption, SelectOptionData, SelectOptionGroup, SelectFieldNames, FilterOption, } from './interface';
export { _Option as Option, _Optgroup as Optgroup };
export default Select;
