import type { PropType } from 'vue';
import { CSSProperties } from 'vue';
import { ClassName } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultPopupVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: StringConstructor;
    content: StringConstructor;
    trigger: {
        type: PropType<"hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[]>;
        default: string;
    };
    position: {
        type: PropType<"top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb">;
        default: string;
    };
    contentClass: {
        type: PropType<ClassName>;
    };
    contentStyle: {
        type: PropType<CSSProperties>;
    };
    arrowClass: {
        type: PropType<ClassName>;
    };
    arrowStyle: {
        type: PropType<CSSProperties>;
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
    };
}, {
    prefixCls: string;
    computedPopupVisible: import("vue").ComputedRef<boolean>;
    contentCls: import("vue").ComputedRef<(ClassName | undefined)[]>;
    arrowCls: import("vue").ComputedRef<(ClassName | undefined)[]>;
    handlePopupVisibleChange: (visible: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:popupVisible': (visible: boolean) => true;
    popupVisibleChange: (visible: boolean) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    title?: unknown;
    content?: unknown;
    trigger?: unknown;
    position?: unknown;
    contentClass?: unknown;
    contentStyle?: unknown;
    arrowClass?: unknown;
    arrowStyle?: unknown;
    popupContainer?: unknown;
} & {
    defaultPopupVisible: boolean;
    trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
    position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
} & {
    popupVisible?: boolean | undefined;
    contentClass?: ClassName | undefined;
    contentStyle?: CSSProperties | undefined;
    arrowClass?: ClassName | undefined;
    arrowStyle?: CSSProperties | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    content?: string | undefined;
    title?: string | undefined;
}> & {
    "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
    onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
}, {
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
    position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
}>;
export default _default;
