import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Button from './button';
import _ButtonGroup from './button-group';
declare const Button: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            loading: boolean;
            long: boolean;
            htmlType: string;
        }> & Omit<Readonly<{
            type?: unknown;
            shape?: unknown;
            status?: unknown;
            size?: unknown;
            long?: unknown;
            loading?: unknown;
            disabled?: unknown;
            htmlType?: unknown;
            href?: unknown;
        } & {
            disabled: boolean;
            loading: boolean;
            long: boolean;
            htmlType: string;
        } & {
            size?: "mini" | "medium" | "large" | "small" | undefined;
            type?: "dashed" | "text" | "outline" | "primary" | "secondary" | undefined;
            href?: string | undefined;
            shape?: "round" | "circle" | "square" | undefined;
            status?: "normal" | "success" | "warning" | "danger" | undefined;
        }> & {
            onClick?: ((ev: MouseEvent) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "loading" | "long" | "htmlType">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "click", ev: MouseEvent) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            type?: unknown;
            shape?: unknown;
            status?: unknown;
            size?: unknown;
            long?: unknown;
            loading?: unknown;
            disabled?: unknown;
            htmlType?: unknown;
            href?: unknown;
        } & {
            disabled: boolean;
            loading: boolean;
            long: boolean;
            htmlType: string;
        } & {
            size?: "mini" | "medium" | "large" | "small" | undefined;
            type?: "dashed" | "text" | "outline" | "primary" | "secondary" | undefined;
            href?: string | undefined;
            shape?: "round" | "circle" | "square" | undefined;
            status?: "normal" | "success" | "warning" | "danger" | undefined;
        }> & {
            onClick?: ((ev: MouseEvent) => any) | undefined;
        }, {
            prefixCls: string;
            cls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            mergedDisabled: import("vue").ComputedRef<boolean>;
            handleClick: (ev: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            click: (ev: MouseEvent) => true;
        }, string, {
            disabled: boolean;
            loading: boolean;
            long: boolean;
            htmlType: string;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        type?: unknown;
        shape?: unknown;
        status?: unknown;
        size?: unknown;
        long?: unknown;
        loading?: unknown;
        disabled?: unknown;
        htmlType?: unknown;
        href?: unknown;
    } & {
        disabled: boolean;
        loading: boolean;
        long: boolean;
        htmlType: string;
    } & {
        size?: "mini" | "medium" | "large" | "small" | undefined;
        type?: "dashed" | "text" | "outline" | "primary" | "secondary" | undefined;
        href?: string | undefined;
        shape?: "round" | "circle" | "square" | undefined;
        status?: "normal" | "success" | "warning" | "danger" | undefined;
    }> & {
        onClick?: ((ev: MouseEvent) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        mergedDisabled: import("vue").ComputedRef<boolean>;
        handleClick: (ev: MouseEvent) => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    type?: unknown;
    shape?: unknown;
    status?: unknown;
    size?: unknown;
    long?: unknown;
    loading?: unknown;
    disabled?: unknown;
    htmlType?: unknown;
    href?: unknown;
} & {
    disabled: boolean;
    loading: boolean;
    long: boolean;
    htmlType: string;
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    type?: "dashed" | "text" | "outline" | "primary" | "secondary" | undefined;
    href?: string | undefined;
    shape?: "round" | "circle" | "square" | undefined;
    status?: "normal" | "success" | "warning" | "danger" | undefined;
}> & {
    onClick?: ((ev: MouseEvent) => any) | undefined;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    handleClick: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (ev: MouseEvent) => true;
}, string, {
    disabled: boolean;
    loading: boolean;
    long: boolean;
    htmlType: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Group: import("vue").DefineComponent<{
        type: {
            type: import("vue").PropType<"dashed" | "text" | "outline" | "primary" | "secondary">;
        };
        status: {
            type: import("vue").PropType<"normal" | "success" | "warning" | "danger">;
        };
        shape: {
            type: import("vue").PropType<"round" | "circle" | "square">;
        };
        size: {
            type: import("vue").PropType<"mini" | "medium" | "large" | "small">;
        };
        disabled: {
            type: BooleanConstructor;
        };
    }, {
        prefixCls: string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        type?: unknown;
        status?: unknown;
        shape?: unknown;
        size?: unknown;
        disabled?: unknown;
    } & {
        disabled: boolean;
    } & {
        size?: "mini" | "medium" | "large" | "small" | undefined;
        type?: "dashed" | "text" | "outline" | "primary" | "secondary" | undefined;
        shape?: "round" | "circle" | "square" | undefined;
        status?: "normal" | "success" | "warning" | "danger" | undefined;
    }>, {
        disabled: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type ButtonInstance = InstanceType<typeof _Button>;
export declare type ButtonGroupInstance = InstanceType<typeof _ButtonGroup>;
export type { ButtonProps } from './interface';
export { _ButtonGroup as ButtonGroup };
export default Button;
