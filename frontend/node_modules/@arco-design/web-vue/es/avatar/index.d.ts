import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Avatar from './avatar';
import _AvatarGroup from './avatar-group';
declare const Avatar: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            shape: import("./interface").AvatarShape;
            autoFixFontSize: boolean;
            triggerType: import("./interface").AvatarTriggerType;
        }> & Omit<Readonly<{
            shape?: unknown;
            imageUrl?: unknown;
            size?: unknown;
            autoFixFontSize?: unknown;
            triggerType?: unknown;
            triggerIconStyle?: unknown;
        } & {
            shape: import("./interface").AvatarShape;
            autoFixFontSize: boolean;
            triggerType: import("./interface").AvatarTriggerType;
        } & {
            size?: number | undefined;
            imageUrl?: string | undefined;
            triggerIconStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onLoad?: (() => any) | undefined;
            onError?: (() => any) | undefined;
            onClick?: ((ev: MouseEvent) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "shape" | "autoFixFontSize" | "triggerType">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "click", ev: MouseEvent) => void) & ((event: "error") => void) & ((event: "load") => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            shape?: unknown;
            imageUrl?: unknown;
            size?: unknown;
            autoFixFontSize?: unknown;
            triggerType?: unknown;
            triggerIconStyle?: unknown;
        } & {
            shape: import("./interface").AvatarShape;
            autoFixFontSize: boolean;
            triggerType: import("./interface").AvatarTriggerType;
        } & {
            size?: number | undefined;
            imageUrl?: string | undefined;
            triggerIconStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onLoad?: (() => any) | undefined;
            onError?: (() => any) | undefined;
            onClick?: ((ev: MouseEvent) => any) | undefined;
        }, {
            prefixCls: string;
            itemRef: import("vue").Ref<HTMLDivElement | undefined>;
            cls: import("vue").ComputedRef<string[]>;
            outerStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            wrapperRef: import("vue").Ref<HTMLElement | undefined>;
            wrapperCls: import("vue").ComputedRef<string>;
            computedTriggerIconStyle: import("vue").CSSProperties;
            isImage: import("vue").Ref<boolean>;
            shouldLoad: import("vue").Ref<boolean>;
            isLoaded: import("vue").Ref<boolean>;
            hasError: import("vue").Ref<boolean>;
            onClick: (e: MouseEvent) => void;
            handleResize: () => void;
            handleImgLoad: () => void;
            handleImgError: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            click: (ev: MouseEvent) => true;
            error: () => true;
            load: () => true;
        }, string, {
            shape: import("./interface").AvatarShape;
            autoFixFontSize: boolean;
            triggerType: import("./interface").AvatarTriggerType;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        shape?: unknown;
        imageUrl?: unknown;
        size?: unknown;
        autoFixFontSize?: unknown;
        triggerType?: unknown;
        triggerIconStyle?: unknown;
    } & {
        shape: import("./interface").AvatarShape;
        autoFixFontSize: boolean;
        triggerType: import("./interface").AvatarTriggerType;
    } & {
        size?: number | undefined;
        imageUrl?: string | undefined;
        triggerIconStyle?: import("vue").CSSProperties | undefined;
    }> & {
        onLoad?: (() => any) | undefined;
        onError?: (() => any) | undefined;
        onClick?: ((ev: MouseEvent) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        itemRef: import("vue").Ref<HTMLDivElement | undefined>;
        cls: import("vue").ComputedRef<string[]>;
        outerStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
        wrapperRef: import("vue").Ref<HTMLElement | undefined>;
        wrapperCls: import("vue").ComputedRef<string>;
        computedTriggerIconStyle: import("vue").CSSProperties;
        isImage: import("vue").Ref<boolean>;
        shouldLoad: import("vue").Ref<boolean>;
        isLoaded: import("vue").Ref<boolean>;
        hasError: import("vue").Ref<boolean>;
        onClick: (e: MouseEvent) => void;
        handleResize: () => void;
        handleImgLoad: () => void;
        handleImgError: () => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    shape?: unknown;
    imageUrl?: unknown;
    size?: unknown;
    autoFixFontSize?: unknown;
    triggerType?: unknown;
    triggerIconStyle?: unknown;
} & {
    shape: import("./interface").AvatarShape;
    autoFixFontSize: boolean;
    triggerType: import("./interface").AvatarTriggerType;
} & {
    size?: number | undefined;
    imageUrl?: string | undefined;
    triggerIconStyle?: import("vue").CSSProperties | undefined;
}> & {
    onLoad?: (() => any) | undefined;
    onError?: (() => any) | undefined;
    onClick?: ((ev: MouseEvent) => any) | undefined;
}, {
    prefixCls: string;
    itemRef: import("vue").Ref<HTMLDivElement | undefined>;
    cls: import("vue").ComputedRef<string[]>;
    outerStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    wrapperRef: import("vue").Ref<HTMLElement | undefined>;
    wrapperCls: import("vue").ComputedRef<string>;
    computedTriggerIconStyle: import("vue").CSSProperties;
    isImage: import("vue").Ref<boolean>;
    shouldLoad: import("vue").Ref<boolean>;
    isLoaded: import("vue").Ref<boolean>;
    hasError: import("vue").Ref<boolean>;
    onClick: (e: MouseEvent) => void;
    handleResize: () => void;
    handleImgLoad: () => void;
    handleImgError: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (ev: MouseEvent) => true;
    error: () => true;
    load: () => true;
}, string, {
    shape: import("./interface").AvatarShape;
    autoFixFontSize: boolean;
    triggerType: import("./interface").AvatarTriggerType;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Group: import("vue").DefineComponent<{
        shape: {
            type: import("vue").PropType<import("./interface").AvatarShape>;
            default: string;
        };
        size: NumberConstructor;
        autoFixFontSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxCount: {
            type: NumberConstructor;
            default: number;
        };
        zIndexAscend: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        maxPopoverTriggerProps: {
            type: import("vue").PropType<import("..").TriggerProps>;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        shape?: unknown;
        size?: unknown;
        autoFixFontSize?: unknown;
        maxCount?: unknown;
        zIndexAscend?: unknown;
        maxStyle?: unknown;
        maxPopoverTriggerProps?: unknown;
    } & {
        shape: import("./interface").AvatarShape;
        autoFixFontSize: boolean;
        maxCount: number;
        zIndexAscend: boolean;
    } & {
        size?: number | undefined;
        maxStyle?: import("vue").CSSProperties | undefined;
        maxPopoverTriggerProps?: import("..").TriggerProps | undefined;
    }>, {
        shape: import("./interface").AvatarShape;
        autoFixFontSize: boolean;
        maxCount: number;
        zIndexAscend: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type AvatarInstance = InstanceType<typeof _Avatar>;
export declare type AvatarGroupInstance = InstanceType<typeof _AvatarGroup>;
export { _AvatarGroup as AvatarGroup };
export default Avatar;
