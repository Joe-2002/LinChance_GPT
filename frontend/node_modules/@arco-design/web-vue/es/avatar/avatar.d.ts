import { CSSProperties, PropType } from 'vue';
import { AvatarShape, AvatarTriggerType } from './interface';
declare const _default: import("vue").DefineComponent<{
    shape: {
        type: PropType<AvatarShape>;
        default: string;
    };
    imageUrl: StringConstructor;
    size: NumberConstructor;
    autoFixFontSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    triggerType: {
        type: PropType<AvatarTriggerType>;
        default: string;
    };
    triggerIconStyle: {
        type: PropType<CSSProperties>;
    };
}, {
    prefixCls: string;
    itemRef: import("vue").Ref<HTMLDivElement | undefined>;
    cls: import("vue").ComputedRef<string[]>;
    outerStyle: import("vue").ComputedRef<CSSProperties>;
    wrapperRef: import("vue").Ref<HTMLElement | undefined>;
    wrapperCls: import("vue").ComputedRef<string>;
    computedTriggerIconStyle: CSSProperties;
    isImage: import("vue").Ref<boolean>;
    shouldLoad: import("vue").Ref<boolean>;
    isLoaded: import("vue").Ref<boolean>;
    hasError: import("vue").Ref<boolean>;
    onClick: (e: MouseEvent) => void;
    handleResize: () => void;
    handleImgLoad: () => void;
    handleImgError: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (ev: MouseEvent) => true;
    error: () => true;
    load: () => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    shape?: unknown;
    imageUrl?: unknown;
    size?: unknown;
    autoFixFontSize?: unknown;
    triggerType?: unknown;
    triggerIconStyle?: unknown;
} & {
    shape: AvatarShape;
    autoFixFontSize: boolean;
    triggerType: AvatarTriggerType;
} & {
    size?: number | undefined;
    imageUrl?: string | undefined;
    triggerIconStyle?: CSSProperties | undefined;
}> & {
    onLoad?: (() => any) | undefined;
    onError?: (() => any) | undefined;
    onClick?: ((ev: MouseEvent) => any) | undefined;
}, {
    shape: AvatarShape;
    autoFixFontSize: boolean;
    triggerType: AvatarTriggerType;
}>;
export default _default;
