import type { App, AppContext } from 'vue';
import { nextTick } from 'vue';
import { ArcoOptions } from '../_utils/types';
import _Drawer from './drawer';
import type { DrawerConfig, DrawerUpdateConfig } from './interface';
declare const Drawer: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            unmountOnClose: boolean;
            popupContainer: string | HTMLElement;
            renderToBody: boolean;
            visible: boolean;
            footer: boolean;
            header: boolean;
            mask: boolean;
            closable: boolean;
            height: string | number;
            width: string | number;
            defaultVisible: boolean;
            maskClosable: boolean;
            placement: "top" | "bottom" | "left" | "right";
            okLoading: boolean;
            escToClose: boolean;
            hideCancel: boolean;
        }> & Omit<Readonly<{
            visible?: unknown;
            defaultVisible?: unknown;
            placement?: unknown;
            title?: unknown;
            mask?: unknown;
            maskClosable?: unknown;
            closable?: unknown;
            okText?: unknown;
            cancelText?: unknown;
            okLoading?: unknown;
            okButtonProps?: unknown;
            cancelButtonProps?: unknown;
            unmountOnClose?: unknown;
            width?: unknown;
            height?: unknown;
            popupContainer?: unknown;
            drawerStyle?: unknown;
            onBeforeOk?: unknown;
            onBeforeCancel?: unknown;
            escToClose?: unknown;
            renderToBody?: unknown;
            header?: unknown;
            footer?: unknown;
            hideCancel?: unknown;
        } & {
            unmountOnClose: boolean;
            popupContainer: string | HTMLElement;
            renderToBody: boolean;
            visible: boolean;
            footer: boolean;
            header: boolean;
            mask: boolean;
            closable: boolean;
            height: string | number;
            width: string | number;
            defaultVisible: boolean;
            maskClosable: boolean;
            placement: "top" | "bottom" | "left" | "right";
            okLoading: boolean;
            escToClose: boolean;
            hideCancel: boolean;
        } & {
            title?: string | undefined;
            okText?: string | undefined;
            cancelText?: string | undefined;
            okButtonProps?: import("..").ButtonProps | undefined;
            cancelButtonProps?: import("..").ButtonProps | undefined;
            drawerStyle?: import("vue").CSSProperties | undefined;
            onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void | Promise<boolean | void>) | undefined;
            onBeforeCancel?: (() => boolean) | undefined;
        }> & {
            onClose?: (() => any) | undefined;
            "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
            onOk?: ((e: Event) => any) | undefined;
            onOpen?: (() => any) | undefined;
            onCancel?: ((e: Event) => any) | undefined;
            onBeforeOpen?: (() => any) | undefined;
            onBeforeClose?: (() => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "unmountOnClose" | "popupContainer" | "renderToBody" | "visible" | "footer" | "header" | "mask" | "closable" | "height" | "width" | "defaultVisible" | "maskClosable" | "placement" | "okLoading" | "escToClose" | "hideCancel">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "open") => void) & ((event: "cancel", e: Event) => void) & ((event: "close") => void) & ((event: "update:visible", visible: boolean) => void) & ((event: "ok", e: Event) => void) & ((event: "beforeOpen") => void) & ((event: "beforeClose") => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            visible?: unknown;
            defaultVisible?: unknown;
            placement?: unknown;
            title?: unknown;
            mask?: unknown;
            maskClosable?: unknown;
            closable?: unknown;
            okText?: unknown;
            cancelText?: unknown;
            okLoading?: unknown;
            okButtonProps?: unknown;
            cancelButtonProps?: unknown;
            unmountOnClose?: unknown;
            width?: unknown;
            height?: unknown;
            popupContainer?: unknown;
            drawerStyle?: unknown;
            onBeforeOk?: unknown;
            onBeforeCancel?: unknown;
            escToClose?: unknown;
            renderToBody?: unknown;
            header?: unknown;
            footer?: unknown;
            hideCancel?: unknown;
        } & {
            unmountOnClose: boolean;
            popupContainer: string | HTMLElement;
            renderToBody: boolean;
            visible: boolean;
            footer: boolean;
            header: boolean;
            mask: boolean;
            closable: boolean;
            height: string | number;
            width: string | number;
            defaultVisible: boolean;
            maskClosable: boolean;
            placement: "top" | "bottom" | "left" | "right";
            okLoading: boolean;
            escToClose: boolean;
            hideCancel: boolean;
        } & {
            title?: string | undefined;
            okText?: string | undefined;
            cancelText?: string | undefined;
            okButtonProps?: import("..").ButtonProps | undefined;
            cancelButtonProps?: import("..").ButtonProps | undefined;
            drawerStyle?: import("vue").CSSProperties | undefined;
            onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void | Promise<boolean | void>) | undefined;
            onBeforeCancel?: (() => boolean) | undefined;
        }> & {
            onClose?: (() => any) | undefined;
            "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
            onOk?: ((e: Event) => any) | undefined;
            onOpen?: (() => any) | undefined;
            onCancel?: ((e: Event) => any) | undefined;
            onBeforeOpen?: (() => any) | undefined;
            onBeforeClose?: (() => any) | undefined;
        }, {
            prefixCls: string;
            style: import("vue").ComputedRef<import("vue").CSSProperties>;
            t: (key: string, ...args: any[]) => string;
            mounted: import("vue").Ref<boolean>;
            computedVisible: import("vue").ComputedRef<boolean>;
            mergedOkLoading: import("vue").ComputedRef<boolean>;
            zIndex: import("vue").Ref<number>;
            handleOk: (e: Event) => Promise<void>;
            handleCancel: (e: Event) => void;
            handleOpen: () => void;
            handleClose: () => void;
            handleMask: (e: Event) => void;
            isFixed: import("vue").ComputedRef<boolean>;
            teleportContainer: import("vue").Ref<string | HTMLElement | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:visible': (visible: boolean) => true;
            ok: (e: Event) => true;
            cancel: (e: Event) => true;
            open: () => true;
            close: () => true;
            beforeOpen: () => true;
            beforeClose: () => true;
        }, string, {
            unmountOnClose: boolean;
            popupContainer: string | HTMLElement;
            renderToBody: boolean;
            visible: boolean;
            footer: boolean;
            header: boolean;
            mask: boolean;
            closable: boolean;
            height: string | number;
            width: string | number;
            defaultVisible: boolean;
            maskClosable: boolean;
            placement: "top" | "bottom" | "left" | "right";
            okLoading: boolean;
            escToClose: boolean;
            hideCancel: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        visible?: unknown;
        defaultVisible?: unknown;
        placement?: unknown;
        title?: unknown;
        mask?: unknown;
        maskClosable?: unknown;
        closable?: unknown;
        okText?: unknown;
        cancelText?: unknown;
        okLoading?: unknown;
        okButtonProps?: unknown;
        cancelButtonProps?: unknown;
        unmountOnClose?: unknown;
        width?: unknown;
        height?: unknown;
        popupContainer?: unknown;
        drawerStyle?: unknown;
        onBeforeOk?: unknown;
        onBeforeCancel?: unknown;
        escToClose?: unknown;
        renderToBody?: unknown;
        header?: unknown;
        footer?: unknown;
        hideCancel?: unknown;
    } & {
        unmountOnClose: boolean;
        popupContainer: string | HTMLElement;
        renderToBody: boolean;
        visible: boolean;
        footer: boolean;
        header: boolean;
        mask: boolean;
        closable: boolean;
        height: string | number;
        width: string | number;
        defaultVisible: boolean;
        maskClosable: boolean;
        placement: "top" | "bottom" | "left" | "right";
        okLoading: boolean;
        escToClose: boolean;
        hideCancel: boolean;
    } & {
        title?: string | undefined;
        okText?: string | undefined;
        cancelText?: string | undefined;
        okButtonProps?: import("..").ButtonProps | undefined;
        cancelButtonProps?: import("..").ButtonProps | undefined;
        drawerStyle?: import("vue").CSSProperties | undefined;
        onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void | Promise<boolean | void>) | undefined;
        onBeforeCancel?: (() => boolean) | undefined;
    }> & {
        onClose?: (() => any) | undefined;
        "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
        onOk?: ((e: Event) => any) | undefined;
        onOpen?: (() => any) | undefined;
        onCancel?: ((e: Event) => any) | undefined;
        onBeforeOpen?: (() => any) | undefined;
        onBeforeClose?: (() => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        style: import("vue").ComputedRef<import("vue").CSSProperties>;
        t: (key: string, ...args: any[]) => string;
        mounted: import("vue").Ref<boolean>;
        computedVisible: import("vue").ComputedRef<boolean>;
        mergedOkLoading: import("vue").ComputedRef<boolean>;
        zIndex: import("vue").Ref<number>;
        handleOk: (e: Event) => Promise<void>;
        handleCancel: (e: Event) => void;
        handleOpen: () => void;
        handleClose: () => void;
        handleMask: (e: Event) => void;
        isFixed: import("vue").ComputedRef<boolean>;
        teleportContainer: import("vue").Ref<string | HTMLElement | undefined>;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    visible?: unknown;
    defaultVisible?: unknown;
    placement?: unknown;
    title?: unknown;
    mask?: unknown;
    maskClosable?: unknown;
    closable?: unknown;
    okText?: unknown;
    cancelText?: unknown;
    okLoading?: unknown;
    okButtonProps?: unknown;
    cancelButtonProps?: unknown;
    unmountOnClose?: unknown;
    width?: unknown;
    height?: unknown;
    popupContainer?: unknown;
    drawerStyle?: unknown;
    onBeforeOk?: unknown;
    onBeforeCancel?: unknown;
    escToClose?: unknown;
    renderToBody?: unknown;
    header?: unknown;
    footer?: unknown;
    hideCancel?: unknown;
} & {
    unmountOnClose: boolean;
    popupContainer: string | HTMLElement;
    renderToBody: boolean;
    visible: boolean;
    footer: boolean;
    header: boolean;
    mask: boolean;
    closable: boolean;
    height: string | number;
    width: string | number;
    defaultVisible: boolean;
    maskClosable: boolean;
    placement: "top" | "bottom" | "left" | "right";
    okLoading: boolean;
    escToClose: boolean;
    hideCancel: boolean;
} & {
    title?: string | undefined;
    okText?: string | undefined;
    cancelText?: string | undefined;
    okButtonProps?: import("..").ButtonProps | undefined;
    cancelButtonProps?: import("..").ButtonProps | undefined;
    drawerStyle?: import("vue").CSSProperties | undefined;
    onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void | Promise<boolean | void>) | undefined;
    onBeforeCancel?: (() => boolean) | undefined;
}> & {
    onClose?: (() => any) | undefined;
    "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
    onOk?: ((e: Event) => any) | undefined;
    onOpen?: (() => any) | undefined;
    onCancel?: ((e: Event) => any) | undefined;
    onBeforeOpen?: (() => any) | undefined;
    onBeforeClose?: (() => any) | undefined;
}, {
    prefixCls: string;
    style: import("vue").ComputedRef<import("vue").CSSProperties>;
    t: (key: string, ...args: any[]) => string;
    mounted: import("vue").Ref<boolean>;
    computedVisible: import("vue").ComputedRef<boolean>;
    mergedOkLoading: import("vue").ComputedRef<boolean>;
    zIndex: import("vue").Ref<number>;
    handleOk: (e: Event) => Promise<void>;
    handleCancel: (e: Event) => void;
    handleOpen: () => void;
    handleClose: () => void;
    handleMask: (e: Event) => void;
    isFixed: import("vue").ComputedRef<boolean>;
    teleportContainer: import("vue").Ref<string | HTMLElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:visible': (visible: boolean) => true;
    ok: (e: Event) => true;
    cancel: (e: Event) => true;
    open: () => true;
    close: () => true;
    beforeOpen: () => true;
    beforeClose: () => true;
}, string, {
    unmountOnClose: boolean;
    popupContainer: string | HTMLElement;
    renderToBody: boolean;
    visible: boolean;
    footer: boolean;
    header: boolean;
    mask: boolean;
    closable: boolean;
    height: string | number;
    width: string | number;
    defaultVisible: boolean;
    maskClosable: boolean;
    placement: "top" | "bottom" | "left" | "right";
    okLoading: boolean;
    escToClose: boolean;
    hideCancel: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    open: (config: DrawerConfig, appContext?: AppContext | undefined) => {
        close: () => void;
        update: (config: DrawerUpdateConfig) => void;
    };
    install: (app: App, options?: ArcoOptions | undefined) => void;
    _context: AppContext | null;
};
export type { DrawerMethod, DrawerConfig, DrawerReturn } from './interface';
export declare type DrawerInstance = InstanceType<typeof _Drawer>;
export default Drawer;
