import { PropType } from 'vue';
import { ButtonProps } from '../button';
declare type DropdownPosition = 'top' | 'tl' | 'tr' | 'bottom' | 'bl' | 'br';
declare const _default: import("vue").DefineComponent<{
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultPopupVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: PropType<"hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[]>;
        default: string;
    };
    position: {
        type: PropType<DropdownPosition>;
        default: string;
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
    };
    size: {
        type: StringConstructor;
    };
    buttonProps: {
        type: PropType<ButtonProps>;
    };
    hideOnSelect: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    prefixCls: string;
    computedPopupVisible: import("vue").ComputedRef<boolean>;
    handleClick: (ev: MouseEvent) => void;
    handleSelect: (value: string | number | Record<string, unknown> | undefined, ev: Event) => void;
    handlePopupVisibleChange: (visible: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:popupVisible': (visible: boolean) => true;
    popupVisibleChange: (visible: boolean) => true;
    click: (ev: MouseEvent) => true;
    select: (value: string | number | Record<string, any> | undefined, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    trigger?: unknown;
    position?: unknown;
    popupContainer?: unknown;
    disabled?: unknown;
    type?: unknown;
    size?: unknown;
    buttonProps?: unknown;
    hideOnSelect?: unknown;
} & {
    defaultPopupVisible: boolean;
    trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
    position: DropdownPosition;
    disabled: boolean;
    hideOnSelect: boolean;
} & {
    popupVisible?: boolean | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    size?: string | undefined;
    type?: string | undefined;
    buttonProps?: ButtonProps | undefined;
}> & {
    "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
    onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
    onClick?: ((ev: MouseEvent) => any) | undefined;
    onSelect?: ((value: string | number | Record<string, any> | undefined, ev: Event) => any) | undefined;
}, {
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
    position: DropdownPosition;
    disabled: boolean;
    hideOnSelect: boolean;
}>;
export default _default;
