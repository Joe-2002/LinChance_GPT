var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("vue")) : typeof define === "function" && define.amd ? define(["vue"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.ArcoVueIcon = factory(global.Vue));
})(this, function(vue) {
  "use strict";
  const configProviderInjectionKey = Symbol("ArcoConfigProvider");
  const CLASS_PREFIX = "arco";
  const GLOBAL_CONFIG_NAME = "$arco";
  const getPrefixCls = (componentName) => {
    var _a, _b, _c;
    const instance = vue.getCurrentInstance();
    const configProvider = vue.inject(configProviderInjectionKey, void 0);
    const prefix = (_c = (_b = configProvider == null ? void 0 : configProvider.prefixCls) != null ? _b : (_a = instance == null ? void 0 : instance.appContext.config.globalProperties[GLOBAL_CONFIG_NAME]) == null ? void 0 : _a.classPrefix) != null ? _c : CLASS_PREFIX;
    if (componentName) {
      return `${prefix}-${componentName}`;
    }
    return prefix;
  };
  const opt = Object.prototype.toString;
  function isNumber(obj) {
    return opt.call(obj) === "[object Number]" && obj === obj;
  }
  var _export_sfc = (sfc, props) => {
    for (const [key, val] of props) {
      sfc[key] = val;
    }
    return sfc;
  };
  const _sfc_main$4u = vue.defineComponent({
    name: "IconArrowDown",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-arrow-down`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4u = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4u = /* @__PURE__ */ vue.createElementVNode("path", { d: "m11.27 27.728 12.727 12.728 12.728-12.728M24 5v34.295" }, null, -1);
  const _hoisted_3$4q = [
    _hoisted_2$4u
  ];
  function _sfc_render$4u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4q, 14, _hoisted_1$4u);
  }
  var _IconArrowDown = /* @__PURE__ */ _export_sfc(_sfc_main$4u, [["render", _sfc_render$4u]]);
  const IconArrowDown = Object.assign(_IconArrowDown, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArrowDown.name, _IconArrowDown);
    }
  });
  const _sfc_main$4t = vue.defineComponent({
    name: "IconArrowFall",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-arrow-fall`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4t = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4t = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24.008 41.99a.01.01 0 0 1-.016 0l-9.978-11.974A.01.01 0 0 1 14.02 30H33.98a.01.01 0 0 1 .007.016l-9.978 11.975Z" }, null, -1);
  const _hoisted_3$4p = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 42 14 30h20L24 42Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$1a = /* @__PURE__ */ vue.createElementVNode("path", { d: "M22 6h4v26h-4z" }, null, -1);
  const _hoisted_5$k = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M22 6h4v26h-4z"
  }, null, -1);
  const _hoisted_6$6 = [
    _hoisted_2$4t,
    _hoisted_3$4p,
    _hoisted_4$1a,
    _hoisted_5$k
  ];
  function _sfc_render$4t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6$6, 14, _hoisted_1$4t);
  }
  var _IconArrowFall = /* @__PURE__ */ _export_sfc(_sfc_main$4t, [["render", _sfc_render$4t]]);
  const IconArrowFall = Object.assign(_IconArrowFall, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArrowFall.name, _IconArrowFall);
    }
  });
  const _sfc_main$4s = vue.defineComponent({
    name: "IconArrowLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-arrow-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4s = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4s = /* @__PURE__ */ vue.createElementVNode("path", { d: "M20.272 11.27 7.544 23.998l12.728 12.728M43 24H8.705" }, null, -1);
  const _hoisted_3$4o = [
    _hoisted_2$4s
  ];
  function _sfc_render$4s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4o, 14, _hoisted_1$4s);
  }
  var _IconArrowLeft = /* @__PURE__ */ _export_sfc(_sfc_main$4s, [["render", _sfc_render$4s]]);
  const IconArrowLeft = Object.assign(_IconArrowLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArrowLeft.name, _IconArrowLeft);
    }
  });
  const _sfc_main$4r = vue.defineComponent({
    name: "IconArrowRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-arrow-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4r = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4r = /* @__PURE__ */ vue.createElementVNode("path", { d: "m27.728 11.27 12.728 12.728-12.728 12.728M5 24h34.295" }, null, -1);
  const _hoisted_3$4n = [
    _hoisted_2$4r
  ];
  function _sfc_render$4r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4n, 14, _hoisted_1$4r);
  }
  var _IconArrowRight = /* @__PURE__ */ _export_sfc(_sfc_main$4r, [["render", _sfc_render$4r]]);
  const IconArrowRight = Object.assign(_IconArrowRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArrowRight.name, _IconArrowRight);
    }
  });
  const _sfc_main$4q = vue.defineComponent({
    name: "IconArrowRise",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-arrow-rise`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4q = /* @__PURE__ */ vue.createElementVNode("path", { d: "M23.992 6.01a.01.01 0 0 1 .016 0l9.978 11.974a.01.01 0 0 1-.007.016H14.02a.01.01 0 0 1-.007-.016l9.978-11.975Z" }, null, -1);
  const _hoisted_3$4m = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m24 6 10 12H14L24 6Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$19 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M26 42h-4V16h4z" }, null, -1);
  const _hoisted_5$j = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M26 42h-4V16h4z"
  }, null, -1);
  const _hoisted_6$5 = [
    _hoisted_2$4q,
    _hoisted_3$4m,
    _hoisted_4$19,
    _hoisted_5$j
  ];
  function _sfc_render$4q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6$5, 14, _hoisted_1$4q);
  }
  var _IconArrowRise = /* @__PURE__ */ _export_sfc(_sfc_main$4q, [["render", _sfc_render$4q]]);
  const IconArrowRise = Object.assign(_IconArrowRise, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArrowRise.name, _IconArrowRise);
    }
  });
  const _sfc_main$4p = vue.defineComponent({
    name: "IconArrowUp",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-arrow-up`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4p = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4p = /* @__PURE__ */ vue.createElementVNode("path", { d: "M11.27 20.272 23.997 7.544l12.728 12.728M24 43V8.705" }, null, -1);
  const _hoisted_3$4l = [
    _hoisted_2$4p
  ];
  function _sfc_render$4p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4l, 14, _hoisted_1$4p);
  }
  var _IconArrowUp = /* @__PURE__ */ _export_sfc(_sfc_main$4p, [["render", _sfc_render$4p]]);
  const IconArrowUp = Object.assign(_IconArrowUp, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArrowUp.name, _IconArrowUp);
    }
  });
  const _sfc_main$4o = vue.defineComponent({
    name: "IconCaretDown",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-caret-down`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4o = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4o = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24.938 34.829a1.2 1.2 0 0 1-1.875 0L9.56 17.949c-.628-.785-.069-1.949.937-1.949h27.007c1.006 0 1.565 1.164.937 1.95L24.937 34.829Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$4k = [
    _hoisted_2$4o
  ];
  function _sfc_render$4o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4k, 14, _hoisted_1$4o);
  }
  var _IconCaretDown = /* @__PURE__ */ _export_sfc(_sfc_main$4o, [["render", _sfc_render$4o]]);
  const IconCaretDown = Object.assign(_IconCaretDown, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCaretDown.name, _IconCaretDown);
    }
  });
  const _sfc_main$4n = vue.defineComponent({
    name: "IconCaretLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-caret-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4n = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4n = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M13.171 24.937a1.2 1.2 0 0 1 0-1.874L30.051 9.56c.785-.629 1.949-.07 1.949.937v27.006c0 1.006-1.164 1.566-1.95.937L13.171 24.937Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$4j = [
    _hoisted_2$4n
  ];
  function _sfc_render$4n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4j, 14, _hoisted_1$4n);
  }
  var _IconCaretLeft = /* @__PURE__ */ _export_sfc(_sfc_main$4n, [["render", _sfc_render$4n]]);
  const IconCaretLeft = Object.assign(_IconCaretLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCaretLeft.name, _IconCaretLeft);
    }
  });
  const _sfc_main$4m = vue.defineComponent({
    name: "IconCaretRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-caret-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4m = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4m = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M34.829 23.063c.6.48.6 1.394 0 1.874L17.949 38.44c-.785.629-1.949.07-1.949-.937V10.497c0-1.007 1.164-1.566 1.95-.937l16.879 13.503Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$4i = [
    _hoisted_2$4m
  ];
  function _sfc_render$4m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4i, 14, _hoisted_1$4m);
  }
  var _IconCaretRight = /* @__PURE__ */ _export_sfc(_sfc_main$4m, [["render", _sfc_render$4m]]);
  const IconCaretRight = Object.assign(_IconCaretRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCaretRight.name, _IconCaretRight);
    }
  });
  const _sfc_main$4l = vue.defineComponent({
    name: "IconCaretUp",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-caret-up`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4l = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4l = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M23.063 13.171a1.2 1.2 0 0 1 1.875 0l13.503 16.88c.628.785.069 1.949-.937 1.949H10.497c-1.006 0-1.565-1.164-.937-1.95l13.503-16.879Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$4h = [
    _hoisted_2$4l
  ];
  function _sfc_render$4l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4h, 14, _hoisted_1$4l);
  }
  var _IconCaretUp = /* @__PURE__ */ _export_sfc(_sfc_main$4l, [["render", _sfc_render$4l]]);
  const IconCaretUp = Object.assign(_IconCaretUp, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCaretUp.name, _IconCaretUp);
    }
  });
  const _sfc_main$4k = vue.defineComponent({
    name: "IconDoubleDown",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-double-down`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4k = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4k = /* @__PURE__ */ vue.createElementVNode("path", { d: "m9.9 11.142 14.143 14.142 14.142-14.142M9.9 22.456l14.143 14.142 14.142-14.142" }, null, -1);
  const _hoisted_3$4g = [
    _hoisted_2$4k
  ];
  function _sfc_render$4k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4g, 14, _hoisted_1$4k);
  }
  var _IconDoubleDown = /* @__PURE__ */ _export_sfc(_sfc_main$4k, [["render", _sfc_render$4k]]);
  const IconDoubleDown = Object.assign(_IconDoubleDown, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDoubleDown.name, _IconDoubleDown);
    }
  });
  const _sfc_main$4j = vue.defineComponent({
    name: "IconDoubleLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-double-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4j = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4j = /* @__PURE__ */ vue.createElementVNode("path", { d: "M36.857 9.9 22.715 24.042l14.142 14.142M25.544 9.9 11.402 24.042l14.142 14.142" }, null, -1);
  const _hoisted_3$4f = [
    _hoisted_2$4j
  ];
  function _sfc_render$4j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4f, 14, _hoisted_1$4j);
  }
  var _IconDoubleLeft = /* @__PURE__ */ _export_sfc(_sfc_main$4j, [["render", _sfc_render$4j]]);
  const IconDoubleLeft = Object.assign(_IconDoubleLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDoubleLeft.name, _IconDoubleLeft);
    }
  });
  const _sfc_main$4i = vue.defineComponent({
    name: "IconDoubleRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-double-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4i = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4i = /* @__PURE__ */ vue.createElementVNode("path", { d: "m11.143 38.1 14.142-14.142L11.143 9.816M22.456 38.1l14.142-14.142L22.456 9.816" }, null, -1);
  const _hoisted_3$4e = [
    _hoisted_2$4i
  ];
  function _sfc_render$4i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4e, 14, _hoisted_1$4i);
  }
  var _IconDoubleRight = /* @__PURE__ */ _export_sfc(_sfc_main$4i, [["render", _sfc_render$4i]]);
  const IconDoubleRight = Object.assign(_IconDoubleRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDoubleRight.name, _IconDoubleRight);
    }
  });
  const _sfc_main$4h = vue.defineComponent({
    name: "IconDoubleUp",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-double-up`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4h = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4h = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38.1 36.858 23.957 22.716 9.816 36.858M38.1 25.544 23.957 11.402 9.816 25.544" }, null, -1);
  const _hoisted_3$4d = [
    _hoisted_2$4h
  ];
  function _sfc_render$4h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4d, 14, _hoisted_1$4h);
  }
  var _IconDoubleUp = /* @__PURE__ */ _export_sfc(_sfc_main$4h, [["render", _sfc_render$4h]]);
  const IconDoubleUp = Object.assign(_IconDoubleUp, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDoubleUp.name, _IconDoubleUp);
    }
  });
  const _sfc_main$4g = vue.defineComponent({
    name: "IconDownCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-down-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4g = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4g = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "18",
    transform: "rotate(-180 24 24)"
  }, null, -1);
  const _hoisted_3$4c = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32.484 20.515 24 29l-8.485-8.485" }, null, -1);
  const _hoisted_4$18 = [
    _hoisted_2$4g,
    _hoisted_3$4c
  ];
  function _sfc_render$4g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$18, 14, _hoisted_1$4g);
  }
  var _IconDownCircle = /* @__PURE__ */ _export_sfc(_sfc_main$4g, [["render", _sfc_render$4g]]);
  const IconDownCircle = Object.assign(_IconDownCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDownCircle.name, _IconDownCircle);
    }
  });
  const _sfc_main$4f = vue.defineComponent({
    name: "IconDown",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-down`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4f = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4f = /* @__PURE__ */ vue.createElementVNode("path", { d: "M39.6 17.443 24.043 33 8.487 17.443" }, null, -1);
  const _hoisted_3$4b = [
    _hoisted_2$4f
  ];
  function _sfc_render$4f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4b, 14, _hoisted_1$4f);
  }
  var _IconDown = /* @__PURE__ */ _export_sfc(_sfc_main$4f, [["render", _sfc_render$4f]]);
  const IconDown = Object.assign(_IconDown, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDown.name, _IconDown);
    }
  });
  const _sfc_main$4e = vue.defineComponent({
    name: "IconDragArrow",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-drag-arrow`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4e = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4e = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 24h34M24 7v34M30 12l-6-6-6 6M36 30l6-6-6-6M12 30l-6-6 6-6M18 36l6 6 6-6" }, null, -1);
  const _hoisted_3$4a = [
    _hoisted_2$4e
  ];
  function _sfc_render$4e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$4a, 14, _hoisted_1$4e);
  }
  var _IconDragArrow = /* @__PURE__ */ _export_sfc(_sfc_main$4e, [["render", _sfc_render$4e]]);
  const IconDragArrow = Object.assign(_IconDragArrow, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDragArrow.name, _IconDragArrow);
    }
  });
  const _sfc_main$4d = vue.defineComponent({
    name: "IconExpand",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-expand`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4d = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4d = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 26v14c0 .552.444 1 .996 1H22m19-19V8c0-.552-.444-1-.996-1H26" }, null, -1);
  const _hoisted_3$49 = [
    _hoisted_2$4d
  ];
  function _sfc_render$4d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$49, 14, _hoisted_1$4d);
  }
  var _IconExpand = /* @__PURE__ */ _export_sfc(_sfc_main$4d, [["render", _sfc_render$4d]]);
  const IconExpand = Object.assign(_IconExpand, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExpand.name, _IconExpand);
    }
  });
  const _sfc_main$4c = vue.defineComponent({
    name: "IconLeftCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-left-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4c = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4c = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "18"
  }, null, -1);
  const _hoisted_3$48 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M28.485 32.485 20 24l8.485-8.485" }, null, -1);
  const _hoisted_4$17 = [
    _hoisted_2$4c,
    _hoisted_3$48
  ];
  function _sfc_render$4c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$17, 14, _hoisted_1$4c);
  }
  var _IconLeftCircle = /* @__PURE__ */ _export_sfc(_sfc_main$4c, [["render", _sfc_render$4c]]);
  const IconLeftCircle = Object.assign(_IconLeftCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLeftCircle.name, _IconLeftCircle);
    }
  });
  const _sfc_main$4b = vue.defineComponent({
    name: "IconLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4b = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4b = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32 8.4 16.444 23.956 32 39.513" }, null, -1);
  const _hoisted_3$47 = [
    _hoisted_2$4b
  ];
  function _sfc_render$4b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$47, 14, _hoisted_1$4b);
  }
  var _IconLeft = /* @__PURE__ */ _export_sfc(_sfc_main$4b, [["render", _sfc_render$4b]]);
  const IconLeft = Object.assign(_IconLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLeft.name, _IconLeft);
    }
  });
  const _sfc_main$4a = vue.defineComponent({
    name: "IconMenuFold",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-menu-fold`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4a = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4a = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 11H6M42 24H22M42 37H6M13.66 26.912l-4.82-3.118 4.82-3.118v6.236Z" }, null, -1);
  const _hoisted_3$46 = [
    _hoisted_2$4a
  ];
  function _sfc_render$4a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$46, 14, _hoisted_1$4a);
  }
  var _IconMenuFold = /* @__PURE__ */ _export_sfc(_sfc_main$4a, [["render", _sfc_render$4a]]);
  const IconMenuFold = Object.assign(_IconMenuFold, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMenuFold.name, _IconMenuFold);
    }
  });
  const _sfc_main$49 = vue.defineComponent({
    name: "IconMenuUnfold",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-menu-unfold`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$49 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$49 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 11h36M22 24h20M6 37h36M8 20.882 12.819 24 8 27.118v-6.236Z" }, null, -1);
  const _hoisted_3$45 = [
    _hoisted_2$49
  ];
  function _sfc_render$49(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$45, 14, _hoisted_1$49);
  }
  var _IconMenuUnfold = /* @__PURE__ */ _export_sfc(_sfc_main$49, [["render", _sfc_render$49]]);
  const IconMenuUnfold = Object.assign(_IconMenuUnfold, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMenuUnfold.name, _IconMenuUnfold);
    }
  });
  const _sfc_main$48 = vue.defineComponent({
    name: "IconRightCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-right-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$48 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$48 = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "18"
  }, null, -1);
  const _hoisted_3$44 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19.485 15.515 27.971 24l-8.486 8.485" }, null, -1);
  const _hoisted_4$16 = [
    _hoisted_2$48,
    _hoisted_3$44
  ];
  function _sfc_render$48(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$16, 14, _hoisted_1$48);
  }
  var _IconRightCircle = /* @__PURE__ */ _export_sfc(_sfc_main$48, [["render", _sfc_render$48]]);
  const IconRightCircle = Object.assign(_IconRightCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRightCircle.name, _IconRightCircle);
    }
  });
  const _sfc_main$47 = vue.defineComponent({
    name: "IconRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$47 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$47 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m16 39.513 15.556-15.557L16 8.4" }, null, -1);
  const _hoisted_3$43 = [
    _hoisted_2$47
  ];
  function _sfc_render$47(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$43, 14, _hoisted_1$47);
  }
  var _IconRight = /* @__PURE__ */ _export_sfc(_sfc_main$47, [["render", _sfc_render$47]]);
  const IconRight = Object.assign(_IconRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRight.name, _IconRight);
    }
  });
  const _sfc_main$46 = vue.defineComponent({
    name: "IconRotateLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-rotate-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$46 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$46 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M10 22a1 1 0 0 1 1-1h20a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H11a1 1 0 0 1-1-1V22ZM23 11h11a6 6 0 0 1 6 6v6M22.5 12.893 19.587 11 22.5 9.107v3.786Z" }, null, -1);
  const _hoisted_3$42 = [
    _hoisted_2$46
  ];
  function _sfc_render$46(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$42, 14, _hoisted_1$46);
  }
  var _IconRotateLeft = /* @__PURE__ */ _export_sfc(_sfc_main$46, [["render", _sfc_render$46]]);
  const IconRotateLeft = Object.assign(_IconRotateLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRotateLeft.name, _IconRotateLeft);
    }
  });
  const _sfc_main$45 = vue.defineComponent({
    name: "IconRotateRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-rotate-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$45 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$45 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38 22a1 1 0 0 0-1-1H17a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1V22ZM25 11H14a6 6 0 0 0-6 6v6M25.5 12.893 28.413 11 25.5 9.107v3.786Z" }, null, -1);
  const _hoisted_3$41 = [
    _hoisted_2$45
  ];
  function _sfc_render$45(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$41, 14, _hoisted_1$45);
  }
  var _IconRotateRight = /* @__PURE__ */ _export_sfc(_sfc_main$45, [["render", _sfc_render$45]]);
  const IconRotateRight = Object.assign(_IconRotateRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRotateRight.name, _IconRotateRight);
    }
  });
  const _sfc_main$44 = vue.defineComponent({
    name: "IconShrink",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-shrink`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$44 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$44 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M20 44V29c0-.552-.444-1-.996-1H4M28 4v15c0 .552.444 1 .996 1H44" }, null, -1);
  const _hoisted_3$40 = [
    _hoisted_2$44
  ];
  function _sfc_render$44(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$40, 14, _hoisted_1$44);
  }
  var _IconShrink = /* @__PURE__ */ _export_sfc(_sfc_main$44, [["render", _sfc_render$44]]);
  const IconShrink = Object.assign(_IconShrink, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconShrink.name, _IconShrink);
    }
  });
  const _sfc_main$43 = vue.defineComponent({
    name: "IconSwap",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-swap`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$43 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$43 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 17h35.586c.89 0 1.337-1.077.707-1.707L33 7M43 31H7.414c-.89 0-1.337 1.077-.707 1.707L15 41" }, null, -1);
  const _hoisted_3$3$ = [
    _hoisted_2$43
  ];
  function _sfc_render$43(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3$, 14, _hoisted_1$43);
  }
  var _IconSwap = /* @__PURE__ */ _export_sfc(_sfc_main$43, [["render", _sfc_render$43]]);
  const IconSwap = Object.assign(_IconSwap, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSwap.name, _IconSwap);
    }
  });
  const _sfc_main$42 = vue.defineComponent({
    name: "IconToBottom",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-to-bottom`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$42 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$42 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 41h38M24 28V5M24 34.04 17.547 27h12.907L24 34.04Zm-.736.803v.001Z" }, null, -1);
  const _hoisted_3$3_ = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m24 34 6-7H18l6 7Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$15 = [
    _hoisted_2$42,
    _hoisted_3$3_
  ];
  function _sfc_render$42(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$15, 14, _hoisted_1$42);
  }
  var _IconToBottom = /* @__PURE__ */ _export_sfc(_sfc_main$42, [["render", _sfc_render$42]]);
  const IconToBottom = Object.assign(_IconToBottom, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconToBottom.name, _IconToBottom);
    }
  });
  const _sfc_main$41 = vue.defineComponent({
    name: "IconToLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-to-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$41 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$41 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 5v38M20 24h23M20.999 17.547v12.907L13.959 24l7.04-6.453Z" }, null, -1);
  const _hoisted_3$3Z = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m14 24 7 6V18l-7 6Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$14 = [
    _hoisted_2$41,
    _hoisted_3$3Z
  ];
  function _sfc_render$41(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$14, 14, _hoisted_1$41);
  }
  var _IconToLeft = /* @__PURE__ */ _export_sfc(_sfc_main$41, [["render", _sfc_render$41]]);
  const IconToLeft = Object.assign(_IconToLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconToLeft.name, _IconToLeft);
    }
  });
  const _sfc_main$40 = vue.defineComponent({
    name: "IconToRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-to-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$40 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$40 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41 43V5M28 24H5M34.04 24 27 30.453V17.546L34.04 24Zm.803.736h.001Z" }, null, -1);
  const _hoisted_3$3Y = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m34 24-7-6v12l7-6Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$13 = [
    _hoisted_2$40,
    _hoisted_3$3Y
  ];
  function _sfc_render$40(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$13, 14, _hoisted_1$40);
  }
  var _IconToRight = /* @__PURE__ */ _export_sfc(_sfc_main$40, [["render", _sfc_render$40]]);
  const IconToRight = Object.assign(_IconToRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconToRight.name, _IconToRight);
    }
  });
  const _sfc_main$3$ = vue.defineComponent({
    name: "IconToTop",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-to-top`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3$ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3$ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M43 7H5M24 20v23M24 13.96 30.453 21H17.546L24 13.96Zm.736-.804Z" }, null, -1);
  const _hoisted_3$3X = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m24 14-6 7h12l-6-7Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$12 = [
    _hoisted_2$3$,
    _hoisted_3$3X
  ];
  function _sfc_render$3$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$12, 14, _hoisted_1$3$);
  }
  var _IconToTop = /* @__PURE__ */ _export_sfc(_sfc_main$3$, [["render", _sfc_render$3$]]);
  const IconToTop = Object.assign(_IconToTop, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconToTop.name, _IconToTop);
    }
  });
  const _sfc_main$3_ = vue.defineComponent({
    name: "IconUpCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-up-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3_ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3_ = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "18"
  }, null, -1);
  const _hoisted_3$3W = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15.516 28.485 24 20l8.485 8.485" }, null, -1);
  const _hoisted_4$11 = [
    _hoisted_2$3_,
    _hoisted_3$3W
  ];
  function _sfc_render$3_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$11, 14, _hoisted_1$3_);
  }
  var _IconUpCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3_, [["render", _sfc_render$3_]]);
  const IconUpCircle = Object.assign(_IconUpCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUpCircle.name, _IconUpCircle);
    }
  });
  const _sfc_main$3Z = vue.defineComponent({
    name: "IconUp",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-up`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3Z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3Z = /* @__PURE__ */ vue.createElementVNode("path", { d: "M39.6 30.557 24.043 15 8.487 30.557" }, null, -1);
  const _hoisted_3$3V = [
    _hoisted_2$3Z
  ];
  function _sfc_render$3Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3V, 14, _hoisted_1$3Z);
  }
  var _IconUp = /* @__PURE__ */ _export_sfc(_sfc_main$3Z, [["render", _sfc_render$3Z]]);
  const IconUp = Object.assign(_IconUp, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUp.name, _IconUp);
    }
  });
  const _sfc_main$3Y = vue.defineComponent({
    name: "IconCheckCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-check-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3Y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3Y = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm10.207-24.379a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0L22 26.172l-4.878-4.88a1 1 0 0 0-1.415 0l-1.414 1.415a1 1 0 0 0 0 1.414l7 7a1 1 0 0 0 1.414 0l11.5-11.5Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3U = [
    _hoisted_2$3Y
  ];
  function _sfc_render$3Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3U, 14, _hoisted_1$3Y);
  }
  var _IconCheckCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3Y, [["render", _sfc_render$3Y]]);
  const IconCheckCircleFill = Object.assign(_IconCheckCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCheckCircleFill.name, _IconCheckCircleFill);
    }
  });
  const _sfc_main$3X = vue.defineComponent({
    name: "IconCloseCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-close-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3X = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3X = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm4.955-27.771-4.95 4.95-4.95-4.95a1 1 0 0 0-1.414 0l-1.414 1.414a1 1 0 0 0 0 1.414l4.95 4.95-4.95 4.95a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l4.95-4.95 4.95 4.95a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-4.95-4.95 4.95-4.95a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3T = [
    _hoisted_2$3X
  ];
  function _sfc_render$3X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3T, 14, _hoisted_1$3X);
  }
  var _IconCloseCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3X, [["render", _sfc_render$3X]]);
  const IconCloseCircleFill = Object.assign(_IconCloseCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCloseCircleFill.name, _IconCloseCircleFill);
    }
  });
  const _sfc_main$3W = vue.defineComponent({
    name: "IconExclamationCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-exclamation-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3W = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3W = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-2-11a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2Zm4-18a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V15Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3S = [
    _hoisted_2$3W
  ];
  function _sfc_render$3W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3S, 14, _hoisted_1$3W);
  }
  var _IconExclamationCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3W, [["render", _sfc_render$3W]]);
  const IconExclamationCircleFill = Object.assign(_IconExclamationCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExclamationCircleFill.name, _IconExclamationCircleFill);
    }
  });
  const _sfc_main$3V = vue.defineComponent({
    name: "IconExclamationPolygonFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-exclamation-polygon-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3V = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3V = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M15.553 4a1 1 0 0 0-.74.327L4.26 15.937a1 1 0 0 0-.26.672V31.39a1 1 0 0 0 .26.673l10.553 11.609a1 1 0 0 0 .74.327h16.893a1 1 0 0 0 .74-.327l10.554-11.61a1 1 0 0 0 .26-.672V16.61a1 1 0 0 0-.26-.673L33.187 4.327a1 1 0 0 0-.74-.327H15.553ZM22 33a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2Zm4-18a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V15Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3R = [
    _hoisted_2$3V
  ];
  function _sfc_render$3V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3R, 14, _hoisted_1$3V);
  }
  var _IconExclamationPolygonFill = /* @__PURE__ */ _export_sfc(_sfc_main$3V, [["render", _sfc_render$3V]]);
  const IconExclamationPolygonFill = Object.assign(_IconExclamationPolygonFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExclamationPolygonFill.name, _IconExclamationPolygonFill);
    }
  });
  const _sfc_main$3U = vue.defineComponent({
    name: "IconInfoCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-info-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3U = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3U = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm2-30a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2Zm0 17h1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h1v-8a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v11Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3Q = [
    _hoisted_2$3U
  ];
  function _sfc_render$3U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3Q, 14, _hoisted_1$3U);
  }
  var _IconInfoCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3U, [["render", _sfc_render$3U]]);
  const IconInfoCircleFill = Object.assign(_IconInfoCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconInfoCircleFill.name, _IconInfoCircleFill);
    }
  });
  const _sfc_main$3T = vue.defineComponent({
    name: "IconMinusCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-minus-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3T = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3T = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-7-22a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H17Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3P = [
    _hoisted_2$3T
  ];
  function _sfc_render$3T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3P, 14, _hoisted_1$3T);
  }
  var _IconMinusCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3T, [["render", _sfc_render$3T]]);
  const IconMinusCircleFill = Object.assign(_IconMinusCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMinusCircleFill.name, _IconMinusCircleFill);
    }
  });
  const _sfc_main$3S = vue.defineComponent({
    name: "IconPlusCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-plus-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3S = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3S = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm2-28v6h6a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-6v6a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-6h-6a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h6v-6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3O = [
    _hoisted_2$3S
  ];
  function _sfc_render$3S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3O, 14, _hoisted_1$3S);
  }
  var _IconPlusCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3S, [["render", _sfc_render$3S]]);
  const IconPlusCircleFill = Object.assign(_IconPlusCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlusCircleFill.name, _IconPlusCircleFill);
    }
  });
  const _sfc_main$3R = vue.defineComponent({
    name: "IconQuestionCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-question-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3R = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3R = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-3.862-24.021a.461.461 0 0 0 .462-.462 2.37 2.37 0 0 1 .636-1.615C21.64 17.48 22.43 17 23.988 17c1.465 0 2.483.7 3.002 1.493.555.848.446 1.559.182 1.914-.328.444-.736.853-1.228 1.296-.15.135-.335.296-.533.468-.354.308-.75.654-1.067.955C23.22 24.195 22 25.686 22 28v.013a1 1 0 0 0 1.006.993l2.008-.012a.993.993 0 0 0 .986-1c.002-.683.282-1.19 1.101-1.97.276-.262.523-.477.806-.722.21-.18.439-.379.713-.626.57-.513 1.205-1.13 1.767-1.888 1.516-2.047 1.161-4.634-.05-6.485C29.092 14.398 26.825 13 23.988 13c-2.454 0-4.357.794-5.642 2.137-1.25 1.307-1.742 2.954-1.746 4.37 0 .26.21.472.47.472h3.068Zm1.868 14.029a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V32a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2.008Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3N = [
    _hoisted_2$3R
  ];
  function _sfc_render$3R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3N, 14, _hoisted_1$3R);
  }
  var _IconQuestionCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$3R, [["render", _sfc_render$3R]]);
  const IconQuestionCircleFill = Object.assign(_IconQuestionCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQuestionCircleFill.name, _IconQuestionCircleFill);
    }
  });
  const _sfc_main$3Q = vue.defineComponent({
    name: "IconCheckCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-check-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3Q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3Q = /* @__PURE__ */ vue.createElementVNode("path", { d: "m15 22 7 7 11.5-11.5M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3M = [
    _hoisted_2$3Q
  ];
  function _sfc_render$3Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3M, 14, _hoisted_1$3Q);
  }
  var _IconCheckCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3Q, [["render", _sfc_render$3Q]]);
  const IconCheckCircle = Object.assign(_IconCheckCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCheckCircle.name, _IconCheckCircle);
    }
  });
  const _sfc_main$3P = vue.defineComponent({
    name: "IconCheckSquare",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-check-square`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3P = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3P = /* @__PURE__ */ vue.createElementVNode("path", { d: "M34.603 16.672 21.168 30.107l-7.778-7.779M8 41h32a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v32a1 1 0 0 0 1 1Z" }, null, -1);
  const _hoisted_3$3L = [
    _hoisted_2$3P
  ];
  function _sfc_render$3P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3L, 14, _hoisted_1$3P);
  }
  var _IconCheckSquare = /* @__PURE__ */ _export_sfc(_sfc_main$3P, [["render", _sfc_render$3P]]);
  const IconCheckSquare = Object.assign(_IconCheckSquare, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCheckSquare.name, _IconCheckSquare);
    }
  });
  const _sfc_main$3O = vue.defineComponent({
    name: "IconCheck",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-check`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3O = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3O = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41.678 11.05 19.05 33.678 6.322 20.95" }, null, -1);
  const _hoisted_3$3K = [
    _hoisted_2$3O
  ];
  function _sfc_render$3O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3K, 14, _hoisted_1$3O);
  }
  var _IconCheck = /* @__PURE__ */ _export_sfc(_sfc_main$3O, [["render", _sfc_render$3O]]);
  const IconCheck = Object.assign(_IconCheck, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCheck.name, _IconCheck);
    }
  });
  const _sfc_main$3N = vue.defineComponent({
    name: "IconClockCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-clock-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3N = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3N = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 14v10h9.5m8.5 0c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3J = [
    _hoisted_2$3N
  ];
  function _sfc_render$3N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3J, 14, _hoisted_1$3N);
  }
  var _IconClockCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3N, [["render", _sfc_render$3N]]);
  const IconClockCircle = Object.assign(_IconClockCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconClockCircle.name, _IconClockCircle);
    }
  });
  const _sfc_main$3M = vue.defineComponent({
    name: "IconCloseCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-close-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3M = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3M = /* @__PURE__ */ vue.createElementVNode("path", { d: "m17.643 17.643 6.364 6.364m0 0 6.364 6.364m-6.364-6.364 6.364-6.364m-6.364 6.364-6.364 6.364M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3I = [
    _hoisted_2$3M
  ];
  function _sfc_render$3M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3I, 14, _hoisted_1$3M);
  }
  var _IconCloseCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3M, [["render", _sfc_render$3M]]);
  const IconCloseCircle = Object.assign(_IconCloseCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCloseCircle.name, _IconCloseCircle);
    }
  });
  const _sfc_main$3L = vue.defineComponent({
    name: "IconClose",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-close`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3L = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3L = /* @__PURE__ */ vue.createElementVNode("path", { d: "M9.857 9.858 24 24m0 0 14.142 14.142M24 24 38.142 9.858M24 24 9.857 38.142" }, null, -1);
  const _hoisted_3$3H = [
    _hoisted_2$3L
  ];
  function _sfc_render$3L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3H, 14, _hoisted_1$3L);
  }
  var _IconClose = /* @__PURE__ */ _export_sfc(_sfc_main$3L, [["render", _sfc_render$3L]]);
  const IconClose = Object.assign(_IconClose, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconClose.name, _IconClose);
    }
  });
  const _sfc_main$3K = vue.defineComponent({
    name: "IconExclamationCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-exclamation-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3K = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3K = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 28V14m0 16v4M6 24c0-9.941 8.059-18 18-18s18 8.059 18 18-8.059 18-18 18S6 33.941 6 24Z" }, null, -1);
  const _hoisted_3$3G = [
    _hoisted_2$3K
  ];
  function _sfc_render$3K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3G, 14, _hoisted_1$3K);
  }
  var _IconExclamationCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3K, [["render", _sfc_render$3K]]);
  const IconExclamationCircle = Object.assign(_IconExclamationCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExclamationCircle.name, _IconExclamationCircle);
    }
  });
  const _sfc_main$3J = vue.defineComponent({
    name: "IconExclamation",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-exclamation`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3J = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3J = /* @__PURE__ */ vue.createElementVNode("path", { d: "M23 9h2v21h-2z" }, null, -1);
  const _hoisted_3$3F = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M23 9h2v21h-2z"
  }, null, -1);
  const _hoisted_4$10 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M23 37h2v2h-2z" }, null, -1);
  const _hoisted_5$i = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M23 37h2v2h-2z"
  }, null, -1);
  const _hoisted_6$4 = [
    _hoisted_2$3J,
    _hoisted_3$3F,
    _hoisted_4$10,
    _hoisted_5$i
  ];
  function _sfc_render$3J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6$4, 14, _hoisted_1$3J);
  }
  var _IconExclamation = /* @__PURE__ */ _export_sfc(_sfc_main$3J, [["render", _sfc_render$3J]]);
  const IconExclamation = Object.assign(_IconExclamation, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExclamation.name, _IconExclamation);
    }
  });
  const _sfc_main$3I = vue.defineComponent({
    name: "IconInfoCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-info-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3I = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3I = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 20v14m0-16v-4m18 10c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3E = [
    _hoisted_2$3I
  ];
  function _sfc_render$3I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3E, 14, _hoisted_1$3I);
  }
  var _IconInfoCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3I, [["render", _sfc_render$3I]]);
  const IconInfoCircle = Object.assign(_IconInfoCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconInfoCircle.name, _IconInfoCircle);
    }
  });
  const _sfc_main$3H = vue.defineComponent({
    name: "IconInfo",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-info`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3H = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3H = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 39h-2V18h2z" }, null, -1);
  const _hoisted_3$3D = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M25 39h-2V18h2z"
  }, null, -1);
  const _hoisted_4$$ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 11h-2V9h2z" }, null, -1);
  const _hoisted_5$h = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M25 11h-2V9h2z"
  }, null, -1);
  const _hoisted_6$3 = [
    _hoisted_2$3H,
    _hoisted_3$3D,
    _hoisted_4$$,
    _hoisted_5$h
  ];
  function _sfc_render$3H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6$3, 14, _hoisted_1$3H);
  }
  var _IconInfo = /* @__PURE__ */ _export_sfc(_sfc_main$3H, [["render", _sfc_render$3H]]);
  const IconInfo = Object.assign(_IconInfo, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconInfo.name, _IconInfo);
    }
  });
  const _sfc_main$3G = vue.defineComponent({
    name: "IconMinusCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-minus-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3G = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3G = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32 24H16m26 0c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3C = [
    _hoisted_2$3G
  ];
  function _sfc_render$3G(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3C, 14, _hoisted_1$3G);
  }
  var _IconMinusCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3G, [["render", _sfc_render$3G]]);
  const IconMinusCircle = Object.assign(_IconMinusCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMinusCircle.name, _IconMinusCircle);
    }
  });
  const _sfc_main$3F = vue.defineComponent({
    name: "IconMinus",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-minus`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3F = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3F = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 24h38" }, null, -1);
  const _hoisted_3$3B = [
    _hoisted_2$3F
  ];
  function _sfc_render$3F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3B, 14, _hoisted_1$3F);
  }
  var _IconMinus = /* @__PURE__ */ _export_sfc(_sfc_main$3F, [["render", _sfc_render$3F]]);
  const IconMinus = Object.assign(_IconMinus, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMinus.name, _IconMinus);
    }
  });
  const _sfc_main$3E = vue.defineComponent({
    name: "IconPlusCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-plus-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3E = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3E = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32 24h-8m-8 0h8m0 0v8m0-8v-8m18 8c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3A = [
    _hoisted_2$3E
  ];
  function _sfc_render$3E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3A, 14, _hoisted_1$3E);
  }
  var _IconPlusCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3E, [["render", _sfc_render$3E]]);
  const IconPlusCircle = Object.assign(_IconPlusCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlusCircle.name, _IconPlusCircle);
    }
  });
  const _sfc_main$3D = vue.defineComponent({
    name: "IconPlus",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-plus`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3D = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3D = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 24h38M24 5v38" }, null, -1);
  const _hoisted_3$3z = [
    _hoisted_2$3D
  ];
  function _sfc_render$3D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3z, 14, _hoisted_1$3D);
  }
  var _IconPlus = /* @__PURE__ */ _export_sfc(_sfc_main$3D, [["render", _sfc_render$3D]]);
  const IconPlus = Object.assign(_IconPlus, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlus.name, _IconPlus);
    }
  });
  const _sfc_main$3C = vue.defineComponent({
    name: "IconQuestionCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-question-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3C = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3C = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$3y = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24.006 31v4.008m0-6.008L24 28c0-3 3-4 4.78-6.402C30.558 19.195 28.288 15 23.987 15c-4.014 0-5.382 2.548-5.388 4.514v.465" }, null, -1);
  const _hoisted_4$_ = [
    _hoisted_2$3C,
    _hoisted_3$3y
  ];
  function _sfc_render$3C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$_, 14, _hoisted_1$3C);
  }
  var _IconQuestionCircle = /* @__PURE__ */ _export_sfc(_sfc_main$3C, [["render", _sfc_render$3C]]);
  const IconQuestionCircle = Object.assign(_IconQuestionCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQuestionCircle.name, _IconQuestionCircle);
    }
  });
  const _sfc_main$3B = vue.defineComponent({
    name: "IconQuestion",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-question`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3B = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3B = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 17c0-5.523 4.925-10 11-10s11 4.477 11 10c0 3.607-2.1 6.767-5.25 8.526C26.857 27.142 24 29.686 24 33v3m0 5h.02v.02H24V41Z" }, null, -1);
  const _hoisted_3$3x = [
    _hoisted_2$3B
  ];
  function _sfc_render$3B(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3x, 14, _hoisted_1$3B);
  }
  var _IconQuestion = /* @__PURE__ */ _export_sfc(_sfc_main$3B, [["render", _sfc_render$3B]]);
  const IconQuestion = Object.assign(_IconQuestion, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQuestion.name, _IconQuestion);
    }
  });
  const _sfc_main$3A = vue.defineComponent({
    name: "IconStop",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-stop`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3A = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3A = /* @__PURE__ */ vue.createElementVNode("path", { d: "M36.728 36.728c7.03-7.03 7.03-18.427 0-25.456-7.03-7.03-18.427-7.03-25.456 0m25.456 25.456c-7.03 7.03-18.427 7.03-25.456 0-7.03-7.03-7.03-18.427 0-25.456m25.456 25.456L11.272 11.272" }, null, -1);
  const _hoisted_3$3w = [
    _hoisted_2$3A
  ];
  function _sfc_render$3A(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3w, 14, _hoisted_1$3A);
  }
  var _IconStop = /* @__PURE__ */ _export_sfc(_sfc_main$3A, [["render", _sfc_render$3A]]);
  const IconStop = Object.assign(_IconStop, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconStop.name, _IconStop);
    }
  });
  const _sfc_main$3z = vue.defineComponent({
    name: "IconHeartFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-heart-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3z = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 10.541c4.35-4.522 11.405-4.814 15.756-.292 4.35 4.522 4.15 11.365.448 17.135C36.153 33.7 28 41.5 24 42c-4-.5-12.152-8.3-16.204-14.616-3.702-5.77-3.902-12.613.448-17.135C12.595 5.727 19.65 6.019 24 10.54Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3v = [
    _hoisted_2$3z
  ];
  function _sfc_render$3z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3v, 14, _hoisted_1$3z);
  }
  var _IconHeartFill = /* @__PURE__ */ _export_sfc(_sfc_main$3z, [["render", _sfc_render$3z]]);
  const IconHeartFill = Object.assign(_IconHeartFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconHeartFill.name, _IconHeartFill);
    }
  });
  const _sfc_main$3y = vue.defineComponent({
    name: "IconStarFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-star-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3y = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M22.683 5.415c.568-1.043 2.065-1.043 2.634 0l5.507 10.098a1.5 1.5 0 0 0 1.04.756l11.306 2.117c1.168.219 1.63 1.642.814 2.505l-7.902 8.359a1.5 1.5 0 0 0-.397 1.223l1.48 11.407c.153 1.177-1.058 2.057-2.131 1.548l-10.391-4.933a1.5 1.5 0 0 0-1.287 0l-10.39 4.933c-1.073.51-2.284-.37-2.131-1.548l1.48-11.407a1.5 1.5 0 0 0-.398-1.223L4.015 20.89c-.816-.863-.353-2.286.814-2.505l11.306-2.117a1.5 1.5 0 0 0 1.04-.756l5.508-10.098Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3u = [
    _hoisted_2$3y
  ];
  function _sfc_render$3y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3u, 14, _hoisted_1$3y);
  }
  var _IconStarFill = /* @__PURE__ */ _export_sfc(_sfc_main$3y, [["render", _sfc_render$3y]]);
  const IconStarFill = Object.assign(_IconStarFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconStarFill.name, _IconStarFill);
    }
  });
  const _sfc_main$3x = vue.defineComponent({
    name: "IconThumbDownFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-thumb-down-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3x = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3x = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M43 5v26h-4V5h4Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3t = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M20.9 43.537a2 2 0 0 0 2.83-.364L32.964 31H36V5H12.424a2 2 0 0 0-1.89 1.346L4.838 25.692C3.938 28.29 5.868 31 8.618 31h10.568l-2.421 5.448a4 4 0 0 0 1.184 4.77l2.951 2.32Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$Z = [
    _hoisted_2$3x,
    _hoisted_3$3t
  ];
  function _sfc_render$3x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$Z, 14, _hoisted_1$3x);
  }
  var _IconThumbDownFill = /* @__PURE__ */ _export_sfc(_sfc_main$3x, [["render", _sfc_render$3x]]);
  const IconThumbDownFill = Object.assign(_IconThumbDownFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconThumbDownFill.name, _IconThumbDownFill);
    }
  });
  const _sfc_main$3w = vue.defineComponent({
    name: "IconThumbUpFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-thumb-up-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3w = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3w = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M5 43V17h4v26H5Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$3s = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M27.1 4.463a2 2 0 0 0-2.83.364L15.036 17H12v26h23.576a2 2 0 0 0 1.89-1.346l5.697-19.346c.899-2.598-1.03-5.308-3.78-5.308h-10.57l2.422-5.448a4 4 0 0 0-1.184-4.77L27.1 4.462Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$Y = [
    _hoisted_2$3w,
    _hoisted_3$3s
  ];
  function _sfc_render$3w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$Y, 14, _hoisted_1$3w);
  }
  var _IconThumbUpFill = /* @__PURE__ */ _export_sfc(_sfc_main$3w, [["render", _sfc_render$3w]]);
  const IconThumbUpFill = Object.assign(_IconThumbUpFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconThumbUpFill.name, _IconThumbUpFill);
    }
  });
  const _sfc_main$3v = vue.defineComponent({
    name: "IconAt",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-at`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3v = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3v = /* @__PURE__ */ vue.createElementVNode("path", { d: "M31 23a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm0 0c0 3.038 2.462 6.5 5.5 6.5A5.5 5.5 0 0 0 42 24c0-9.941-8.059-18-18-18S6 14.059 6 24s8.059 18 18 18c4.244 0 8.145-1.469 11.222-3.925" }, null, -1);
  const _hoisted_3$3r = [
    _hoisted_2$3v
  ];
  function _sfc_render$3v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3r, 14, _hoisted_1$3v);
  }
  var _IconAt = /* @__PURE__ */ _export_sfc(_sfc_main$3v, [["render", _sfc_render$3v]]);
  const IconAt = Object.assign(_IconAt, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconAt.name, _IconAt);
    }
  });
  const _sfc_main$3u = vue.defineComponent({
    name: "IconCloudDownload",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-cloud-download`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3u = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3u = /* @__PURE__ */ vue.createElementVNode("path", { d: "M43 22c0-7.732-6.492-14-14.5-14S14 14.268 14 22v.055A9.001 9.001 0 0 0 15 40h13m16.142-5.929-7.07 7.071L30 34.072M37.07 26v15" }, null, -1);
  const _hoisted_3$3q = [
    _hoisted_2$3u
  ];
  function _sfc_render$3u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3q, 14, _hoisted_1$3u);
  }
  var _IconCloudDownload = /* @__PURE__ */ _export_sfc(_sfc_main$3u, [["render", _sfc_render$3u]]);
  const IconCloudDownload = Object.assign(_IconCloudDownload, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCloudDownload.name, _IconCloudDownload);
    }
  });
  const _sfc_main$3t = vue.defineComponent({
    name: "IconCodeBlock",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-code-block`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3t = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3t = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 6h-4a3 3 0 0 0-3 3v10c0 3-4.343 5-6 5 1.657 0 6 2 6 5v10a3 3 0 0 0 3 3h4M29 6h4a3 3 0 0 1 3 3v10c0 3 4.343 5 6 5-1.657 0-6 2-6 5v10a3 3 0 0 1-3 3h-4" }, null, -1);
  const _hoisted_3$3p = [
    _hoisted_2$3t
  ];
  function _sfc_render$3t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3p, 14, _hoisted_1$3t);
  }
  var _IconCodeBlock = /* @__PURE__ */ _export_sfc(_sfc_main$3t, [["render", _sfc_render$3t]]);
  const IconCodeBlock = Object.assign(_IconCodeBlock, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCodeBlock.name, _IconCodeBlock);
    }
  });
  const _sfc_main$3s = vue.defineComponent({
    name: "IconCodeSquare",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-code-square`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3s = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3s = /* @__PURE__ */ vue.createElementVNode("path", { d: "M23.071 17 16 24.071l7.071 7.071m9.001-14.624-4.14 15.454M9 42h30a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v34a1 1 0 0 0 1 1Z" }, null, -1);
  const _hoisted_3$3o = [
    _hoisted_2$3s
  ];
  function _sfc_render$3s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3o, 14, _hoisted_1$3s);
  }
  var _IconCodeSquare = /* @__PURE__ */ _export_sfc(_sfc_main$3s, [["render", _sfc_render$3s]]);
  const IconCodeSquare = Object.assign(_IconCodeSquare, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCodeSquare.name, _IconCodeSquare);
    }
  });
  const _sfc_main$3r = vue.defineComponent({
    name: "IconCode",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-code`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3r = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3r = /* @__PURE__ */ vue.createElementVNode("path", { d: "M16.734 12.686 5.42 24l11.314 11.314m14.521-22.628L42.57 24 31.255 35.314M27.2 6.28l-6.251 35.453" }, null, -1);
  const _hoisted_3$3n = [
    _hoisted_2$3r
  ];
  function _sfc_render$3r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3n, 14, _hoisted_1$3r);
  }
  var _IconCode = /* @__PURE__ */ _export_sfc(_sfc_main$3r, [["render", _sfc_render$3r]]);
  const IconCode = Object.assign(_IconCode, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCode.name, _IconCode);
    }
  });
  const _sfc_main$3q = vue.defineComponent({
    name: "IconCustomerService",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-customer-service`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3q = /* @__PURE__ */ vue.createElementVNode("path", { d: "M11 31V20c0-7.18 5.82-13 13-13s13 5.82 13 13v8c0 5.784-3.778 10.686-9 12.373m0 0A12.99 12.99 0 0 1 24 41h-3a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2.373Zm0 0V41m9-20h3a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1h-3v-8Zm-26 0H8a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h3v-8Z" }, null, -1);
  const _hoisted_3$3m = [
    _hoisted_2$3q
  ];
  function _sfc_render$3q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3m, 14, _hoisted_1$3q);
  }
  var _IconCustomerService = /* @__PURE__ */ _export_sfc(_sfc_main$3q, [["render", _sfc_render$3q]]);
  const IconCustomerService = Object.assign(_IconCustomerService, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCustomerService.name, _IconCustomerService);
    }
  });
  const _sfc_main$3p = vue.defineComponent({
    name: "IconDownload",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-download`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3p = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3p = /* @__PURE__ */ vue.createElementVNode("path", { d: "m33.072 22.071-9.07 9.071-9.072-9.07M24 5v26m16 4v6H8v-6" }, null, -1);
  const _hoisted_3$3l = [
    _hoisted_2$3p
  ];
  function _sfc_render$3p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3l, 14, _hoisted_1$3p);
  }
  var _IconDownload = /* @__PURE__ */ _export_sfc(_sfc_main$3p, [["render", _sfc_render$3p]]);
  const IconDownload = Object.assign(_IconDownload, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDownload.name, _IconDownload);
    }
  });
  const _sfc_main$3o = vue.defineComponent({
    name: "IconExport",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-export`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3o = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3o = /* @__PURE__ */ vue.createElementVNode("path", { d: "M31.928 33.072 41 24.002l-9.072-9.072M16.858 24h24M31 41H7V7h24" }, null, -1);
  const _hoisted_3$3k = [
    _hoisted_2$3o
  ];
  function _sfc_render$3o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3k, 14, _hoisted_1$3o);
  }
  var _IconExport = /* @__PURE__ */ _export_sfc(_sfc_main$3o, [["render", _sfc_render$3o]]);
  const IconExport = Object.assign(_IconExport, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExport.name, _IconExport);
    }
  });
  const _sfc_main$3n = vue.defineComponent({
    name: "IconEyeInvisible",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-eye-invisible`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3n = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3n = /* @__PURE__ */ vue.createElementVNode("path", { d: "M14 14.5c-2.69 2-5.415 5.33-8 9.5 5.373 8.667 11.373 13 18 13 3.325 0 6.491-1.09 9.5-3.271M17.463 12.5C19 11 21.75 11 24 11c6.627 0 12.627 4.333 18 13-1.766 2.848-3.599 5.228-5.5 7.14" }, null, -1);
  const _hoisted_3$3j = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29 24a5 5 0 1 1-10 0 5 5 0 0 1 10 0ZM6.852 7.103l34.294 34.294" }, null, -1);
  const _hoisted_4$X = [
    _hoisted_2$3n,
    _hoisted_3$3j
  ];
  function _sfc_render$3n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$X, 14, _hoisted_1$3n);
  }
  var _IconEyeInvisible = /* @__PURE__ */ _export_sfc(_sfc_main$3n, [["render", _sfc_render$3n]]);
  const IconEyeInvisible = Object.assign(_IconEyeInvisible, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEyeInvisible.name, _IconEyeInvisible);
    }
  });
  const _sfc_main$3m = vue.defineComponent({
    name: "IconEye",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-eye`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3m = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3m = /* @__PURE__ */ vue.createElementVNode("path", {
    "clip-rule": "evenodd",
    d: "M24 37c6.627 0 12.627-4.333 18-13-5.373-8.667-11.373-13-18-13-6.627 0-12.627 4.333-18 13 5.373 8.667 11.373 13 18 13Z"
  }, null, -1);
  const _hoisted_3$3i = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29 24a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z" }, null, -1);
  const _hoisted_4$W = [
    _hoisted_2$3m,
    _hoisted_3$3i
  ];
  function _sfc_render$3m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$W, 14, _hoisted_1$3m);
  }
  var _IconEye = /* @__PURE__ */ _export_sfc(_sfc_main$3m, [["render", _sfc_render$3m]]);
  const IconEye = Object.assign(_IconEye, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEye.name, _IconEye);
    }
  });
  const _sfc_main$3l = vue.defineComponent({
    name: "IconHeart",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-heart`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3l = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3l = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38.083 12.912a9.929 9.929 0 0 1 .177 13.878l-.177.18L25.76 39.273c-.972.97-2.548.97-3.52 0L9.917 26.971l-.177-.181a9.929 9.929 0 0 1 .177-13.878c3.889-3.883 10.194-3.883 14.083 0 3.889-3.883 10.194-3.883 14.083 0Z" }, null, -1);
  const _hoisted_3$3h = [
    _hoisted_2$3l
  ];
  function _sfc_render$3l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3h, 14, _hoisted_1$3l);
  }
  var _IconHeart = /* @__PURE__ */ _export_sfc(_sfc_main$3l, [["render", _sfc_render$3l]]);
  const IconHeart = Object.assign(_IconHeart, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconHeart.name, _IconHeart);
    }
  });
  const _sfc_main$3k = vue.defineComponent({
    name: "IconHistory",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-history`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3k = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3k = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 24c0-9.941 8.059-18 18-18s18 8.059 18 18-8.059 18-18 18c-6.26 0-11.775-3.197-15-8.047M6 24l-.5-.757h1L6 24Zm26 2h-9v-9" }, null, -1);
  const _hoisted_3$3g = [
    _hoisted_2$3k
  ];
  function _sfc_render$3k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3g, 14, _hoisted_1$3k);
  }
  var _IconHistory = /* @__PURE__ */ _export_sfc(_sfc_main$3k, [["render", _sfc_render$3k]]);
  const IconHistory = Object.assign(_IconHistory, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconHistory.name, _IconHistory);
    }
  });
  const _sfc_main$3j = vue.defineComponent({
    name: "IconHome",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-home`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3j = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3j = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 17 24 7l17 10v24H7V17Z" }, null, -1);
  const _hoisted_3$3f = /* @__PURE__ */ vue.createElementVNode("path", { d: "M20 28h8v13h-8V28Z" }, null, -1);
  const _hoisted_4$V = [
    _hoisted_2$3j,
    _hoisted_3$3f
  ];
  function _sfc_render$3j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$V, 14, _hoisted_1$3j);
  }
  var _IconHome = /* @__PURE__ */ _export_sfc(_sfc_main$3j, [["render", _sfc_render$3j]]);
  const IconHome = Object.assign(_IconHome, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconHome.name, _IconHome);
    }
  });
  const _sfc_main$3i = vue.defineComponent({
    name: "IconImport",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-import`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3i = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3i = /* @__PURE__ */ vue.createElementVNode("path", { d: "m27.929 33.072-9.071-9.07 9.07-9.072M43 24H19m12 17H7V7h24" }, null, -1);
  const _hoisted_3$3e = [
    _hoisted_2$3i
  ];
  function _sfc_render$3i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3e, 14, _hoisted_1$3i);
  }
  var _IconImport = /* @__PURE__ */ _export_sfc(_sfc_main$3i, [["render", _sfc_render$3i]]);
  const IconImport = Object.assign(_IconImport, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconImport.name, _IconImport);
    }
  });
  const _sfc_main$3h = vue.defineComponent({
    name: "IconLaunch",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-launch`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3h = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3h = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41 26v14a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h14M19.822 28.178 39.899 8.1M41 20V7H28" }, null, -1);
  const _hoisted_3$3d = [
    _hoisted_2$3h
  ];
  function _sfc_render$3h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3d, 14, _hoisted_1$3h);
  }
  var _IconLaunch = /* @__PURE__ */ _export_sfc(_sfc_main$3h, [["render", _sfc_render$3h]]);
  const IconLaunch = Object.assign(_IconLaunch, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLaunch.name, _IconLaunch);
    }
  });
  const _sfc_main$3g = vue.defineComponent({
    name: "IconList",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-list`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3g = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3g = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 24h30M5 12h4m4 24h30M13 12h30M5 24h4M5 36h4" }, null, -1);
  const _hoisted_3$3c = [
    _hoisted_2$3g
  ];
  function _sfc_render$3g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3c, 14, _hoisted_1$3g);
  }
  var _IconList = /* @__PURE__ */ _export_sfc(_sfc_main$3g, [["render", _sfc_render$3g]]);
  const IconList = Object.assign(_IconList, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconList.name, _IconList);
    }
  });
  const _sfc_main$3f = vue.defineComponent({
    name: "IconMessageBanned",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-message-banned`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3f = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3f = /* @__PURE__ */ vue.createElementVNode("path", { d: "M40.527 20C38.727 12.541 32.01 7 24 7 14.611 7 7 14.611 7 24v17h14m19.364-.636a9 9 0 0 0-12.728-12.728m12.728 12.728a9 9 0 0 1-12.728-12.728m12.728 12.728L27.636 27.636M13 20h12m-12 9h6" }, null, -1);
  const _hoisted_3$3b = [
    _hoisted_2$3f
  ];
  function _sfc_render$3f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3b, 14, _hoisted_1$3f);
  }
  var _IconMessageBanned = /* @__PURE__ */ _export_sfc(_sfc_main$3f, [["render", _sfc_render$3f]]);
  const IconMessageBanned = Object.assign(_IconMessageBanned, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMessageBanned.name, _IconMessageBanned);
    }
  });
  const _sfc_main$3e = vue.defineComponent({
    name: "IconMessage",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-message`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3e = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3e = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15 20h18m-18 9h9M7 41h17.63C33.67 41 41 33.67 41 24.63V24c0-9.389-7.611-17-17-17S7 14.611 7 24v17Z" }, null, -1);
  const _hoisted_3$3a = [
    _hoisted_2$3e
  ];
  function _sfc_render$3e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$3a, 14, _hoisted_1$3e);
  }
  var _IconMessage = /* @__PURE__ */ _export_sfc(_sfc_main$3e, [["render", _sfc_render$3e]]);
  const IconMessage = Object.assign(_IconMessage, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMessage.name, _IconMessage);
    }
  });
  const _sfc_main$3d = vue.defineComponent({
    name: "IconMoreVertical",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-more-vertical`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3d = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3d = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M25 10h-2V8h2v2ZM25 25h-2v-2h2v2ZM25 40h-2v-2h2v2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$39 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 10h-2V8h2v2ZM25 25h-2v-2h2v2ZM25 40h-2v-2h2v2Z" }, null, -1);
  const _hoisted_4$U = [
    _hoisted_2$3d,
    _hoisted_3$39
  ];
  function _sfc_render$3d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$U, 14, _hoisted_1$3d);
  }
  var _IconMoreVertical = /* @__PURE__ */ _export_sfc(_sfc_main$3d, [["render", _sfc_render$3d]]);
  const IconMoreVertical = Object.assign(_IconMoreVertical, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMoreVertical.name, _IconMoreVertical);
    }
  });
  const _sfc_main$3c = vue.defineComponent({
    name: "IconMore",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-more`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3c = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3c = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M38 25v-2h2v2h-2ZM23 25v-2h2v2h-2ZM8 25v-2h2v2H8Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$38 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38 25v-2h2v2h-2ZM23 25v-2h2v2h-2ZM8 25v-2h2v2H8Z" }, null, -1);
  const _hoisted_4$T = [
    _hoisted_2$3c,
    _hoisted_3$38
  ];
  function _sfc_render$3c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$T, 14, _hoisted_1$3c);
  }
  var _IconMore = /* @__PURE__ */ _export_sfc(_sfc_main$3c, [["render", _sfc_render$3c]]);
  const IconMore = Object.assign(_IconMore, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMore.name, _IconMore);
    }
  });
  const _sfc_main$3b = vue.defineComponent({
    name: "IconPoweroff",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-poweroff`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3b = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3b = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15.5 9.274C10.419 12.214 7 17.708 7 24c0 9.389 7.611 17 17 17s17-7.611 17-17c0-6.292-3.419-11.786-8.5-14.726M24 5v22" }, null, -1);
  const _hoisted_3$37 = [
    _hoisted_2$3b
  ];
  function _sfc_render$3b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$37, 14, _hoisted_1$3b);
  }
  var _IconPoweroff = /* @__PURE__ */ _export_sfc(_sfc_main$3b, [["render", _sfc_render$3b]]);
  const IconPoweroff = Object.assign(_IconPoweroff, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPoweroff.name, _IconPoweroff);
    }
  });
  const _sfc_main$3a = vue.defineComponent({
    name: "IconRefresh",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-refresh`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3a = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3a = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38.837 18C36.463 12.136 30.715 8 24 8 15.163 8 8 15.163 8 24s7.163 16 16 16c7.455 0 13.72-5.1 15.496-12M40 8v10H30" }, null, -1);
  const _hoisted_3$36 = [
    _hoisted_2$3a
  ];
  function _sfc_render$3a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$36, 14, _hoisted_1$3a);
  }
  var _IconRefresh = /* @__PURE__ */ _export_sfc(_sfc_main$3a, [["render", _sfc_render$3a]]);
  const IconRefresh = Object.assign(_IconRefresh, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRefresh.name, _IconRefresh);
    }
  });
  const _sfc_main$39 = vue.defineComponent({
    name: "IconReply",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-reply`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$39 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$39 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m6.642 24.684 14.012 14.947a.2.2 0 0 0 .346-.137v-8.949A23.077 23.077 0 0 1 26 30c6.208 0 11.84 2.459 15.978 6.456a.01.01 0 0 0 .017-.007C42 36.299 42 36.15 42 36c0-10.493-8.506-19-19-19-.675 0-1.342.035-2 .104V8.506a.2.2 0 0 0-.346-.137L6.642 23.316a1 1 0 0 0 0 1.368Z" }, null, -1);
  const _hoisted_3$35 = [
    _hoisted_2$39
  ];
  function _sfc_render$39(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$35, 14, _hoisted_1$39);
  }
  var _IconReply = /* @__PURE__ */ _export_sfc(_sfc_main$39, [["render", _sfc_render$39]]);
  const IconReply = Object.assign(_IconReply, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconReply.name, _IconReply);
    }
  });
  const _sfc_main$38 = vue.defineComponent({
    name: "IconSave",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-save`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$38 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$38 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M21 13v9m18 20H9a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h22.55a1 1 0 0 1 .748.336l7.45 8.38a1 1 0 0 1 .252.664V41a1 1 0 0 1-1 1ZM14 6h14v15a1 1 0 0 1-1 1H15a1 1 0 0 1-1-1V6Z" }, null, -1);
  const _hoisted_3$34 = [
    _hoisted_2$38
  ];
  function _sfc_render$38(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$34, 14, _hoisted_1$38);
  }
  var _IconSave = /* @__PURE__ */ _export_sfc(_sfc_main$38, [["render", _sfc_render$38]]);
  const IconSave = Object.assign(_IconSave, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSave.name, _IconSave);
    }
  });
  const _sfc_main$37 = vue.defineComponent({
    name: "IconScan",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-scan`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$37 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$37 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 17V7h10m24 10V7H31m10 24v10H31M7 31v10h10M5 24h38" }, null, -1);
  const _hoisted_3$33 = [
    _hoisted_2$37
  ];
  function _sfc_render$37(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$33, 14, _hoisted_1$37);
  }
  var _IconScan = /* @__PURE__ */ _export_sfc(_sfc_main$37, [["render", _sfc_render$37]]);
  const IconScan = Object.assign(_IconScan, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconScan.name, _IconScan);
    }
  });
  const _sfc_main$36 = vue.defineComponent({
    name: "IconSearch",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-search`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$36 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$36 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M33.072 33.071c6.248-6.248 6.248-16.379 0-22.627-6.249-6.249-16.38-6.249-22.628 0-6.248 6.248-6.248 16.379 0 22.627 6.248 6.248 16.38 6.248 22.628 0Zm0 0 8.485 8.485" }, null, -1);
  const _hoisted_3$32 = [
    _hoisted_2$36
  ];
  function _sfc_render$36(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$32, 14, _hoisted_1$36);
  }
  var _IconSearch = /* @__PURE__ */ _export_sfc(_sfc_main$36, [["render", _sfc_render$36]]);
  const IconSearch = Object.assign(_IconSearch, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSearch.name, _IconSearch);
    }
  });
  const _sfc_main$35 = vue.defineComponent({
    name: "IconSelectAll",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-select-all`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$35 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$35 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m17.314 7.243-7.071 7.07L6 10.072m11.314 10.172-7.071 7.07L6 23.072m11.314 10.172-7.071 7.07L6 36.072M21 11h22M21 25h22M21 39h22" }, null, -1);
  const _hoisted_3$31 = [
    _hoisted_2$35
  ];
  function _sfc_render$35(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$31, 14, _hoisted_1$35);
  }
  var _IconSelectAll = /* @__PURE__ */ _export_sfc(_sfc_main$35, [["render", _sfc_render$35]]);
  const IconSelectAll = Object.assign(_IconSelectAll, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSelectAll.name, _IconSelectAll);
    }
  });
  const _sfc_main$34 = vue.defineComponent({
    name: "IconSend",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-send`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$34 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$34 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m14 24-7-5V7l34 17L7 41V29l7-5Zm0 0h25",
    "stroke-miterlimit": "3.864"
  }, null, -1);
  const _hoisted_3$30 = [
    _hoisted_2$34
  ];
  function _sfc_render$34(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$30, 14, _hoisted_1$34);
  }
  var _IconSend = /* @__PURE__ */ _export_sfc(_sfc_main$34, [["render", _sfc_render$34]]);
  const IconSend = Object.assign(_IconSend, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSend.name, _IconSend);
    }
  });
  const _sfc_main$33 = vue.defineComponent({
    name: "IconSettings",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-settings`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$33 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$33 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M18.797 6.732A1 1 0 0 1 19.76 6h8.48a1 1 0 0 1 .964.732l1.285 4.628a1 1 0 0 0 1.213.7l4.651-1.2a1 1 0 0 1 1.116.468l4.24 7.344a1 1 0 0 1-.153 1.2L38.193 23.3a1 1 0 0 0 0 1.402l3.364 3.427a1 1 0 0 1 .153 1.2l-4.24 7.344a1 1 0 0 1-1.116.468l-4.65-1.2a1 1 0 0 0-1.214.7l-1.285 4.628a1 1 0 0 1-.964.732h-8.48a1 1 0 0 1-.963-.732L17.51 36.64a1 1 0 0 0-1.213-.7l-4.65 1.2a1 1 0 0 1-1.116-.468l-4.24-7.344a1 1 0 0 1 .153-1.2L9.809 24.7a1 1 0 0 0 0-1.402l-3.364-3.427a1 1 0 0 1-.153-1.2l4.24-7.344a1 1 0 0 1 1.116-.468l4.65 1.2a1 1 0 0 0 1.213-.7l1.286-4.628Z" }, null, -1);
  const _hoisted_3$2$ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M30 24a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z" }, null, -1);
  const _hoisted_4$S = [
    _hoisted_2$33,
    _hoisted_3$2$
  ];
  function _sfc_render$33(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$S, 14, _hoisted_1$33);
  }
  var _IconSettings = /* @__PURE__ */ _export_sfc(_sfc_main$33, [["render", _sfc_render$33]]);
  const IconSettings = Object.assign(_IconSettings, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSettings.name, _IconSettings);
    }
  });
  const _sfc_main$32 = vue.defineComponent({
    name: "IconShareAlt",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-share-alt`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$32 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$32 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32.442 21.552a4.5 4.5 0 1 1 .065 4.025m-.065-4.025-16.884-8.104m16.884 8.104A4.483 4.483 0 0 0 32 23.5c0 .75.183 1.455.507 2.077m-16.95-12.13a4.5 4.5 0 1 1-8.113-3.895 4.5 4.5 0 0 1 8.114 3.896Zm-.064 20.977A4.5 4.5 0 1 0 11.5 41c3.334-.001 5.503-3.68 3.993-6.578Zm0 0 17.014-8.847" }, null, -1);
  const _hoisted_3$2_ = [
    _hoisted_2$32
  ];
  function _sfc_render$32(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2_, 14, _hoisted_1$32);
  }
  var _IconShareAlt = /* @__PURE__ */ _export_sfc(_sfc_main$32, [["render", _sfc_render$32]]);
  const IconShareAlt = Object.assign(_IconShareAlt, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconShareAlt.name, _IconShareAlt);
    }
  });
  const _sfc_main$31 = vue.defineComponent({
    name: "IconShareExternal",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-share-external`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$31 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$31 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M18 20h-7a1 1 0 0 0-1 1v20a1 1 0 0 0 1 1h26a1 1 0 0 0 1-1V21a1 1 0 0 0-1-1h-7m2.368-5.636L24.004 6l-8.364 8.364M24.003 28V6.604",
    "stroke-miterlimit": "16"
  }, null, -1);
  const _hoisted_3$2Z = [
    _hoisted_2$31
  ];
  function _sfc_render$31(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2Z, 14, _hoisted_1$31);
  }
  var _IconShareExternal = /* @__PURE__ */ _export_sfc(_sfc_main$31, [["render", _sfc_render$31]]);
  const IconShareExternal = Object.assign(_IconShareExternal, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconShareExternal.name, _IconShareExternal);
    }
  });
  const _sfc_main$30 = vue.defineComponent({
    name: "IconShareInternal",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-share-internal`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$30 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$30 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M40 35v6H8v-6m1.108-4c1.29-8.868 13.917-15.85 29.392-15.998M30 6l9 9-9 9" }, null, -1);
  const _hoisted_3$2Y = [
    _hoisted_2$30
  ];
  function _sfc_render$30(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2Y, 14, _hoisted_1$30);
  }
  var _IconShareInternal = /* @__PURE__ */ _export_sfc(_sfc_main$30, [["render", _sfc_render$30]]);
  const IconShareInternal = Object.assign(_IconShareInternal, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconShareInternal.name, _IconShareInternal);
    }
  });
  const _sfc_main$2$ = vue.defineComponent({
    name: "IconStar",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-star`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2$ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2$ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M22.552 6.908a.5.5 0 0 1 .896 0l5.02 10.17a.5.5 0 0 0 .376.274l11.224 1.631a.5.5 0 0 1 .277.853l-8.122 7.916a.5.5 0 0 0-.143.443l1.917 11.178a.5.5 0 0 1-.726.527l-10.038-5.278a.5.5 0 0 0-.466 0L12.73 39.9a.5.5 0 0 1-.726-.527l1.918-11.178a.5.5 0 0 0-.144-.443l-8.122-7.916a.5.5 0 0 1 .278-.853l11.223-1.63a.5.5 0 0 0 .376-.274l5.02-10.17Z" }, null, -1);
  const _hoisted_3$2X = [
    _hoisted_2$2$
  ];
  function _sfc_render$2$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2X, 14, _hoisted_1$2$);
  }
  var _IconStar = /* @__PURE__ */ _export_sfc(_sfc_main$2$, [["render", _sfc_render$2$]]);
  const IconStar = Object.assign(_IconStar, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconStar.name, _IconStar);
    }
  });
  const _sfc_main$2_ = vue.defineComponent({
    name: "IconSync",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sync`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2_ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2_ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M11.98 11.703c-6.64 6.64-6.64 17.403 0 24.042a16.922 16.922 0 0 0 8.942 4.7M34.603 37.156l1.414-1.415c6.64-6.639 6.64-17.402 0-24.041A16.922 16.922 0 0 0 27.075 7M14.81 11.982l-1.414-1.414-1.414-1.414h2.829v2.828ZM33.192 36.02l1.414 1.414 1.414 1.415h-2.828V36.02Z" }, null, -1);
  const _hoisted_3$2W = [
    _hoisted_2$2_
  ];
  function _sfc_render$2_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2W, 14, _hoisted_1$2_);
  }
  var _IconSync = /* @__PURE__ */ _export_sfc(_sfc_main$2_, [["render", _sfc_render$2_]]);
  const IconSync = Object.assign(_IconSync, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSync.name, _IconSync);
    }
  });
  const _sfc_main$2Z = vue.defineComponent({
    name: "IconThumbDown",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-thumb-down`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2Z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2Z = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41 31V5M5.83 26.394l5.949-18.697A1 1 0 0 1 12.732 7H34v22h-3l-9.403 12.223a1 1 0 0 1-1.386.196l-2.536-1.87a6 6 0 0 1-2.043-6.974L17 29H7.736a2 2 0 0 1-1.906-2.606Z" }, null, -1);
  const _hoisted_3$2V = [
    _hoisted_2$2Z
  ];
  function _sfc_render$2Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2V, 14, _hoisted_1$2Z);
  }
  var _IconThumbDown = /* @__PURE__ */ _export_sfc(_sfc_main$2Z, [["render", _sfc_render$2Z]]);
  const IconThumbDown = Object.assign(_IconThumbDown, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconThumbDown.name, _IconThumbDown);
    }
  });
  const _sfc_main$2Y = vue.defineComponent({
    name: "IconThumbUp",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-thumb-up`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2Y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2Y = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 17v26m35.17-21.394-5.948 18.697a1 1 0 0 1-.953.697H14V19h3l9.403-12.223a1 1 0 0 1 1.386-.196l2.535 1.87a6 6 0 0 1 2.044 6.974L31 19h9.265a2 2 0 0 1 1.906 2.606Z" }, null, -1);
  const _hoisted_3$2U = [
    _hoisted_2$2Y
  ];
  function _sfc_render$2Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2U, 14, _hoisted_1$2Y);
  }
  var _IconThumbUp = /* @__PURE__ */ _export_sfc(_sfc_main$2Y, [["render", _sfc_render$2Y]]);
  const IconThumbUp = Object.assign(_IconThumbUp, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconThumbUp.name, _IconThumbUp);
    }
  });
  const _sfc_main$2X = vue.defineComponent({
    name: "IconTranslate",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-translate`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2X = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2X = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 25c0 9.941-8.059 18-18 18-6.867 0-12.836-3.845-15.87-9.5M28.374 27 25 18h-2l-3.375 9m8.75 0L31 34m-2.625-7h-8.75m0 0L17 34M6 25c0-9.941 8.059-18 18-18 6.867 0 12.836 3.845 15.87 9.5M43 25h-2l1-1 1 1ZM5 25h2l-1 1-1-1Z" }, null, -1);
  const _hoisted_3$2T = [
    _hoisted_2$2X
  ];
  function _sfc_render$2X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2T, 14, _hoisted_1$2X);
  }
  var _IconTranslate = /* @__PURE__ */ _export_sfc(_sfc_main$2X, [["render", _sfc_render$2X]]);
  const IconTranslate = Object.assign(_IconTranslate, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTranslate.name, _IconTranslate);
    }
  });
  const _sfc_main$2W = vue.defineComponent({
    name: "IconUpload",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-upload`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2W = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2W = /* @__PURE__ */ vue.createElementVNode("path", { d: "M14.93 17.071 24.001 8l9.071 9.071m-9.07 16.071v-25M40 35v6H8v-6" }, null, -1);
  const _hoisted_3$2S = [
    _hoisted_2$2W
  ];
  function _sfc_render$2W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2S, 14, _hoisted_1$2W);
  }
  var _IconUpload = /* @__PURE__ */ _export_sfc(_sfc_main$2W, [["render", _sfc_render$2W]]);
  const IconUpload = Object.assign(_IconUpload, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUpload.name, _IconUpload);
    }
  });
  const _sfc_main$2V = vue.defineComponent({
    name: "IconVoice",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-voice`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2V = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2V = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41 21v1c0 8.837-7.163 16-16 16h-2c-8.837 0-16-7.163-16-16v-1m17 17v6m0-14a9 9 0 0 1-9-9v-6a9 9 0 1 1 18 0v6a9 9 0 0 1-9 9Z" }, null, -1);
  const _hoisted_3$2R = [
    _hoisted_2$2V
  ];
  function _sfc_render$2V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2R, 14, _hoisted_1$2V);
  }
  var _IconVoice = /* @__PURE__ */ _export_sfc(_sfc_main$2V, [["render", _sfc_render$2V]]);
  const IconVoice = Object.assign(_IconVoice, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconVoice.name, _IconVoice);
    }
  });
  const _sfc_main$2U = vue.defineComponent({
    name: "IconAlignCenter",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-align-center`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2U = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2U = /* @__PURE__ */ vue.createElementVNode("path", { d: "M44 9H4m38 20H6m28-10H14m20 20H14" }, null, -1);
  const _hoisted_3$2Q = [
    _hoisted_2$2U
  ];
  function _sfc_render$2U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2Q, 14, _hoisted_1$2U);
  }
  var _IconAlignCenter = /* @__PURE__ */ _export_sfc(_sfc_main$2U, [["render", _sfc_render$2U]]);
  const IconAlignCenter = Object.assign(_IconAlignCenter, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconAlignCenter.name, _IconAlignCenter);
    }
  });
  const _sfc_main$2T = vue.defineComponent({
    name: "IconAlignLeft",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-align-left`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2T = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2T = /* @__PURE__ */ vue.createElementVNode("path", { d: "M44 9H4m36 20H4m21-10H4m21 20H4" }, null, -1);
  const _hoisted_3$2P = [
    _hoisted_2$2T
  ];
  function _sfc_render$2T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2P, 14, _hoisted_1$2T);
  }
  var _IconAlignLeft = /* @__PURE__ */ _export_sfc(_sfc_main$2T, [["render", _sfc_render$2T]]);
  const IconAlignLeft = Object.assign(_IconAlignLeft, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconAlignLeft.name, _IconAlignLeft);
    }
  });
  const _sfc_main$2S = vue.defineComponent({
    name: "IconAlignRight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-align-right`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2S = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2S = /* @__PURE__ */ vue.createElementVNode("path", { d: "M4 9h40M8 29h36M23 19h21M23 39h21" }, null, -1);
  const _hoisted_3$2O = [
    _hoisted_2$2S
  ];
  function _sfc_render$2S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2O, 14, _hoisted_1$2S);
  }
  var _IconAlignRight = /* @__PURE__ */ _export_sfc(_sfc_main$2S, [["render", _sfc_render$2S]]);
  const IconAlignRight = Object.assign(_IconAlignRight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconAlignRight.name, _IconAlignRight);
    }
  });
  const _sfc_main$2R = vue.defineComponent({
    name: "IconAttachment",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-attachment`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2R = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2R = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29.037 15.236s-9.174 9.267-11.48 11.594c-2.305 2.327-1.646 4.987-.329 6.316 1.317 1.33 3.994 1.953 6.258-.332L37.32 18.851c3.623-3.657 2.092-8.492 0-10.639-2.093-2.147-6.916-3.657-10.54 0L11.3 23.838c-3.623 3.657-3.953 10.638.329 14.96 4.282 4.322 11.115 4.105 14.821.333 3.706-3.773 8.74-8.822 11.224-11.33" }, null, -1);
  const _hoisted_3$2N = [
    _hoisted_2$2R
  ];
  function _sfc_render$2R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2N, 14, _hoisted_1$2R);
  }
  var _IconAttachment = /* @__PURE__ */ _export_sfc(_sfc_main$2R, [["render", _sfc_render$2R]]);
  const IconAttachment = Object.assign(_IconAttachment, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconAttachment.name, _IconAttachment);
    }
  });
  const _sfc_main$2Q = vue.defineComponent({
    name: "IconBgColors",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bg-colors`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2Q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2Q = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m9.442 25.25 10.351 10.765a1 1 0 0 0 1.428.014L32 25.25H9.442Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$2M = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 5.25 22.75 9m0 0 12.043 12.043a1 1 0 0 1 0 1.414L32 25.25M22.75 9 8.693 23.057a1 1 0 0 0-.013 1.4l.762.793m0 0 10.351 10.765a1 1 0 0 0 1.428.014L32 25.25m-22.558 0H32M6 42h36" }, null, -1);
  const _hoisted_4$R = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M40.013 29.812 37.201 27l-2.812 2.812a4 4 0 1 0 5.624 0Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_5$g = [
    _hoisted_2$2Q,
    _hoisted_3$2M,
    _hoisted_4$R
  ];
  function _sfc_render$2Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$g, 14, _hoisted_1$2Q);
  }
  var _IconBgColors = /* @__PURE__ */ _export_sfc(_sfc_main$2Q, [["render", _sfc_render$2Q]]);
  const IconBgColors = Object.assign(_IconBgColors, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBgColors.name, _IconBgColors);
    }
  });
  const _sfc_main$2P = vue.defineComponent({
    name: "IconBold",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bold`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2P = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2P = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 24h12a8 8 0 1 0 0-16H13.2a.2.2 0 0 0-.2.2V24Zm0 0h16a8 8 0 1 1 0 16H13.2a.2.2 0 0 1-.2-.2V24Z" }, null, -1);
  const _hoisted_3$2L = [
    _hoisted_2$2P
  ];
  function _sfc_render$2P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2L, 14, _hoisted_1$2P);
  }
  var _IconBold = /* @__PURE__ */ _export_sfc(_sfc_main$2P, [["render", _sfc_render$2P]]);
  const IconBold = Object.assign(_IconBold, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBold.name, _IconBold);
    }
  });
  const _sfc_main$2O = vue.defineComponent({
    name: "IconBrush",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-brush`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2O = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2O = /* @__PURE__ */ vue.createElementVNode("path", { d: "M33 13h7a1 1 0 0 1 1 1v12.14a1 1 0 0 1-.85.99l-21.3 3.24a1 1 0 0 0-.85.99V43M33 8v10.002A.998.998 0 0 1 32 19H8a1 1 0 0 1-1-1V8c0-.552.444-1 .997-1H32.01c.552 0 .99.447.99 1Z" }, null, -1);
  const _hoisted_3$2K = [
    _hoisted_2$2O
  ];
  function _sfc_render$2O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2K, 14, _hoisted_1$2O);
  }
  var _IconBrush = /* @__PURE__ */ _export_sfc(_sfc_main$2O, [["render", _sfc_render$2O]]);
  const IconBrush = Object.assign(_IconBrush, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBrush.name, _IconBrush);
    }
  });
  const _sfc_main$2N = vue.defineComponent({
    name: "IconCopy",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-copy`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2N = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2N = /* @__PURE__ */ vue.createElementVNode("path", { d: "M20 6h18a2 2 0 0 1 2 2v22M8 16v24c0 1.105.891 2 1.996 2h20.007A1.99 1.99 0 0 0 32 40.008V15.997A1.997 1.997 0 0 0 30 14H10a2 2 0 0 0-2 2Z" }, null, -1);
  const _hoisted_3$2J = [
    _hoisted_2$2N
  ];
  function _sfc_render$2N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2J, 14, _hoisted_1$2N);
  }
  var _IconCopy = /* @__PURE__ */ _export_sfc(_sfc_main$2N, [["render", _sfc_render$2N]]);
  const IconCopy = Object.assign(_IconCopy, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCopy.name, _IconCopy);
    }
  });
  const _sfc_main$2M = vue.defineComponent({
    name: "IconDelete",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-delete`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2M = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2M = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 11h5.5m0 0v29a1 1 0 0 0 1 1h25a1 1 0 0 0 1-1V11m-27 0H16m21.5 0H43m-5.5 0H32m-16 0V7h16v4m-16 0h16M20 18v15m8-15v15" }, null, -1);
  const _hoisted_3$2I = [
    _hoisted_2$2M
  ];
  function _sfc_render$2M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2I, 14, _hoisted_1$2M);
  }
  var _IconDelete = /* @__PURE__ */ _export_sfc(_sfc_main$2M, [["render", _sfc_render$2M]]);
  const IconDelete = Object.assign(_IconDelete, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDelete.name, _IconDelete);
    }
  });
  const _sfc_main$2L = vue.defineComponent({
    name: "IconEdit",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-edit`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2L = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2L = /* @__PURE__ */ vue.createElementVNode("path", { d: "m30.48 19.038 5.733-5.734a1 1 0 0 0 0-1.414l-5.586-5.586a1 1 0 0 0-1.414 0l-5.734 5.734m7 7L15.763 33.754a1 1 0 0 1-.59.286l-6.048.708a1 1 0 0 1-1.113-1.069l.477-6.31a1 1 0 0 1 .29-.631l14.7-14.7m7 7-7-7M6 42h36" }, null, -1);
  const _hoisted_3$2H = [
    _hoisted_2$2L
  ];
  function _sfc_render$2L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2H, 14, _hoisted_1$2L);
  }
  var _IconEdit = /* @__PURE__ */ _export_sfc(_sfc_main$2L, [["render", _sfc_render$2L]]);
  const IconEdit = Object.assign(_IconEdit, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEdit.name, _IconEdit);
    }
  });
  const _sfc_main$2K = vue.defineComponent({
    name: "IconEraser",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-eraser`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2K = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2K = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25.5 40.503 14.914 40.5a1 1 0 0 1-.707-.293l-9-9a1 1 0 0 1 0-1.414L13.5 21.5m12 19.003L44 40.5m-18.5.003L29 37M13.5 21.5 26.793 8.207a1 1 0 0 1 1.414 0l14.086 14.086a1 1 0 0 1 0 1.414L29 37M13.5 21.5 29 37" }, null, -1);
  const _hoisted_3$2G = [
    _hoisted_2$2K
  ];
  function _sfc_render$2K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2G, 14, _hoisted_1$2K);
  }
  var _IconEraser = /* @__PURE__ */ _export_sfc(_sfc_main$2K, [["render", _sfc_render$2K]]);
  const IconEraser = Object.assign(_IconEraser, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEraser.name, _IconEraser);
    }
  });
  const _sfc_main$2J = vue.defineComponent({
    name: "IconFilter",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-filter`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2J = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2J = /* @__PURE__ */ vue.createElementVNode("path", { d: "M30 42V22.549a1 1 0 0 1 .463-.844l10.074-6.41A1 1 0 0 0 41 14.45V8a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v6.451a1 1 0 0 0 .463.844l10.074 6.41a1 1 0 0 1 .463.844V37" }, null, -1);
  const _hoisted_3$2F = [
    _hoisted_2$2J
  ];
  function _sfc_render$2J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2F, 14, _hoisted_1$2J);
  }
  var _IconFilter = /* @__PURE__ */ _export_sfc(_sfc_main$2J, [["render", _sfc_render$2J]]);
  const IconFilter = Object.assign(_IconFilter, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFilter.name, _IconFilter);
    }
  });
  const _sfc_main$2I = vue.defineComponent({
    name: "IconFindReplace",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-find-replace`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2I = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2I = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42.353 40.854 36.01 34.51m0 0a9 9 0 0 1-15.364-6.364c0-5 4-9 9-9s9 4 9 9a8.972 8.972 0 0 1-2.636 6.364Zm5.636-26.365h-36m10 16h-10m10 16h-10" }, null, -1);
  const _hoisted_3$2E = [
    _hoisted_2$2I
  ];
  function _sfc_render$2I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2E, 14, _hoisted_1$2I);
  }
  var _IconFindReplace = /* @__PURE__ */ _export_sfc(_sfc_main$2I, [["render", _sfc_render$2I]]);
  const IconFindReplace = Object.assign(_IconFindReplace, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFindReplace.name, _IconFindReplace);
    }
  });
  const _sfc_main$2H = vue.defineComponent({
    name: "IconFontColors",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-font-colors`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2H = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2H = /* @__PURE__ */ vue.createElementVNode("path", { d: "M9 41h30M16.467 22 11.5 34m20.032-12L24.998 7h-2l-6.532 15h15.065Zm0 0H16.467h15.065Zm0 0L36.5 34l-4.968-12Z" }, null, -1);
  const _hoisted_3$2D = [
    _hoisted_2$2H
  ];
  function _sfc_render$2H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2D, 14, _hoisted_1$2H);
  }
  var _IconFontColors = /* @__PURE__ */ _export_sfc(_sfc_main$2H, [["render", _sfc_render$2H]]);
  const IconFontColors = Object.assign(_IconFontColors, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFontColors.name, _IconFontColors);
    }
  });
  const _sfc_main$2G = vue.defineComponent({
    name: "IconFormula",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-formula`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2G = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2G = /* @__PURE__ */ vue.createElementVNode("path", { d: "M40 8H10a1 1 0 0 0-1 1v.546a1 1 0 0 0 .341.753L24.17 23.273a1 1 0 0 1 .026 1.482l-.195.183L9.343 37.7a1 1 0 0 0-.343.754V39a1 1 0 0 0 1 1h30" }, null, -1);
  const _hoisted_3$2C = [
    _hoisted_2$2G
  ];
  function _sfc_render$2G(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2C, 14, _hoisted_1$2G);
  }
  var _IconFormula = /* @__PURE__ */ _export_sfc(_sfc_main$2G, [["render", _sfc_render$2G]]);
  const IconFormula = Object.assign(_IconFormula, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFormula.name, _IconFormula);
    }
  });
  const _sfc_main$2F = vue.defineComponent({
    name: "IconH1",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h1`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2F = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2F = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M40 42V21h-1l-6 3" }, null, -1);
  const _hoisted_3$2B = [
    _hoisted_2$2F
  ];
  function _sfc_render$2F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2B, 14, _hoisted_1$2F);
  }
  var _IconH1 = /* @__PURE__ */ _export_sfc(_sfc_main$2F, [["render", _sfc_render$2F]]);
  const IconH1 = Object.assign(_IconH1, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH1.name, _IconH1);
    }
  });
  const _sfc_main$2E = vue.defineComponent({
    name: "IconH2",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h2`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2E = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2E = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M44 40H32v-.5l7.5-9c.914-1.117 2.5-3 2.5-5 0-2.485-2.239-4.5-5-4.5s-5 2.515-5 5" }, null, -1);
  const _hoisted_3$2A = [
    _hoisted_2$2E
  ];
  function _sfc_render$2E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2A, 14, _hoisted_1$2E);
  }
  var _IconH2 = /* @__PURE__ */ _export_sfc(_sfc_main$2E, [["render", _sfc_render$2E]]);
  const IconH2 = Object.assign(_IconH2, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH2.name, _IconH2);
    }
  });
  const _sfc_main$2D = vue.defineComponent({
    name: "IconH3",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h3`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2D = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2D = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M37.001 30h-2m2 0a5 5 0 0 0 0-10h-.556a4.444 4.444 0 0 0-4.444 4.444m5 5.556a5 5 0 0 1 0 10h-.556a4.444 4.444 0 0 1-4.444-4.444" }, null, -1);
  const _hoisted_3$2z = [
    _hoisted_2$2D
  ];
  function _sfc_render$2D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2z, 14, _hoisted_1$2D);
  }
  var _IconH3 = /* @__PURE__ */ _export_sfc(_sfc_main$2D, [["render", _sfc_render$2D]]);
  const IconH3 = Object.assign(_IconH3, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH3.name, _IconH3);
    }
  });
  const _sfc_main$2C = vue.defineComponent({
    name: "IconH4",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h4`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2C = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2C = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18m14.5-6H31v-1l8-15h1.5v16Zm0 0H44m-3.5 0v6" }, null, -1);
  const _hoisted_3$2y = [
    _hoisted_2$2C
  ];
  function _sfc_render$2C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2y, 14, _hoisted_1$2C);
  }
  var _IconH4 = /* @__PURE__ */ _export_sfc(_sfc_main$2C, [["render", _sfc_render$2C]]);
  const IconH4 = Object.assign(_IconH4, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH4.name, _IconH4);
    }
  });
  const _sfc_main$2B = vue.defineComponent({
    name: "IconH5",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h5`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2B = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2B = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M43 21H32.5v9h.5s1.5-1 4-1a5 5 0 0 1 5 5v1a5 5 0 0 1-5 5c-2.05 0-4.728-1.234-5.5-3" }, null, -1);
  const _hoisted_3$2x = [
    _hoisted_2$2B
  ];
  function _sfc_render$2B(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2x, 14, _hoisted_1$2B);
  }
  var _IconH5 = /* @__PURE__ */ _export_sfc(_sfc_main$2B, [["render", _sfc_render$2B]]);
  const IconH5 = Object.assign(_IconH5, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH5.name, _IconH5);
    }
  });
  const _sfc_main$2A = vue.defineComponent({
    name: "IconH6",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h6`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2A = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2A = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18M32 34.5c0 3.038 2.239 5.5 5 5.5s5-2.462 5-5.5-2.239-5.5-5-5.5-5 2.462-5 5.5Zm0 0v-5.73c0-4.444 3.867-7.677 8-7.263.437.044.736.08.952.115" }, null, -1);
  const _hoisted_3$2w = [
    _hoisted_2$2A
  ];
  function _sfc_render$2A(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2w, 14, _hoisted_1$2A);
  }
  var _IconH6 = /* @__PURE__ */ _export_sfc(_sfc_main$2A, [["render", _sfc_render$2A]]);
  const IconH6 = Object.assign(_IconH6, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH6.name, _IconH6);
    }
  });
  const _sfc_main$2z = vue.defineComponent({
    name: "IconH7",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-h7`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2z = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 6v18m0 0v18m0-18h20m0 0V6m0 18v18m4-21h12v1l-4.4 16-1.1 3.5" }, null, -1);
  const _hoisted_3$2v = [
    _hoisted_2$2z
  ];
  function _sfc_render$2z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2v, 14, _hoisted_1$2z);
  }
  var _IconH7 = /* @__PURE__ */ _export_sfc(_sfc_main$2z, [["render", _sfc_render$2z]]);
  const IconH7 = Object.assign(_IconH7, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconH7.name, _IconH7);
    }
  });
  const _sfc_main$2y = vue.defineComponent({
    name: "IconHighlight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-highlight`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2y = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 18V9.28a1 1 0 0 1 .758-.97l8-2A1 1 0 0 1 29 7.28V18m-10 0h-4a1 1 0 0 0-1 1v8h-4a1 1 0 0 0-1 1v15m10-25h10m0 0h4a1 1 0 0 1 1 1v8h4a1 1 0 0 1 1 1v15" }, null, -1);
  const _hoisted_3$2u = [
    _hoisted_2$2y
  ];
  function _sfc_render$2y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2u, 14, _hoisted_1$2y);
  }
  var _IconHighlight = /* @__PURE__ */ _export_sfc(_sfc_main$2y, [["render", _sfc_render$2y]]);
  const IconHighlight = Object.assign(_IconHighlight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconHighlight.name, _IconHighlight);
    }
  });
  const _sfc_main$2x = vue.defineComponent({
    name: "IconItalic",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-italic`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2x = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2x = /* @__PURE__ */ vue.createElementVNode("path", { d: "M18 8h9m8 0h-8m0 0-6 32m0 0h-8m8 0h9" }, null, -1);
  const _hoisted_3$2t = [
    _hoisted_2$2x
  ];
  function _sfc_render$2x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2t, 14, _hoisted_1$2x);
  }
  var _IconItalic = /* @__PURE__ */ _export_sfc(_sfc_main$2x, [["render", _sfc_render$2x]]);
  const IconItalic = Object.assign(_IconItalic, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconItalic.name, _IconItalic);
    }
  });
  const _sfc_main$2w = vue.defineComponent({
    name: "IconLineHeight",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-line-height`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2w = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2w = /* @__PURE__ */ vue.createElementVNode("path", { d: "M4 8h14.5M33 8H18.5m0 0v34" }, null, -1);
  const _hoisted_3$2s = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M39 9.5 37 13h4l-2-3.5ZM39 38.5 37 35h4l-2 3.5Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$Q = /* @__PURE__ */ vue.createElementVNode("path", { d: "M39 13h2l-2-3.5-2 3.5h2Zm0 0v22m0 0h2l-2 3.5-2-3.5h2Z" }, null, -1);
  const _hoisted_5$f = [
    _hoisted_2$2w,
    _hoisted_3$2s,
    _hoisted_4$Q
  ];
  function _sfc_render$2w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$f, 14, _hoisted_1$2w);
  }
  var _IconLineHeight = /* @__PURE__ */ _export_sfc(_sfc_main$2w, [["render", _sfc_render$2w]]);
  const IconLineHeight = Object.assign(_IconLineHeight, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLineHeight.name, _IconLineHeight);
    }
  });
  const _sfc_main$2v = vue.defineComponent({
    name: "IconLink",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-link`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2v = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2v = /* @__PURE__ */ vue.createElementVNode("path", { d: "m14.1 25.414-4.95 4.95a6 6 0 0 0 8.486 8.485l8.485-8.485a6 6 0 0 0 0-8.485m7.779.707 4.95-4.95a6 6 0 1 0-8.486-8.485l-8.485 8.485a6 6 0 0 0 0 8.485" }, null, -1);
  const _hoisted_3$2r = [
    _hoisted_2$2v
  ];
  function _sfc_render$2v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2r, 14, _hoisted_1$2v);
  }
  var _IconLink = /* @__PURE__ */ _export_sfc(_sfc_main$2v, [["render", _sfc_render$2v]]);
  const IconLink = Object.assign(_IconLink, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLink.name, _IconLink);
    }
  });
  const _sfc_main$2u = vue.defineComponent({
    name: "IconObliqueLine",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-oblique-line`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2u = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2u = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29.506 6.502 18.493 41.498" }, null, -1);
  const _hoisted_3$2q = [
    _hoisted_2$2u
  ];
  function _sfc_render$2u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2q, 14, _hoisted_1$2u);
  }
  var _IconObliqueLine = /* @__PURE__ */ _export_sfc(_sfc_main$2u, [["render", _sfc_render$2u]]);
  const IconObliqueLine = Object.assign(_IconObliqueLine, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconObliqueLine.name, _IconObliqueLine);
    }
  });
  const _sfc_main$2t = vue.defineComponent({
    name: "IconOrderedList",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-ordered-list`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2t = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2t = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 24h30M13 37h30M13 11h30" }, null, -1);
  const _hoisted_3$2p = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M5.578 13.06v1.695h5.041V13.06H9.164V7.555H7.748L5.255 8.968l.763 1.513 1.114-.636v3.215H5.578ZM5.37 26.205v1.49h5.07V26H7.964l.94-.94c.454-.44.783-.86.982-1.258.199-.404.298-.826.298-1.266 0-.686-.224-1.225-.683-1.6-.45-.372-1.093-.55-1.912-.55-.473 0-.933.072-1.38.214a3.63 3.63 0 0 0-1.133.582l-.066.053.652 1.533.113-.085c.263-.199.524-.345.783-.44.266-.094.524-.141.774-.141.309 0 .52.06.652.165.128.1.198.252.198.477 0 .177-.05.356-.154.54l-.001.002c-.099.186-.274.416-.528.69L5.37 26.205ZM10.381 38.344c0-.443-.118-.826-.358-1.145a1.702 1.702 0 0 0-.713-.56 1.652 1.652 0 0 0 .586-.52 1.73 1.73 0 0 0 .307-1.022c0-.404-.108-.763-.327-1.074a2.076 2.076 0 0 0-.918-.71c-.386-.166-.833-.247-1.34-.247-.48 0-.952.071-1.417.213-.459.134-.836.318-1.127.554l-.065.053.652 1.486.11-.076c.275-.193.563-.34.863-.442h.002c.3-.109.581-.162.844-.162.266 0 .454.065.579.18l.004.002c.128.107.198.262.198.48 0 .201-.07.33-.197.412-.138.089-.376.141-.733.141h-1.01v1.626h1.188c.371 0 .614.056.75.15.127.085.2.23.2.463 0 .254-.078.412-.21.503l-.002.002c-.136.097-.386.157-.777.157-.595 0-1.194-.199-1.8-.605l-.11-.073-.65 1.483.064.053c.285.236.662.424 1.127.565h.002c.465.136.95.203 1.456.203.852 0 1.538-.178 2.045-.546.517-.377.777-.896.777-1.544Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$P = [
    _hoisted_2$2t,
    _hoisted_3$2p
  ];
  function _sfc_render$2t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$P, 14, _hoisted_1$2t);
  }
  var _IconOrderedList = /* @__PURE__ */ _export_sfc(_sfc_main$2t, [["render", _sfc_render$2t]]);
  const IconOrderedList = Object.assign(_IconOrderedList, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconOrderedList.name, _IconOrderedList);
    }
  });
  const _sfc_main$2s = vue.defineComponent({
    name: "IconOriginalSize",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-original-size`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2s = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2s = /* @__PURE__ */ vue.createElementVNode("path", { d: "m5.5 11.5 5-2.5h1v32M34 11.5 39 9h1v32" }, null, -1);
  const _hoisted_3$2o = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 17h1v1h-1v-1ZM24 30h1v1h-1v-1Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$O = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 17h1v1h-1v-1ZM24 30h1v1h-1v-1Z" }, null, -1);
  const _hoisted_5$e = [
    _hoisted_2$2s,
    _hoisted_3$2o,
    _hoisted_4$O
  ];
  function _sfc_render$2s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$e, 14, _hoisted_1$2s);
  }
  var _IconOriginalSize = /* @__PURE__ */ _export_sfc(_sfc_main$2s, [["render", _sfc_render$2s]]);
  const IconOriginalSize = Object.assign(_IconOriginalSize, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconOriginalSize.name, _IconOriginalSize);
    }
  });
  const _sfc_main$2r = vue.defineComponent({
    name: "IconPaste",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-paste`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2r = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2r = /* @__PURE__ */ vue.createElementVNode("rect", {
    x: "8",
    y: "14",
    width: "24",
    height: "28",
    rx: "1"
  }, null, -1);
  const _hoisted_3$2n = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 6h.01v.01H24V6ZM32 6h.01v.01H32V6ZM40 6h.01v.01H40V6ZM40 13h.01v.01H40V13ZM40 21h.01v.01H40V21Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$N = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 6h.01v.01H24V6ZM32 6h.01v.01H32V6ZM40 6h.01v.01H40V6ZM40 13h.01v.01H40V13ZM40 21h.01v.01H40V21Z" }, null, -1);
  const _hoisted_5$d = [
    _hoisted_2$2r,
    _hoisted_3$2n,
    _hoisted_4$N
  ];
  function _sfc_render$2r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$d, 14, _hoisted_1$2r);
  }
  var _IconPaste = /* @__PURE__ */ _export_sfc(_sfc_main$2r, [["render", _sfc_render$2r]]);
  const IconPaste = Object.assign(_IconPaste, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPaste.name, _IconPaste);
    }
  });
  const _sfc_main$2q = vue.defineComponent({
    name: "IconQuote",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-quote`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2q = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M18.08 33.093a6 6 0 0 1-12 0c-.212-3.593 2.686-6 6-6a6 6 0 0 1 6 6ZM39.08 33.093a6 6 0 0 1-12 0c-.212-3.593 2.686-6 6-6a6 6 0 0 1 6 6Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$2m = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6.08 33.093a6 6 0 1 0 6-6c-3.314 0-6.212 2.407-6 6Zm0 0c-.5-8.5 1-25.5 15-24m6 24a6 6 0 1 0 6-6c-3.314 0-6.212 2.407-6 6Zm0 0c-.5-8.5 1-25.5 15-24" }, null, -1);
  const _hoisted_4$M = [
    _hoisted_2$2q,
    _hoisted_3$2m
  ];
  function _sfc_render$2q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$M, 14, _hoisted_1$2q);
  }
  var _IconQuote = /* @__PURE__ */ _export_sfc(_sfc_main$2q, [["render", _sfc_render$2q]]);
  const IconQuote = Object.assign(_IconQuote, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQuote.name, _IconQuote);
    }
  });
  const _sfc_main$2p = vue.defineComponent({
    name: "IconRedo",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-redo`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2p = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2p = /* @__PURE__ */ vue.createElementVNode("path", { d: "m32.678 23.78 7.778-7.778-7.778-7.778M39.19 16H18.5C12.149 16 7 21.15 7 27.5 7 33.852 12.149 39 18.5 39H31" }, null, -1);
  const _hoisted_3$2l = [
    _hoisted_2$2p
  ];
  function _sfc_render$2p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2l, 14, _hoisted_1$2p);
  }
  var _IconRedo = /* @__PURE__ */ _export_sfc(_sfc_main$2p, [["render", _sfc_render$2p]]);
  const IconRedo = Object.assign(_IconRedo, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRedo.name, _IconRedo);
    }
  });
  const _sfc_main$2o = vue.defineComponent({
    name: "IconScissor",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-scissor`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2o = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2o = /* @__PURE__ */ vue.createElementVNode("path", { d: "m40.293 7.707-23.05 23.05m0 0a6 6 0 1 0-8.485 8.485 6 6 0 0 0 8.485-8.485Zm13.514 0a6 6 0 1 0 8.485 8.485 6 6 0 0 0-8.485-8.485Zm0 0L7.707 7.707" }, null, -1);
  const _hoisted_3$2k = [
    _hoisted_2$2o
  ];
  function _sfc_render$2o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2k, 14, _hoisted_1$2o);
  }
  var _IconScissor = /* @__PURE__ */ _export_sfc(_sfc_main$2o, [["render", _sfc_render$2o]]);
  const IconScissor = Object.assign(_IconScissor, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconScissor.name, _IconScissor);
    }
  });
  const _sfc_main$2n = vue.defineComponent({
    name: "IconSortAscending",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sort-ascending`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2n = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2n = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15 6v33.759a.1.1 0 0 1-.17.07L8 33m17-6h10.4v.65L27 39.35V40h11m-1-19L31.4 8h-.8L25 21" }, null, -1);
  const _hoisted_3$2j = [
    _hoisted_2$2n
  ];
  function _sfc_render$2n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2j, 14, _hoisted_1$2n);
  }
  var _IconSortAscending = /* @__PURE__ */ _export_sfc(_sfc_main$2n, [["render", _sfc_render$2n]]);
  const IconSortAscending = Object.assign(_IconSortAscending, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSortAscending.name, _IconSortAscending);
    }
  });
  const _sfc_main$2m = vue.defineComponent({
    name: "IconSortDescending",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sort-descending`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2m = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2m = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 27h10.4v.65L27 39.35V40h11m-21.999 2V7.24a.1.1 0 0 0-.17-.07L9 14m28 7L31.4 8h-.8L25 21" }, null, -1);
  const _hoisted_3$2i = [
    _hoisted_2$2m
  ];
  function _sfc_render$2m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2i, 14, _hoisted_1$2m);
  }
  var _IconSortDescending = /* @__PURE__ */ _export_sfc(_sfc_main$2m, [["render", _sfc_render$2m]]);
  const IconSortDescending = Object.assign(_IconSortDescending, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSortDescending.name, _IconSortDescending);
    }
  });
  const _sfc_main$2l = vue.defineComponent({
    name: "IconSort",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sort`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2l = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2l = /* @__PURE__ */ vue.createElementVNode("path", { d: "M43 9H5m0 30h14m15.5-15H5" }, null, -1);
  const _hoisted_3$2h = [
    _hoisted_2$2l
  ];
  function _sfc_render$2l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2h, 14, _hoisted_1$2l);
  }
  var _IconSort = /* @__PURE__ */ _export_sfc(_sfc_main$2l, [["render", _sfc_render$2l]]);
  const IconSort = Object.assign(_IconSort, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSort.name, _IconSort);
    }
  });
  const _sfc_main$2k = vue.defineComponent({
    name: "IconStrikethrough",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-strikethrough`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2k = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2k = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 32c0 5.246 5.149 9 11.5 9S36 36.746 36 31.5c0-1.708-.5-4.5-3.5-5.695m0 0H43m-10.5 0H5M34 14.5C34 10.358 29.523 7 24 7s-10 3.358-10 7.5c0 1.794 1.6 4.21 3 5.5" }, null, -1);
  const _hoisted_3$2g = [
    _hoisted_2$2k
  ];
  function _sfc_render$2k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2g, 14, _hoisted_1$2k);
  }
  var _IconStrikethrough = /* @__PURE__ */ _export_sfc(_sfc_main$2k, [["render", _sfc_render$2k]]);
  const IconStrikethrough = Object.assign(_IconStrikethrough, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconStrikethrough.name, _IconStrikethrough);
    }
  });
  const _sfc_main$2j = vue.defineComponent({
    name: "IconUnderline",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-underline`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2j = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2j = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 5v17.5C13 27 15.5 33 24 33s11-5 11-10.5V5M9 41h30" }, null, -1);
  const _hoisted_3$2f = [
    _hoisted_2$2j
  ];
  function _sfc_render$2j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2f, 14, _hoisted_1$2j);
  }
  var _IconUnderline = /* @__PURE__ */ _export_sfc(_sfc_main$2j, [["render", _sfc_render$2j]]);
  const IconUnderline = Object.assign(_IconUnderline, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUnderline.name, _IconUnderline);
    }
  });
  const _sfc_main$2i = vue.defineComponent({
    name: "IconUndo",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-undo`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2i = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2i = /* @__PURE__ */ vue.createElementVNode("path", { d: "m15.322 23.78-7.778-7.778 7.778-7.778M8.81 16H29.5C35.851 16 41 21.15 41 27.5 41 33.852 35.851 39 29.5 39H17" }, null, -1);
  const _hoisted_3$2e = [
    _hoisted_2$2i
  ];
  function _sfc_render$2i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2e, 14, _hoisted_1$2i);
  }
  var _IconUndo = /* @__PURE__ */ _export_sfc(_sfc_main$2i, [["render", _sfc_render$2i]]);
  const IconUndo = Object.assign(_IconUndo, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUndo.name, _IconUndo);
    }
  });
  const _sfc_main$2h = vue.defineComponent({
    name: "IconUnorderedList",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-unordered-list`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2h = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2h = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 24h30M5 11h4m4 26h30M13 11h30M5 24h4M5 37h4" }, null, -1);
  const _hoisted_3$2d = [
    _hoisted_2$2h
  ];
  function _sfc_render$2h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2d, 14, _hoisted_1$2h);
  }
  var _IconUnorderedList = /* @__PURE__ */ _export_sfc(_sfc_main$2h, [["render", _sfc_render$2h]]);
  const IconUnorderedList = Object.assign(_IconUnorderedList, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUnorderedList.name, _IconUnorderedList);
    }
  });
  const _sfc_main$2g = vue.defineComponent({
    name: "IconZoomIn",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-zoom-in`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2g = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2g = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32.607 32.607A14.953 14.953 0 0 0 37 22c0-8.284-6.716-15-15-15-8.284 0-15 6.716-15 15 0 8.284 6.716 15 15 15 4.142 0 7.892-1.679 10.607-4.393Zm0 0L41.5 41.5M29 22H15m7 7V15" }, null, -1);
  const _hoisted_3$2c = [
    _hoisted_2$2g
  ];
  function _sfc_render$2g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2c, 14, _hoisted_1$2g);
  }
  var _IconZoomIn = /* @__PURE__ */ _export_sfc(_sfc_main$2g, [["render", _sfc_render$2g]]);
  const IconZoomIn = Object.assign(_IconZoomIn, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconZoomIn.name, _IconZoomIn);
    }
  });
  const _sfc_main$2f = vue.defineComponent({
    name: "IconZoomOut",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-zoom-out`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2f = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2f = /* @__PURE__ */ vue.createElementVNode("path", { d: "M32.607 32.607A14.953 14.953 0 0 0 37 22c0-8.284-6.716-15-15-15-8.284 0-15 6.716-15 15 0 8.284 6.716 15 15 15 4.142 0 7.892-1.679 10.607-4.393Zm0 0L41.5 41.5M29 22H15" }, null, -1);
  const _hoisted_3$2b = [
    _hoisted_2$2f
  ];
  function _sfc_render$2f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2b, 14, _hoisted_1$2f);
  }
  var _IconZoomOut = /* @__PURE__ */ _export_sfc(_sfc_main$2f, [["render", _sfc_render$2f]]);
  const IconZoomOut = Object.assign(_IconZoomOut, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconZoomOut.name, _IconZoomOut);
    }
  });
  const _sfc_main$2e = vue.defineComponent({
    name: "IconMuteFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-mute-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2e = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2e = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M5.931 13.001A2 2 0 0 0 4 15v18a2 2 0 0 0 2 2h7.37l9.483 6.639A2 2 0 0 0 26 40v-6.93L5.931 13.001ZM35.27 28.199l-3.311-3.313a7.985 7.985 0 0 0-1.96-6.107.525.525 0 0 1 .011-.718l2.122-2.122a.485.485 0 0 1 .7.008c3.125 3.393 3.938 8.15 2.439 12.252ZM41.13 34.059l-2.936-2.937c3.07-5.89 2.226-13.288-2.531-18.348a.513.513 0 0 1 .004-.713l2.122-2.122a.492.492 0 0 1 .703.006c6.322 6.64 7.202 16.56 2.639 24.114ZM26 18.928l-8.688-8.688 5.541-3.878A2 2 0 0 1 26 8v10.928Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$2a = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "m7.012 4.184 35.272 35.272-2.828 2.828L4.184 7.012l2.828-2.828Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$L = [
    _hoisted_2$2e,
    _hoisted_3$2a
  ];
  function _sfc_render$2e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$L, 14, _hoisted_1$2e);
  }
  var _IconMuteFill = /* @__PURE__ */ _export_sfc(_sfc_main$2e, [["render", _sfc_render$2e]]);
  const IconMuteFill = Object.assign(_IconMuteFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMuteFill.name, _IconMuteFill);
    }
  });
  const _sfc_main$2d = vue.defineComponent({
    name: "IconPauseCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-pause-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2d = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2d = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-6-27a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V18a1 1 0 0 0-1-1h-3Zm9 0a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V18a1 1 0 0 0-1-1h-3Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$29 = [
    _hoisted_2$2d
  ];
  function _sfc_render$2d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$29, 14, _hoisted_1$2d);
  }
  var _IconPauseCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$2d, [["render", _sfc_render$2d]]);
  const IconPauseCircleFill = Object.assign(_IconPauseCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPauseCircleFill.name, _IconPauseCircleFill);
    }
  });
  const _sfc_main$2c = vue.defineComponent({
    name: "IconPlayArrowFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-play-arrow-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2c = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2c = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M17.533 10.974a1 1 0 0 0-1.537.844v24.356a1 1 0 0 0 1.537.844L36.67 24.84a1 1 0 0 0 0-1.688L17.533 10.974Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$28 = [
    _hoisted_2$2c
  ];
  function _sfc_render$2c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$28, 14, _hoisted_1$2c);
  }
  var _IconPlayArrowFill = /* @__PURE__ */ _export_sfc(_sfc_main$2c, [["render", _sfc_render$2c]]);
  const IconPlayArrowFill = Object.assign(_IconPlayArrowFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlayArrowFill.name, _IconPlayArrowFill);
    }
  });
  const _sfc_main$2b = vue.defineComponent({
    name: "IconPlayCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-play-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2b = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2b = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M44 24c0 11.046-8.954 20-20 20S4 35.046 4 24 12.954 4 24 4s20 8.954 20 20Zm-23.662-7.783C19.302 15.605 18 16.36 18 17.575v12.85c0 1.214 1.302 1.97 2.338 1.358l10.89-6.425c1.03-.607 1.03-2.11 0-2.716l-10.89-6.425Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$27 = [
    _hoisted_2$2b
  ];
  function _sfc_render$2b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$27, 14, _hoisted_1$2b);
  }
  var _IconPlayCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$2b, [["render", _sfc_render$2b]]);
  const IconPlayCircleFill = Object.assign(_IconPlayCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlayCircleFill.name, _IconPlayCircleFill);
    }
  });
  const _sfc_main$2a = vue.defineComponent({
    name: "IconSkipNextFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-skip-next-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2a = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2a = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M13.585 12.145a1 1 0 0 0-1.585.81v22.09a1 1 0 0 0 1.585.81L28.878 24.81a1 1 0 0 0 0-1.622L13.585 12.145Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$26 = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M33 36a1 1 0 0 1-1-1V13a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v22a1 1 0 0 1-1 1h-2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$K = [
    _hoisted_2$2a,
    _hoisted_3$26
  ];
  function _sfc_render$2a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$K, 14, _hoisted_1$2a);
  }
  var _IconSkipNextFill = /* @__PURE__ */ _export_sfc(_sfc_main$2a, [["render", _sfc_render$2a]]);
  const IconSkipNextFill = Object.assign(_IconSkipNextFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSkipNextFill.name, _IconSkipNextFill);
    }
  });
  const _sfc_main$29 = vue.defineComponent({
    name: "IconSkipPreviousFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-skip-previous-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$29 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$29 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M34.414 35.855a1 1 0 0 0 1.586-.81v-22.09a1 1 0 0 0-1.586-.81L19.122 23.19a1 1 0 0 0 0 1.622l15.292 11.044Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$25 = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M15 12a1 1 0 0 1 1 1v22a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V13a1 1 0 0 1 1-1h2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$J = [
    _hoisted_2$29,
    _hoisted_3$25
  ];
  function _sfc_render$29(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$J, 14, _hoisted_1$29);
  }
  var _IconSkipPreviousFill = /* @__PURE__ */ _export_sfc(_sfc_main$29, [["render", _sfc_render$29]]);
  const IconSkipPreviousFill = Object.assign(_IconSkipPreviousFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSkipPreviousFill.name, _IconSkipPreviousFill);
    }
  });
  const _sfc_main$28 = vue.defineComponent({
    name: "IconSoundFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sound-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$28 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$28 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m14 15 10-7v32l-10-7H6V15h8Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$24 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24.924 6.226A2 2 0 0 1 26 8v32a2 2 0 0 1-3.147 1.639L13.37 35H6a2 2 0 0 1-2-2V15a2 2 0 0 1 2-2h7.37l9.483-6.638a2 2 0 0 1 2.07-.136ZM35.314 35.042c6.248-6.249 6.248-16.38 0-22.628l2.828-2.828c7.81 7.81 7.81 20.474 0 28.284l-2.828-2.828Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$I = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M29.657 29.728a8 8 0 0 0 0-11.314l2.828-2.828c4.687 4.686 4.687 12.284 0 16.97l-2.828-2.828Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_5$c = [
    _hoisted_2$28,
    _hoisted_3$24,
    _hoisted_4$I
  ];
  function _sfc_render$28(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$c, 14, _hoisted_1$28);
  }
  var _IconSoundFill = /* @__PURE__ */ _export_sfc(_sfc_main$28, [["render", _sfc_render$28]]);
  const IconSoundFill = Object.assign(_IconSoundFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSoundFill.name, _IconSoundFill);
    }
  });
  const _sfc_main$27 = vue.defineComponent({
    name: "IconBackward",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-backward`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$27 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$27 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38.293 36.293 26.707 24.707a1 1 0 0 1 0-1.414l11.586-11.586c.63-.63 1.707-.184 1.707.707v23.172c0 .89-1.077 1.337-1.707.707ZM21 12.414v23.172c0 .89-1.077 1.337-1.707.707L7.707 24.707a1 1 0 0 1 0-1.414l11.586-11.586c.63-.63 1.707-.184 1.707.707Z" }, null, -1);
  const _hoisted_3$23 = [
    _hoisted_2$27
  ];
  function _sfc_render$27(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$23, 14, _hoisted_1$27);
  }
  var _IconBackward = /* @__PURE__ */ _export_sfc(_sfc_main$27, [["render", _sfc_render$27]]);
  const IconBackward = Object.assign(_IconBackward, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBackward.name, _IconBackward);
    }
  });
  const _sfc_main$26 = vue.defineComponent({
    name: "IconForward",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-forward`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$26 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$26 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m9.707 11.707 11.586 11.586a1 1 0 0 1 0 1.414L9.707 36.293c-.63.63-1.707.184-1.707-.707V12.414c0-.89 1.077-1.337 1.707-.707ZM27 35.586V12.414c0-.89 1.077-1.337 1.707-.707l11.586 11.586a1 1 0 0 1 0 1.414L28.707 36.293c-.63.63-1.707.184-1.707-.707Z" }, null, -1);
  const _hoisted_3$22 = [
    _hoisted_2$26
  ];
  function _sfc_render$26(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$22, 14, _hoisted_1$26);
  }
  var _IconForward = /* @__PURE__ */ _export_sfc(_sfc_main$26, [["render", _sfc_render$26]]);
  const IconForward = Object.assign(_IconForward, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconForward.name, _IconForward);
    }
  });
  const _sfc_main$25 = vue.defineComponent({
    name: "IconFullscreenExit",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-fullscreen-exit`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$25 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$25 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M35 6v8a1 1 0 0 0 1 1h8M13 6v8a1 1 0 0 1-1 1H4m31 27v-8a1 1 0 0 1 1-1h8m-31 9v-8a1 1 0 0 0-1-1H4" }, null, -1);
  const _hoisted_3$21 = [
    _hoisted_2$25
  ];
  function _sfc_render$25(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$21, 14, _hoisted_1$25);
  }
  var _IconFullscreenExit = /* @__PURE__ */ _export_sfc(_sfc_main$25, [["render", _sfc_render$25]]);
  const IconFullscreenExit = Object.assign(_IconFullscreenExit, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFullscreenExit.name, _IconFullscreenExit);
    }
  });
  const _sfc_main$24 = vue.defineComponent({
    name: "IconFullscreen",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-fullscreen`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$24 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$24 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 17V9a1 1 0 0 0-1-1h-8M6 17V9a1 1 0 0 1 1-1h8m27 23v8a1 1 0 0 1-1 1h-8M6 31v8a1 1 0 0 0 1 1h8" }, null, -1);
  const _hoisted_3$20 = [
    _hoisted_2$24
  ];
  function _sfc_render$24(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$20, 14, _hoisted_1$24);
  }
  var _IconFullscreen = /* @__PURE__ */ _export_sfc(_sfc_main$24, [["render", _sfc_render$24]]);
  const IconFullscreen = Object.assign(_IconFullscreen, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFullscreen.name, _IconFullscreen);
    }
  });
  const _sfc_main$23 = vue.defineComponent({
    name: "IconLiveBroadcast",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-live-broadcast`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$23 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$23 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29 16h12a1 1 0 0 1 1 1v22a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V17a1 1 0 0 1 1-1h12m10 0 8-9m-8 9H19m0 0-8-9m17.281 21.88-6.195 4.475a1 1 0 0 1-1.586-.81v-8.262a1 1 0 0 1 1.521-.853l6.196 3.786a1 1 0 0 1 .064 1.664Z" }, null, -1);
  const _hoisted_3$1$ = [
    _hoisted_2$23
  ];
  function _sfc_render$23(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1$, 14, _hoisted_1$23);
  }
  var _IconLiveBroadcast = /* @__PURE__ */ _export_sfc(_sfc_main$23, [["render", _sfc_render$23]]);
  const IconLiveBroadcast = Object.assign(_IconLiveBroadcast, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLiveBroadcast.name, _IconLiveBroadcast);
    }
  });
  const _sfc_main$22 = vue.defineComponent({
    name: "IconMusic",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-music`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$22 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$22 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15 37a4 4 0 1 0-8 0 4 4 0 0 0 8 0Zm0 0V18.5M41 37a4 4 0 1 0-8 0 4 4 0 0 0 8 0Zm0 0V16.5m-26 2V9.926a1 1 0 0 1 .923-.997l24-1.846A1 1 0 0 1 41 8.08v8.42m-26 2 26-2" }, null, -1);
  const _hoisted_3$1_ = [
    _hoisted_2$22
  ];
  function _sfc_render$22(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1_, 14, _hoisted_1$22);
  }
  var _IconMusic = /* @__PURE__ */ _export_sfc(_sfc_main$22, [["render", _sfc_render$22]]);
  const IconMusic = Object.assign(_IconMusic, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMusic.name, _IconMusic);
    }
  });
  const _sfc_main$21 = vue.defineComponent({
    name: "IconMute",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-mute`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$21 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$21 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m19 11.5 4.833-4.35a.1.1 0 0 1 .167.075V17m-14-1H7.1a.1.1 0 0 0-.1.1v15.8a.1.1 0 0 0 .1.1H14l9.833 8.85a.1.1 0 0 0 .167-.075V31m6.071-14.071C32.535 19.393 34 23 32.799 26m2.929-14.728C41.508 17.052 42.5 25 39.123 32M6.5 6.5l35 35" }, null, -1);
  const _hoisted_3$1Z = [
    _hoisted_2$21
  ];
  function _sfc_render$21(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1Z, 14, _hoisted_1$21);
  }
  var _IconMute = /* @__PURE__ */ _export_sfc(_sfc_main$21, [["render", _sfc_render$21]]);
  const IconMute = Object.assign(_IconMute, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMute.name, _IconMute);
    }
  });
  const _sfc_main$20 = vue.defineComponent({
    name: "IconPauseCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-pause-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$20 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$20 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$1Y = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 19v10h1V19h-1ZM28 19v10h1V19h-1Z" }, null, -1);
  const _hoisted_4$H = [
    _hoisted_2$20,
    _hoisted_3$1Y
  ];
  function _sfc_render$20(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$H, 14, _hoisted_1$20);
  }
  var _IconPauseCircle = /* @__PURE__ */ _export_sfc(_sfc_main$20, [["render", _sfc_render$20]]);
  const IconPauseCircle = Object.assign(_IconPauseCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPauseCircle.name, _IconPauseCircle);
    }
  });
  const _sfc_main$1$ = vue.defineComponent({
    name: "IconPause",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-pause`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1$ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1$ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M14 12h4v24h-4zM30 12h4v24h-4z" }, null, -1);
  const _hoisted_3$1X = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M14 12h4v24h-4zM30 12h4v24h-4z"
  }, null, -1);
  const _hoisted_4$G = [
    _hoisted_2$1$,
    _hoisted_3$1X
  ];
  function _sfc_render$1$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$G, 14, _hoisted_1$1$);
  }
  var _IconPause = /* @__PURE__ */ _export_sfc(_sfc_main$1$, [["render", _sfc_render$1$]]);
  const IconPause = Object.assign(_IconPause, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPause.name, _IconPause);
    }
  });
  const _sfc_main$1_ = vue.defineComponent({
    name: "IconPlayArrow",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-play-arrow`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1_ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1_ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M12.533 7.965A1 1 0 0 0 11 8.81v30.377a1 1 0 0 0 1.533.846L36.656 24.84a1 1 0 0 0 0-1.692L12.533 7.965Z" }, null, -1);
  const _hoisted_3$1W = [
    _hoisted_2$1_
  ];
  function _sfc_render$1_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1W, 14, _hoisted_1$1_);
  }
  var _IconPlayArrow = /* @__PURE__ */ _export_sfc(_sfc_main$1_, [["render", _sfc_render$1_]]);
  const IconPlayArrow = Object.assign(_IconPlayArrow, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlayArrow.name, _IconPlayArrow);
    }
  });
  const _sfc_main$1Z = vue.defineComponent({
    name: "IconPlayCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-play-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1Z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1Z = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 42c9.941 0 18-8.059 18-18S33.941 6 24 6 6 14.059 6 24s8.059 18 18 18Z" }, null, -1);
  const _hoisted_3$1V = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 17v14l12-7-12-7Z" }, null, -1);
  const _hoisted_4$F = [
    _hoisted_2$1Z,
    _hoisted_3$1V
  ];
  function _sfc_render$1Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$F, 14, _hoisted_1$1Z);
  }
  var _IconPlayCircle = /* @__PURE__ */ _export_sfc(_sfc_main$1Z, [["render", _sfc_render$1Z]]);
  const IconPlayCircle = Object.assign(_IconPlayCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPlayCircle.name, _IconPlayCircle);
    }
  });
  const _sfc_main$1Y = vue.defineComponent({
    name: "IconRecordStop",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-record-stop`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1Y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1Y = /* @__PURE__ */ vue.createElementVNode("path", {
    "clip-rule": "evenodd",
    d: "M24 6c9.941 0 18 8.059 18 18s-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6Z"
  }, null, -1);
  const _hoisted_3$1U = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M19 20a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-8a1 1 0 0 1-1-1v-8Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$E = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 20a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-8a1 1 0 0 1-1-1v-8Z" }, null, -1);
  const _hoisted_5$b = [
    _hoisted_2$1Y,
    _hoisted_3$1U,
    _hoisted_4$E
  ];
  function _sfc_render$1Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$b, 14, _hoisted_1$1Y);
  }
  var _IconRecordStop = /* @__PURE__ */ _export_sfc(_sfc_main$1Y, [["render", _sfc_render$1Y]]);
  const IconRecordStop = Object.assign(_IconRecordStop, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRecordStop.name, _IconRecordStop);
    }
  });
  const _sfc_main$1X = vue.defineComponent({
    name: "IconRecord",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-record`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1X = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1X = /* @__PURE__ */ vue.createElementVNode("path", {
    "clip-rule": "evenodd",
    d: "M24 6c9.941 0 18 8.059 18 18s-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6Z"
  }, null, -1);
  const _hoisted_3$1T = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M30 24a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$D = /* @__PURE__ */ vue.createElementVNode("path", { d: "M30 24a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z" }, null, -1);
  const _hoisted_5$a = [
    _hoisted_2$1X,
    _hoisted_3$1T,
    _hoisted_4$D
  ];
  function _sfc_render$1X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$a, 14, _hoisted_1$1X);
  }
  var _IconRecord = /* @__PURE__ */ _export_sfc(_sfc_main$1X, [["render", _sfc_render$1X]]);
  const IconRecord = Object.assign(_IconRecord, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRecord.name, _IconRecord);
    }
  });
  const _sfc_main$1W = vue.defineComponent({
    name: "IconSkipNext",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-skip-next`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1W = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1W = /* @__PURE__ */ vue.createElementVNode("path", { d: "M34 24 10 40V8l24 16Z" }, null, -1);
  const _hoisted_3$1S = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38 6v36" }, null, -1);
  const _hoisted_4$C = [
    _hoisted_2$1W,
    _hoisted_3$1S
  ];
  function _sfc_render$1W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$C, 14, _hoisted_1$1W);
  }
  var _IconSkipNext = /* @__PURE__ */ _export_sfc(_sfc_main$1W, [["render", _sfc_render$1W]]);
  const IconSkipNext = Object.assign(_IconSkipNext, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSkipNext.name, _IconSkipNext);
    }
  });
  const _sfc_main$1V = vue.defineComponent({
    name: "IconSkipPrevious",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-skip-previous`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1V = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1V = /* @__PURE__ */ vue.createElementVNode("path", { d: "m14 24 24 16V8L14 24Z" }, null, -1);
  const _hoisted_3$1R = /* @__PURE__ */ vue.createElementVNode("path", { d: "M10 6v36" }, null, -1);
  const _hoisted_4$B = [
    _hoisted_2$1V,
    _hoisted_3$1R
  ];
  function _sfc_render$1V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$B, 14, _hoisted_1$1V);
  }
  var _IconSkipPrevious = /* @__PURE__ */ _export_sfc(_sfc_main$1V, [["render", _sfc_render$1V]]);
  const IconSkipPrevious = Object.assign(_IconSkipPrevious, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSkipPrevious.name, _IconSkipPrevious);
    }
  });
  const _sfc_main$1U = vue.defineComponent({
    name: "IconSound",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sound`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1U = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1U = /* @__PURE__ */ vue.createElementVNode("path", { d: "m14 16 10-9v34l-10-9H6V16h8Z" }, null, -1);
  const _hoisted_3$1Q = /* @__PURE__ */ vue.createElementVNode("path", { d: "M31.071 16.929c3.905 3.905 3.905 10.237 0 14.142M36.727 11.272c7.03 7.03 7.03 18.426 0 25.456" }, null, -1);
  const _hoisted_4$A = [
    _hoisted_2$1U,
    _hoisted_3$1Q
  ];
  function _sfc_render$1U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$A, 14, _hoisted_1$1U);
  }
  var _IconSound = /* @__PURE__ */ _export_sfc(_sfc_main$1U, [["render", _sfc_render$1U]]);
  const IconSound = Object.assign(_IconSound, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSound.name, _IconSound);
    }
  });
  const _sfc_main$1T = vue.defineComponent({
    name: "IconBytedanceColor",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bytedance-color`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1T = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1T = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M280.416 794.112 128 829.952v-636.32l152.416 35.84z",
    fill: "#325AB4"
  }, null, -1);
  const _hoisted_3$1P = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M928 828.48 800 864V160l128 35.52z",
    fill: "#78E6DC"
  }, null, -1);
  const _hoisted_4$z = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M480 798.304 352 832V480l128 33.696z",
    fill: "#3C8CFF"
  }, null, -1);
  const _hoisted_5$9 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M576 449.696 704 416v352l-128-33.696z",
    fill: "#00C8D2"
  }, null, -1);
  const _hoisted_6$2 = [
    _hoisted_2$1T,
    _hoisted_3$1P,
    _hoisted_4$z,
    _hoisted_5$9
  ];
  function _sfc_render$1T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6$2, 14, _hoisted_1$1T);
  }
  var _IconBytedanceColor = /* @__PURE__ */ _export_sfc(_sfc_main$1T, [["render", _sfc_render$1T]]);
  const IconBytedanceColor = Object.assign(_IconBytedanceColor, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBytedanceColor.name, _IconBytedanceColor);
    }
  });
  const _sfc_main$1S = vue.defineComponent({
    name: "IconLarkColor",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-lark-color`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1S = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1S = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "#00d6b9",
    d: "m273.46 264.31 1.01-1.01c.65-.65 1.36-1.36 2.06-2.01l1.41-1.36 4.17-4.12 5.73-5.58 4.88-4.83 4.57-4.52 4.78-4.73 4.37-4.32 6.13-6.03c1.16-1.16 2.36-2.26 3.57-3.37 2.21-2.01 4.52-3.97 6.84-5.88 2.16-1.71 4.37-3.37 6.64-4.98 3.17-2.26 6.43-4.32 9.75-6.33 3.27-1.91 6.64-3.72 10.05-5.43 3.22-1.56 6.54-3.02 9.9-4.32 1.86-.75 3.77-1.41 5.68-2.06.96-.3 1.91-.65 2.92-.96a241.19 241.19 0 0 0-45.6-91.5c-4.17-5.18-10.51-8.19-17.14-8.19H128.97c-1.81 0-3.32 1.46-3.32 3.32 0 1.06.5 2.01 1.36 2.66 60.13 44.09 110 100.75 146.04 166l.4-.45Z"
  }, null, -1);
  const _hoisted_3$1O = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "#133c9a",
    d: "M203.43 419.4c90.99 0 170.27-50.22 211.6-124.43 1.46-2.61 2.87-5.23 4.22-7.89a96.374 96.374 0 0 1-6.94 11.41c-.9 1.26-1.81 2.51-2.77 3.77-1.21 1.56-2.41 3.02-3.67 4.47a98.086 98.086 0 0 1-3.07 3.37 85.486 85.486 0 0 1-6.64 6.28c-1.31 1.11-2.56 2.16-3.92 3.17a76.24 76.24 0 0 1-4.78 3.42c-1.01.7-2.06 1.36-3.12 2.01-1.06.65-2.16 1.31-3.32 1.96a91.35 91.35 0 0 1-6.99 3.52c-2.06.9-4.17 1.76-6.28 2.56a82.5 82.5 0 0 1-7.04 2.26 86.613 86.613 0 0 1-10.81 2.31c-2.61.4-5.33.7-7.99.9-2.82.2-5.68.25-8.55.25-3.17-.05-6.33-.25-9.55-.6-2.36-.25-4.73-.6-7.09-1.01-2.06-.35-4.12-.8-6.18-1.31-1.11-.25-2.16-.55-3.27-.85-3.02-.8-6.03-1.66-9.05-2.51-1.51-.45-3.02-.85-4.47-1.31-2.26-.65-4.47-1.36-6.69-2.06-1.81-.55-3.62-1.16-5.43-1.76-1.71-.55-3.47-1.11-5.18-1.71l-3.52-1.21c-1.41-.5-2.87-1.01-4.27-1.51l-3.02-1.11c-2.01-.7-4.02-1.46-5.98-2.21-1.16-.45-2.31-.85-3.47-1.31-1.56-.6-3.07-1.21-4.63-1.81-1.61-.65-3.27-1.31-4.88-1.96l-3.17-1.31-3.92-1.61-3.02-1.26-3.12-1.36-2.71-1.21-2.46-1.11-2.51-1.16-2.56-1.21-3.27-1.51-3.42-1.61c-1.21-.6-2.41-1.16-3.62-1.76l-3.07-1.51A508.746 508.746 0 0 1 65.6 190.35c-1.26-1.31-3.32-1.41-4.68-.15-.65.6-1.06 1.51-1.06 2.41l.1 155.49v12.62c0 7.34 3.62 14.18 9.7 18.25 39.56 26.44 86.12 40.47 133.73 40.37"
  }, null, -1);
  const _hoisted_4$y = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "#3370ff",
    d: "M470.83 200.21c-30.72-15.03-65.86-18.25-98.79-9-1.41.4-2.77.8-4.12 1.21-.96.3-1.91.6-2.92.96-1.91.65-3.82 1.36-5.68 2.06-3.37 1.31-6.64 2.77-9.9 4.32-3.42 1.66-6.79 3.47-10.05 5.38-3.37 1.96-6.59 4.07-9.75 6.33-2.26 1.61-4.47 3.27-6.64 4.98-2.36 1.91-4.63 3.82-6.84 5.88-1.21 1.11-2.36 2.21-3.57 3.37l-6.13 6.03-4.37 4.32-4.78 4.73-4.57 4.52-4.88 4.83-5.68 5.63-4.17 4.12-1.41 1.36c-.65.65-1.36 1.36-2.06 2.01l-1.01 1.01-1.56 1.46-1.76 1.61c-15.13 13.93-32.02 25.84-50.17 35.54l3.27 1.51 2.56 1.21 2.51 1.16 2.46 1.11 2.71 1.21 3.12 1.36 3.02 1.26 3.92 1.61 3.17 1.31c1.61.65 3.27 1.31 4.88 1.96 1.51.6 3.07 1.21 4.63 1.81 1.16.45 2.31.85 3.47 1.31 2.01.75 4.02 1.46 5.98 2.21l3.02 1.11c1.41.5 2.82 1.01 4.27 1.51l3.52 1.21c1.71.55 3.42 1.16 5.18 1.71 1.81.6 3.62 1.16 5.43 1.76 2.21.7 4.47 1.36 6.69 2.06 1.51.45 3.02.9 4.47 1.31 3.02.85 6.03 1.71 9.05 2.51 1.11.3 2.16.55 3.27.85 2.06.5 4.12.9 6.18 1.31 2.36.4 4.73.75 7.09 1.01 3.22.35 6.38.55 9.55.6 2.87.05 5.73-.05 8.55-.25 2.71-.2 5.38-.5 7.99-.9 3.62-.55 7.24-1.36 10.81-2.31 2.36-.65 4.73-1.41 7.04-2.26a75.16 75.16 0 0 0 6.28-2.56 91.35 91.35 0 0 0 6.99-3.52c1.11-.6 2.21-1.26 3.32-1.96 1.11-.65 2.11-1.36 3.12-2.01 1.61-1.11 3.22-2.21 4.78-3.42 1.36-1.01 2.66-2.06 3.92-3.17 2.26-1.96 4.47-4.07 6.59-6.28 1.06-1.11 2.06-2.21 3.07-3.37 1.26-1.46 2.51-2.97 3.67-4.47a73.33 73.33 0 0 0 2.77-3.77c2.51-3.62 4.83-7.39 6.89-11.31l2.36-4.68 21.01-41.88.25-.5c6.94-14.98 16.39-28.45 28-39.97Z"
  }, null, -1);
  const _hoisted_5$8 = [
    _hoisted_2$1S,
    _hoisted_3$1O,
    _hoisted_4$y
  ];
  function _sfc_render$1S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$8, 14, _hoisted_1$1S);
  }
  var _IconLarkColor = /* @__PURE__ */ _export_sfc(_sfc_main$1S, [["render", _sfc_render$1S]]);
  const IconLarkColor = Object.assign(_IconLarkColor, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLarkColor.name, _IconLarkColor);
    }
  });
  const _sfc_main$1R = vue.defineComponent({
    name: "IconTiktokColor",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-tiktok-color`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1R = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1R = /* @__PURE__ */ vue.createStaticVNode('<path d="M928 310.4v148.8c-8 0-17.6 1.6-27.2 1.6-72 0-139.2-27.2-190.4-70.4v316.8c0 64-20.8 124.8-57.6 172.8-51.2 68.8-134.4 115.2-228.8 115.2-102.4 0-192-54.4-241.6-134.4 51.2 48 120 78.4 195.2 78.4 92.8 0 176-44.8 227.2-115.2 35.2-48 57.6-107.2 57.6-172.8V332.8c51.2 44.8 116.8 70.4 190.4 70.4 9.6 0 17.6 0 27.2-1.6v-96c14.4 3.2 27.2 4.8 41.6 4.8h6.4z" fill="#FF004F"></path><path d="M464 420.8v164.8c-11.2-3.2-24-4.8-35.2-4.8-70.4 0-128 59.2-128 131.2 0 16 3.2 30.4 8 44.8-32-24-54.4-62.4-54.4-105.6 0-72 57.6-131.2 128-131.2 12.8 0 24 1.6 35.2 4.8V419.2h9.6c12.8 0 25.6 0 36.8 1.6zM734.4 192c-28.8-25.6-49.6-60.8-60.8-97.6H712v22.4c3.2 25.6 11.2 51.2 22.4 75.2z" fill="#FF004F"></path><path d="M881.6 307.2v96c-8 1.6-17.6 1.6-27.2 1.6-72 0-139.2-27.2-190.4-70.4v316.8c0 64-20.8 124.8-57.6 172.8-52.8 70.4-134.4 115.2-227.2 115.2-75.2 0-144-30.4-195.2-78.4-27.2-44.8-43.2-96-43.2-152 0-155.2 123.2-281.6 276.8-286.4V528c-11.2-3.2-24-4.8-35.2-4.8-70.4 0-128 59.2-128 131.2 0 43.2 20.8 83.2 54.4 105.6 17.6 49.6 65.6 86.4 120 86.4 70.4 0 128-59.2 128-131.2V94.4h116.8c11.2 38.4 32 72 60.8 97.6 28.8 57.6 83.2 100.8 147.2 115.2z"></path><path d="M417.6 364.8v54.4C264 424 140.8 550.4 140.8 705.6c0 56 16 107.2 43.2 152-54.4-52.8-88-126.4-88-209.6 0-158.4 128-286.4 284.8-286.4 12.8 0 25.6 1.6 36.8 3.2z" fill="#00F7EF"></path><path d="M673.6 94.4H556.8V712c0 72-57.6 131.2-128 131.2-56 0-102.4-35.2-120-86.4 20.8 14.4 46.4 24 73.6 24 70.4 0 128-57.6 128-129.6V32h155.2v3.2c0 6.4 0 12.8 1.6 19.2 0 12.8 3.2 27.2 6.4 40zm208 153.6v57.6c-64-12.8-118.4-56-148.8-113.6 40 36.8 91.2 57.6 148.8 56z" fill="#00F7EF"></path>', 5);
  const _hoisted_7$2 = [
    _hoisted_2$1R
  ];
  function _sfc_render$1R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_7$2, 14, _hoisted_1$1R);
  }
  var _IconTiktokColor = /* @__PURE__ */ _export_sfc(_sfc_main$1R, [["render", _sfc_render$1R]]);
  const IconTiktokColor = Object.assign(_IconTiktokColor, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTiktokColor.name, _IconTiktokColor);
    }
  });
  const _sfc_main$1Q = vue.defineComponent({
    name: "IconXiguaColor",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-xigua-color`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1Q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1Q = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M381.968 38.684c-202.85 54.614-351.085 232.757-371.89 446.01C-.326 590.018 28.281 630.328 140.108 668.037c104.026 33.808 176.843 101.425 209.351 189.846 40.31 115.729 44.211 122.23 91.023 144.336 40.31 19.504 58.514 19.504 131.332 7.802 211.951-36.41 362.788-171.642 416.101-374.492C1059.434 368.965 882.59 90.697 605.623 32.183 517.2 13.978 470.39 15.279 381.968 38.684zm176.843 322.48c158.64 74.117 201.55 158.638 119.63 237.957-102.725 97.524-240.56 136.534-291.271 80.62-20.806-23.406-24.707-48.112-24.707-161.24s3.901-137.833 24.707-161.239c32.507-36.409 88.421-35.108 171.641 3.901z",
    fill: "#FE163E"
  }, null, -1);
  const _hoisted_3$1N = [
    _hoisted_2$1Q
  ];
  function _sfc_render$1Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1N, 14, _hoisted_1$1Q);
  }
  var _IconXiguaColor = /* @__PURE__ */ _export_sfc(_sfc_main$1Q, [["render", _sfc_render$1Q]]);
  const IconXiguaColor = Object.assign(_IconXiguaColor, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconXiguaColor.name, _IconXiguaColor);
    }
  });
  const _sfc_main$1P = vue.defineComponent({
    name: "IconFaceBookCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-faceBook-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1P = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1P = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 1C11.29 1 1 11.29 1 24s10.29 23 23 23 23-10.29 23-23S36.71 1 24 1Zm6.172 22.88H26.18v14.404h-5.931V23.88H17.22v-4.962h3.027V15.89c0-3.993 1.695-6.414 6.414-6.414h3.993v4.962h-2.421c-1.815 0-1.936.727-1.936 1.936v2.421h4.478l-.605 5.084h.001Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1M = [
    _hoisted_2$1P
  ];
  function _sfc_render$1P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1M, 14, _hoisted_1$1P);
  }
  var _IconFaceBookCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$1P, [["render", _sfc_render$1P]]);
  const IconFaceBookCircleFill = Object.assign(_IconFaceBookCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFaceBookCircleFill.name, _IconFaceBookCircleFill);
    }
  });
  const _sfc_main$1O = vue.defineComponent({
    name: "IconFacebookSquareFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-facebook-square-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1O = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1O = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M43.125 2.475c.6 0 1.2.225 1.688.713.524.487.75 1.012.75 1.612v38.363c0 .6-.263 1.2-.75 1.612-.526.488-1.088.713-1.688.713H32.138V28.913h5.625l.825-6.563h-6.45v-4.275c0-2.137 1.087-3.225 3.3-3.225h3.374V9.263c-1.2-.225-2.85-.338-5.024-.338-2.513 0-4.5.75-6.038 2.25-1.538 1.5-2.288 3.675-2.288 6.375v4.8h-5.625v6.563h5.625v16.575h-20.7c-.6 0-1.2-.225-1.612-.713-.487-.487-.712-1.012-.712-1.612V4.8c0-.6.224-1.2.712-1.612.488-.488 1.012-.713 1.613-.713h38.362Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1L = [
    _hoisted_2$1O
  ];
  function _sfc_render$1O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1L, 14, _hoisted_1$1O);
  }
  var _IconFacebookSquareFill = /* @__PURE__ */ _export_sfc(_sfc_main$1O, [["render", _sfc_render$1O]]);
  const IconFacebookSquareFill = Object.assign(_IconFacebookSquareFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFacebookSquareFill.name, _IconFacebookSquareFill);
    }
  });
  const _sfc_main$1N = vue.defineComponent({
    name: "IconGoogleCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-google-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1N = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1N = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M32.571 33.526c-2.084 1.92-4.927 3.05-8.322 3.05a12.568 12.568 0 0 1-12.572-12.577A12.58 12.58 0 0 1 24.25 11.416a12.103 12.103 0 0 1 8.414 3.277L29.061 18.3a6.787 6.787 0 0 0-4.807-1.88c-3.277 0-6.045 2.213-7.037 5.186a7.567 7.567 0 0 0-.394 2.392c0 .833.144 1.638.394 2.391.992 2.973 3.763 5.187 7.032 5.187 1.696 0 3.133-.449 4.254-1.202a5.778 5.778 0 0 0 2.513-3.8h-6.767V21.71h11.844c.15.825.227 1.682.227 2.57 0 3.835-1.371 7.055-3.749 9.246ZM24 1A23 23 0 1 0 24 47 23 23 0 0 0 24 1Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1K = [
    _hoisted_2$1N
  ];
  function _sfc_render$1N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1K, 14, _hoisted_1$1N);
  }
  var _IconGoogleCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$1N, [["render", _sfc_render$1N]]);
  const IconGoogleCircleFill = Object.assign(_IconGoogleCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconGoogleCircleFill.name, _IconGoogleCircleFill);
    }
  });
  const _sfc_main$1M = vue.defineComponent({
    name: "IconQqCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-qq-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1M = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1M = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24.007 1C11.281 1 1 11.281 1 24.007c0 13.23 11.216 23.87 24.733 22.936 11.288-.791 20.49-9.994 21.21-21.354C47.877 12.144 37.237 1 24.007 1Zm11.36 29.262s-.79 2.23-2.3 4.242c0 0 2.66.935 2.444 3.236 0 0 .072 2.66-5.68 2.444 0 0-4.026-.287-5.248-2.013h-1.079c-1.222 1.726-5.248 2.013-5.248 2.013-5.752.216-5.68-2.444-5.68-2.444-.216-2.373 2.444-3.236 2.444-3.236-1.51-2.013-2.3-4.241-2.3-4.241-3.596 5.895-3.236-.791-3.236-.791.647-3.955 3.523-6.543 3.523-6.543-.431-3.595 1.078-4.242 1.078-4.242.216-11.072 9.707-10.929 9.922-10.929.216 0 9.707-.215 9.994 10.929 0 0 1.51.647 1.079 4.242 0 0 2.876 2.588 3.523 6.543 0 0 .36 6.686-3.236.79Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1J = [
    _hoisted_2$1M
  ];
  function _sfc_render$1M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1J, 14, _hoisted_1$1M);
  }
  var _IconQqCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$1M, [["render", _sfc_render$1M]]);
  const IconQqCircleFill = Object.assign(_IconQqCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQqCircleFill.name, _IconQqCircleFill);
    }
  });
  const _sfc_main$1L = vue.defineComponent({
    name: "IconTwitterCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-twitter-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1L = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1L = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 1C11.296 1 1 11.297 1 24s10.296 23 23 23c12.703 0 23-10.297 23-23S36.703 1 24 1Zm11.698 18.592c-.13 9.818-6.408 16.542-15.78 16.965-3.864.176-6.664-1.072-9.1-2.62 2.855.456 6.397-.686 8.292-2.307-2.8-.273-4.458-1.698-5.233-3.991.808.14 1.66.103 2.43-.06-2.527-.846-4.331-2.407-4.424-5.68.709.323 1.448.626 2.43.686-1.891-1.075-3.29-5.007-1.688-7.607 2.806 3.076 6.182 5.586 11.724 5.926-1.391-5.949 6.492-9.175 9.791-5.177 1.395-.27 2.53-.799 3.622-1.374-.45 1.381-1.315 2.347-2.37 3.119 1.158-.157 2.184-.44 3.06-.872-.544 1.128-1.732 2.14-2.754 2.992Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1I = [
    _hoisted_2$1L
  ];
  function _sfc_render$1L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1I, 14, _hoisted_1$1L);
  }
  var _IconTwitterCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$1L, [["render", _sfc_render$1L]]);
  const IconTwitterCircleFill = Object.assign(_IconTwitterCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTwitterCircleFill.name, _IconTwitterCircleFill);
    }
  });
  const _sfc_main$1K = vue.defineComponent({
    name: "IconWeiboCircleFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-weibo-circle-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1K = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1K = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M24 47a23 23 0 1 1 23-23 22.988 22.988 0 0 1-23 23Zm1.276-26.994c-.544.063-2.259 1.171-1.297-1.108C25 15 20.235 15.293 17.874 16.16A23.776 23.776 0 0 0 7.649 27.283c-2.007 6.419 5.018 10.329 10.246 11.123 5.227.795 13.068-.502 16.622-4.85 2.635-3.179 3.137-7.507-1.84-8.761-1.651-.398-.69-1.088-.271-2.259a2.775 2.775 0 0 0-2.175-3.24 2.092 2.092 0 0 0-.335-.042 12.468 12.468 0 0 0-4.62.752Zm7.004-3.889a2.326 2.326 0 0 0-1.903.544c-.377.339-.418 1.338.962 1.652.458.021.913.084 1.36.188a1.836 1.836 0 0 1 1.233 2.07c-.21 1.924.878 2.237 1.652 1.714a1.647 1.647 0 0 0 .627-1.338 4.117 4.117 0 0 0-3.325-4.767c-.042-.008-.61-.063-.606-.063Zm7.423.084a8.408 8.408 0 0 0-6.838-4.6c-1.129-.126-3.512-.397-3.784 1.15a1.17 1.17 0 0 0 .857 1.4c.042 0 .084.022.126.022.523.02 1.048 0 1.568-.063a6.481 6.481 0 0 1 6.524 6.44c0 .3-.02.601-.063.9-.063.355-.105.71-.147 1.066A1.277 1.277 0 0 0 38.93 24a1.255 1.255 0 0 0 1.338-.648c.71-2.373.501-4.926-.585-7.151h.02ZM21.616 36.44c-5.457.69-10.245-1.673-10.684-5.27-.44-3.595 3.575-7.066 9.033-7.756 5.457-.69 10.245 1.672 10.705 5.269.46 3.596-3.617 7.088-9.075 7.757h.021Zm-1.484-10.266a5.181 5.181 0 0 0-5.353 4.913 4.662 4.662 0 0 0 4.935 4.391c.14-.004.28-.017.418-.042a5.503 5.503 0 0 0 5.185-5.143 4.472 4.472 0 0 0-4.746-4.182l-.44.063Zm1.003 4.244a.669.669 0 0 1-.773-.544v-.083a.76.76 0 0 1 .774-.711.642.642 0 0 1 .731.544.076.076 0 0 1 .021.062.807.807 0 0 1-.753.732Zm-2.78 2.781a1.65 1.65 0 0 1-1.861-1.422.266.266 0 0 1-.021-.125 1.844 1.844 0 0 1 1.882-1.736 1.562 1.562 0 0 1 1.819 1.297.46.46 0 0 1 .02.167 1.96 1.96 0 0 1-1.84 1.819Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1H = [
    _hoisted_2$1K
  ];
  function _sfc_render$1K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1H, 14, _hoisted_1$1K);
  }
  var _IconWeiboCircleFill = /* @__PURE__ */ _export_sfc(_sfc_main$1K, [["render", _sfc_render$1K]]);
  const IconWeiboCircleFill = Object.assign(_IconWeiboCircleFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconWeiboCircleFill.name, _IconWeiboCircleFill);
    }
  });
  const _sfc_main$1J = vue.defineComponent({
    name: "IconAlipayCircle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-alipay-circle`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1J = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1J = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M10.8 27.025c-.566.456-1.174 1.122-1.35 1.968-.24 1.156-.05 2.604 1.065 3.739 1.352 1.376 3.405 1.753 4.292 1.818 2.41.174 4.978-1.02 6.913-2.384.759-.535 2.058-1.61 3.3-3.268-2.783-1.437-6.257-3.026-9.97-2.87-1.898.079-3.256.472-4.25.997Zm35.29 6.354A23.872 23.872 0 0 0 48 24C48 10.767 37.234 0 24 0S0 10.767 0 24c0 13.234 10.766 24 24 24 7.987 0 15.07-3.925 19.436-9.943a2688.801 2688.801 0 0 0-15.11-7.467c-1.999 2.277-4.953 4.56-8.29 5.554-2.097.623-3.986.86-5.963.457-1.956-.4-3.397-1.317-4.237-2.235-.428-.469-.92-1.064-1.275-1.773.033.09.056.143.056.143s-.204-.353-.361-.914a4.03 4.03 0 0 1-.157-.85 4.383 4.383 0 0 1-.009-.612 4.409 4.409 0 0 1 .078-1.128c.197-.948.601-2.054 1.649-3.08 2.3-2.251 5.38-2.372 6.976-2.363 2.363.014 6.47 1.048 9.928 2.27.958-2.04 1.573-4.221 1.97-5.676H14.31v-1.555h7.384V15.72h-8.938v-1.555h8.938v-3.108c0-.427.084-.778.777-.778h3.498v3.886h9.717v1.555H25.97v3.11h7.773s-.78 4.35-3.221 8.64c5.416 1.934 13.037 4.914 15.568 5.91Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1G = [
    _hoisted_2$1J
  ];
  function _sfc_render$1J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1G, 14, _hoisted_1$1J);
  }
  var _IconAlipayCircle = /* @__PURE__ */ _export_sfc(_sfc_main$1J, [["render", _sfc_render$1J]]);
  const IconAlipayCircle = Object.assign(_IconAlipayCircle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconAlipayCircle.name, _IconAlipayCircle);
    }
  });
  const _sfc_main$1I = vue.defineComponent({
    name: "IconCodeSandbox",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-code-sandbox`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1I = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1I = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "m25.002 1.6 17.9 10.3c.6.4 1 1 1 1.7v20.7c0 .7-.4 1.4-1 1.7l-17.9 10.4c-.6.4-1.4.4-2 0l-17.9-10.3c-.6-.4-1-1-1-1.7V13.7c0-.7.4-1.4 1-1.7l17.9-10.4c.6-.4 1.4-.4 2 0Zm13.5 12.4-7.9-4.5-6.6 4.5-6.5-4-7.3 4.3 13.8 8.7 14.5-9Zm-16.5 26.4V26.3l-14-8.9v7.9l8 5.5V37l6 3.4Zm4 0 6-3.5v-5.2l8-5.5v-8.9l-14 8.9v14.2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1F = [
    _hoisted_2$1I
  ];
  function _sfc_render$1I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1F, 14, _hoisted_1$1I);
  }
  var _IconCodeSandbox = /* @__PURE__ */ _export_sfc(_sfc_main$1I, [["render", _sfc_render$1I]]);
  const IconCodeSandbox = Object.assign(_IconCodeSandbox, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCodeSandbox.name, _IconCodeSandbox);
    }
  });
  const _sfc_main$1H = vue.defineComponent({
    name: "IconCodepen",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-codepen`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1H = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1H = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M45 15.7v17.1L24.5 44.7c-.3.2-.7.2-1 0l-20-11.5c-.3-.2-.5-.5-.5-.9V15.7c0-.4.2-.7.5-.9l20-11.6c.3-.2.7-.2 1 0l20 11.6c.3.2.5.5.5.9ZM26 9v9.8l5.5 3.2 8.5-4.9L26 9Zm-4 0L8 17.1l8.4 4.9 5.6-3.2V9Zm0 21.2L16.5 27 9 31.4 22 39v-8.8Zm17 1.2L31.4 27 26 30.2V39l13-7.6Zm2-3.4v-6l-5 3 5 3Zm-29-3-5-3v6l5-3Zm8 0 4 2 4-2-4-2-4 2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1E = [
    _hoisted_2$1H
  ];
  function _sfc_render$1H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1E, 14, _hoisted_1$1H);
  }
  var _IconCodepen = /* @__PURE__ */ _export_sfc(_sfc_main$1H, [["render", _sfc_render$1H]]);
  const IconCodepen = Object.assign(_IconCodepen, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCodepen.name, _IconCodepen);
    }
  });
  const _sfc_main$1G = vue.defineComponent({
    name: "IconFacebook",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-facebook`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1G = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1G = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M35.184 15.727 34.312 24h-6.613v24h-9.933V24h-4.95v-8.273h4.95v-4.98C17.766 4.016 20.564 0 28.518 0h6.61v8.273H30.99c-3.086 0-3.292 1.166-3.292 3.32v4.134h7.485Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1D = [
    _hoisted_2$1G
  ];
  function _sfc_render$1G(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1D, 14, _hoisted_1$1G);
  }
  var _IconFacebook = /* @__PURE__ */ _export_sfc(_sfc_main$1G, [["render", _sfc_render$1G]]);
  const IconFacebook = Object.assign(_IconFacebook, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFacebook.name, _IconFacebook);
    }
  });
  const _sfc_main$1F = vue.defineComponent({
    name: "IconGithub",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-github`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1F = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1F = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M.056 24.618c0 10.454 6.7 19.344 16.038 22.608 1.259.32 1.067-.582 1.067-1.19v-4.148c-7.265.853-7.553-3.957-8.043-4.758-.987-1.686-3.312-2.112-2.62-2.912 1.654-.853 3.34.213 5.291 3.1 1.413 2.09 4.166 1.738 5.562 1.385a6.777 6.777 0 0 1 1.856-3.253C11.687 34.112 8.55 29.519 8.55 24.057c0-2.646.874-5.082 2.586-7.045-1.088-3.243.102-6.01.26-6.422 3.11-.282 6.337 2.225 6.587 2.421 1.766-.474 3.782-.73 6.038-.73 2.266 0 4.293.26 6.069.74.603-.458 3.6-2.608 6.49-2.345.155.41 1.317 3.12.294 6.315 1.734 1.968 2.62 4.422 2.62 7.077 0 5.472-3.158 10.07-10.699 11.397a6.82 6.82 0 0 1 2.037 4.875v6.02c.042.48 0 .96.806.96 9.477-3.194 16.299-12.15 16.299-22.697C47.938 11.396 37.218.68 23.996.68 10.77.675.055 11.391.055 24.617l.001.001Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1C = [
    _hoisted_2$1F
  ];
  function _sfc_render$1F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1C, 14, _hoisted_1$1F);
  }
  var _IconGithub = /* @__PURE__ */ _export_sfc(_sfc_main$1F, [["render", _sfc_render$1F]]);
  const IconGithub = Object.assign(_IconGithub, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconGithub.name, _IconGithub);
    }
  });
  const _sfc_main$1E = vue.defineComponent({
    name: "IconGitlab",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-gitlab`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1E = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1E = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M45.53 26.154 39.694 6.289v-.005c-.407-1.227-1.377-1.955-2.587-1.955-1.254 0-2.277.723-2.663 1.885L30.62 17.625H17.4l-3.825-11.41c-.386-1.163-1.41-1.886-2.663-1.886-1.237 0-2.276.792-2.592 1.96l-5.83 19.865a2.047 2.047 0 0 0 .724 2.18l19.741 14.807c.14.193.332.338.557.418l.461.343.455-.343c.263-.091.483-.252.638-.477L44.8 28.33a2.03 2.03 0 0 0 .728-2.175ZM36.84 6.932c.053-.096.155-.102.187-.102.06 0 .134.016.182.161l3.183 10.704H33.24l3.6-10.763Zm-26.11.054c.047-.14.122-.156.181-.156.145 0 .156.006.183.091L14.699 17.7H7.633l3.096-10.714ZM5.076 26.502l1.511-5.213 10.843 14.475-12.354-9.262Zm3.96-6.236h6.54l4.865 15.23-11.406-15.23Zm15.01 17.877-5.743-17.877h11.48l-5.737 17.877Zm8.459-17.877h6.402L27.642 35.31l4.864-15.043Zm-2.18 15.745L41.43 21.187l1.58 5.315-12.685 9.509Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1B = [
    _hoisted_2$1E
  ];
  function _sfc_render$1E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1B, 14, _hoisted_1$1E);
  }
  var _IconGitlab = /* @__PURE__ */ _export_sfc(_sfc_main$1E, [["render", _sfc_render$1E]]);
  const IconGitlab = Object.assign(_IconGitlab, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconGitlab.name, _IconGitlab);
    }
  });
  const _sfc_main$1D = vue.defineComponent({
    name: "IconGoogle",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-google`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1D = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1D = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M23.997 21.054h19.42a19.46 19.46 0 0 1 .321 3.428c0 3.875-.812 7.335-2.437 10.38-1.625 3.044-3.942 5.424-6.951 7.138-3.01 1.714-6.46 2.572-10.353 2.572-2.803 0-5.473-.54-8.009-1.621-2.535-1.08-4.723-2.54-6.562-4.38-1.84-1.839-3.3-4.026-4.38-6.562A20.223 20.223 0 0 1 3.426 24c0-2.803.54-5.473 1.62-8.009 1.08-2.535 2.54-4.723 4.38-6.562 1.84-1.84 4.027-3.3 6.562-4.38a20.223 20.223 0 0 1 8.01-1.62c5.356 0 9.955 1.794 13.794 5.384l-5.598 5.384c-2.197-2.125-4.929-3.188-8.197-3.188-2.303 0-4.433.58-6.388 1.741a12.83 12.83 0 0 0-4.648 4.728c-1.142 1.99-1.714 4.165-1.714 6.522s.572 4.531 1.714 6.523a12.83 12.83 0 0 0 4.648 4.727c1.955 1.16 4.085 1.741 6.388 1.741 1.554 0 2.982-.214 4.286-.643 1.303-.428 2.375-.964 3.214-1.607a11.63 11.63 0 0 0 2.197-2.196c.625-.822 1.084-1.598 1.38-2.33a9.84 9.84 0 0 0 .602-2.09H23.997v-7.071Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1A = [
    _hoisted_2$1D
  ];
  function _sfc_render$1D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1A, 14, _hoisted_1$1D);
  }
  var _IconGoogle = /* @__PURE__ */ _export_sfc(_sfc_main$1D, [["render", _sfc_render$1D]]);
  const IconGoogle = Object.assign(_IconGoogle, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconGoogle.name, _IconGoogle);
    }
  });
  const _sfc_main$1C = vue.defineComponent({
    name: "IconQqZone",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-qq-zone`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1C = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1C = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M25.1 3.9c.2.1.4.3.5.5l6.8 10L44 17.8c1.1.3 1.7 1.4 1.4 2.5-.1.2-.2.5-.3.7l-7.4 9.5.4 12c0 1.1-.8 2-1.9 2.1-.2 0-.5 0-.7-.1L24 40.4l-11.3 4.1c-1 .4-2.2-.2-2.6-1.2-.1-.3-.1-.6-.1-.8l.4-12L3 20.9c-.7-.9-.5-2.1.4-2.8.2-.2.4-.3.7-.3l11.6-3.4 6.8-10c.5-.9 1.7-1.1 2.6-.5ZM24 9.1l-5.9 8.7-10.1 3 6.5 8.3-.3 10.5 9.9-3.6 9.9 3.6-.3-10.5 6.5-8.3-10.1-3L24 9.1Zm5 11.5c.8 0 1.5.5 1.8 1.2.3.7.1 1.6-.5 2.1L24 29.6h5c1 0 1.9.9 1.9 1.9 0 1-.9 1.9-1.9 1.9H19c-.8 0-1.5-.5-1.8-1.2-.3-.7-.1-1.6.5-2.1l6.3-5.7h-5c-1 0-1.9-.9-1.9-1.9 0-1 .9-1.9 1.9-1.9h10Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1z = [
    _hoisted_2$1C
  ];
  function _sfc_render$1C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1z, 14, _hoisted_1$1C);
  }
  var _IconQqZone = /* @__PURE__ */ _export_sfc(_sfc_main$1C, [["render", _sfc_render$1C]]);
  const IconQqZone = Object.assign(_IconQqZone, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQqZone.name, _IconQqZone);
    }
  });
  const _sfc_main$1B = vue.defineComponent({
    name: "IconQq",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-qq`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1B = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1B = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M7.85 32.825s1.153 3.136 3.264 5.955c0 0-3.779 1.281-3.458 4.61 0 0-.128 3.714 8.069 3.458 0 0 5.764-.45 7.494-2.88h1.52c1.73 2.432 7.494 2.88 7.494 2.88 8.193.256 8.068-3.457 8.068-3.457.318-3.33-3.458-4.611-3.458-4.611 2.11-2.82 3.264-5.955 3.264-5.955 5.122 8.259 4.611-1.154 4.611-1.154-.96-5.57-4.995-9.221-4.995-9.221.576-5.058-1.537-5.955-1.537-5.955C37.742.844 24.26 1.12 23.978 1.126 23.694 1.12 10.21.846 9.767 16.495c0 0-2.113.897-1.537 5.955 0 0-4.034 3.65-4.995 9.221.005 0-.51 9.413 4.615 1.154Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1y = [
    _hoisted_2$1B
  ];
  function _sfc_render$1B(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1y, 14, _hoisted_1$1B);
  }
  var _IconQq = /* @__PURE__ */ _export_sfc(_sfc_main$1B, [["render", _sfc_render$1B]]);
  const IconQq = Object.assign(_IconQq, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQq.name, _IconQq);
    }
  });
  const _sfc_main$1A = vue.defineComponent({
    name: "IconTwitter",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-twitter`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1A = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1A = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M43.277 13.575c0 16.613-10.912 28.575-26.962 29.1-6.788.525-11.438-1.537-15.6-4.65 4.65.525 10.912-1.012 13.987-4.163-4.65 0-7.275-2.625-8.812-6.187h4.162C5.89 26.1 2.74 22.987 2.74 17.812c1.012.525 2.062 1.013 4.162 1.013-3.637-2.063-5.7-8.813-3.112-12.975 4.65 5.175 10.35 9.863 19.762 10.35C20.927 5.85 34.465.6 40.165 7.388c2.625-.525 4.162-1.538 6.187-2.625-.525 2.625-2.062 4.162-4.162 5.175 2.062 0 3.637-.525 5.175-1.538-.488 2.063-2.55 4.162-4.088 5.175Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1x = [
    _hoisted_2$1A
  ];
  function _sfc_render$1A(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1x, 14, _hoisted_1$1A);
  }
  var _IconTwitter = /* @__PURE__ */ _export_sfc(_sfc_main$1A, [["render", _sfc_render$1A]]);
  const IconTwitter = Object.assign(_IconTwitter, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTwitter.name, _IconTwitter);
    }
  });
  const _sfc_main$1z = vue.defineComponent({
    name: "IconWechat",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-wechat`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1z = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M32.09 16.362a14.39 14.39 0 0 0-6.927 1.716 13.087 13.087 0 0 0-5.008 4.676 11.936 11.936 0 0 0-1.856 6.473c.01 1.137.185 2.273.517 3.36h-1.505a26.653 26.653 0 0 1-4.766-.593l-.925-.166-5.665 2.93 1.55-4.848C3.179 26.783 1.018 23.077 1 18.792a11.951 11.951 0 0 1 2.188-6.927 14.943 14.943 0 0 1 5.938-5.027 18.579 18.579 0 0 1 8.248-1.837A18.82 18.82 0 0 1 24.8 6.506a16.863 16.863 0 0 1 5.893 4.128 11.963 11.963 0 0 1 2.992 5.817 17.922 17.922 0 0 0-1.595-.09Zm-20.152-.414a2.167 2.167 0 0 0 1.505-.471c.405-.378.62-.908.593-1.46a1.881 1.881 0 0 0-.592-1.46 2.025 2.025 0 0 0-1.506-.535 2.778 2.778 0 0 0-1.67.535c-.454.323-.728.849-.728 1.401a1.708 1.708 0 0 0 .727 1.523 2.925 2.925 0 0 0 1.671.467ZM47 28.99a9.573 9.573 0 0 1-1.59 5.193c-1.128 1.6-2.52 3-4.129 4.128l1.258 4.129-4.51-2.413h-.243a20.758 20.758 0 0 1-4.6.76 15.538 15.538 0 0 1-7.03-1.59 13.089 13.089 0 0 1-5.008-4.313 10.501 10.501 0 0 1-1.838-5.939 10.29 10.29 0 0 1 1.838-5.92c1.266-1.847 3-3.334 5.008-4.313a15.579 15.579 0 0 1 7.03-1.59 14.919 14.919 0 0 1 6.761 1.59 13.286 13.286 0 0 1 5.09 4.312 10.004 10.004 0 0 1 1.94 5.966H47ZM23.407 11.955a2.77 2.77 0 0 0-1.747.534 1.65 1.65 0 0 0-.76 1.46c-.017.584.27 1.146.76 1.46.498.36 1.1.544 1.716.535a2.083 2.083 0 0 0 1.505-.472c.368-.404.561-.925.534-1.46a1.834 1.834 0 0 0-.534-1.532 1.887 1.887 0 0 0-1.532-.534h.063v.009h-.005Zm5.256 15.03a2.016 2.016 0 0 0 1.46-.498c.332-.288.525-.7.534-1.137a1.612 1.612 0 0 0-.534-1.136 2.062 2.062 0 0 0-1.46-.499 1.58 1.58 0 0 0-1.092.499c-.305.296-.49.71-.498 1.136.009.427.184.84.498 1.137.288.305.679.48 1.092.499Zm8.953 0a2.016 2.016 0 0 0 1.46-.498c.332-.288.525-.7.534-1.137a1.558 1.558 0 0 0-.593-1.136 2.12 2.12 0 0 0-1.401-.499 1.493 1.493 0 0 0-1.092.499c-.305.296-.49.71-.498 1.136.009.427.184.84.498 1.137.279.305.674.49 1.092.499Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1w = [
    _hoisted_2$1z
  ];
  function _sfc_render$1z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1w, 14, _hoisted_1$1z);
  }
  var _IconWechat = /* @__PURE__ */ _export_sfc(_sfc_main$1z, [["render", _sfc_render$1z]]);
  const IconWechat = Object.assign(_IconWechat, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconWechat.name, _IconWechat);
    }
  });
  const _sfc_main$1y = vue.defineComponent({
    name: "IconWechatpay",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-wechatpay`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1y = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M17.514 29.52a1.502 1.502 0 0 1-.715.165c-.608 0-1.104-.33-1.38-.826l-.113-.219-4.357-9.493c-.054-.112-.054-.219-.054-.33 0-.444.331-.774.774-.774.165 0 .33.053.496.165l5.13 3.643c.384.218.827.384 1.323.384.277 0 .55-.054.827-.166l24.058-10.704C39.2 6.288 32.085 2.976 24.026 2.976 10.896 2.976.191 11.861.191 22.837c0 5.958 3.2 11.366 8.22 15.008.383.278.66.774.66 1.27 0 .165-.053.33-.112.496-.384 1.488-1.05 3.92-1.05 4.026a2.025 2.025 0 0 0-.112.608c0 .443.33.774.773.774.165 0 .33-.054.443-.166l5.184-3.034c.384-.219.826-.384 1.27-.384.218 0 .495.053.714.112a27.712 27.712 0 0 0 7.781 1.104c13.13 0 23.835-8.886 23.835-19.862 0-3.312-.992-6.453-2.704-9.216L17.679 29.408l-.165.112Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1v = [
    _hoisted_2$1y
  ];
  function _sfc_render$1y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1v, 14, _hoisted_1$1y);
  }
  var _IconWechatpay = /* @__PURE__ */ _export_sfc(_sfc_main$1y, [["render", _sfc_render$1y]]);
  const IconWechatpay = Object.assign(_IconWechatpay, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconWechatpay.name, _IconWechatpay);
    }
  });
  const _sfc_main$1x = vue.defineComponent({
    name: "IconWeibo",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-weibo`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1x = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1x = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M31.82 5.6c-1.445.635-1.776 2.144-.727 3.192.515.516.993.608 3.11.608 2.952 0 4.94.781 6.448 2.53 1.84 2.079 2.052 2.714 2.052 6.513 0 3.377 0 3.441.782 3.892 1.812 1.021 3.017-.24 3.44-3.616.544-4.397-2.078-9.531-6.025-11.877-2.595-1.509-7.029-2.116-9.08-1.242Zm-14.831 5.612c-3.376 1.205-6.633 3.524-10.13 7.268-8.288 8.804-7.746 17.186 1.39 21.648 9.494 4.636 22.282 3.1 29.247-3.533 5.216-4.94 4.581-11.16-1.353-13.267-1.058-.358-1.389-.634-1.232-.966.542-1.324.726-2.86.423-3.772-.939-2.86-4.343-3.523-9.403-1.812l-2.024.69.184-2.024c.212-2.383-.303-3.68-1.72-4.398-1.187-.588-3.45-.524-5.382.166Zm8.381 11.666c4.49 1.232 7.231 3.946 7.231 7.176 0 3.588-3.192 6.817-8.38 8.528-2.77.902-7.931 1.086-10.461.396-4.793-1.353-7.507-4.012-7.507-7.416 0-1.867.81-3.496 2.594-5.152 1.656-1.564 2.926-2.318 5.364-3.137 3.689-1.242 7.636-1.389 11.16-.395Zm-9.494 2.925c-3.045 1.417-4.674 3.588-4.674 6.302 0 2.475 1.086 4.159 3.469 5.428 1.84.994 5.216.902 7.268-.147 2.622-1.39 4.342-3.947 4.342-6.45-.028-2.05-1.84-4.489-3.984-5.363-1.72-.736-4.609-.616-6.421.23Zm2.199 5.667c.211.212.358.727.358 1.178 0 1.509-2.53 2.742-3.56 1.72-.57-.57-.423-1.987.24-2.65.662-.662 2.391-.818 2.962-.248Zm14.26-19.688c-1.39 1.39-.451 3.046 1.748 3.046 1.895 0 2.741.966 2.741 3.137 0 1.352.12 1.748.663 2.107 1.628 1.15 2.953-.12 2.953-2.806 0-3.285-2.355-5.76-5.695-5.999-1.509-.12-1.868-.027-2.41.515Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1u = [
    _hoisted_2$1x
  ];
  function _sfc_render$1x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1u, 14, _hoisted_1$1x);
  }
  var _IconWeibo = /* @__PURE__ */ _export_sfc(_sfc_main$1x, [["render", _sfc_render$1x]]);
  const IconWeibo = Object.assign(_IconWeibo, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconWeibo.name, _IconWeibo);
    }
  });
  const _sfc_main$1w = vue.defineComponent({
    name: "IconChineseFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-chinese-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1w = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1w = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M22 21h-5v4.094h5V21ZM26 25.094V21h5v4.094h-5Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1t = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 4C12.954 4 4 12.954 4 24s8.954 20 20 20 20-8.954 20-20S35.046 4 24 4Zm2 13v-5h-4v5h-6.5a2.5 2.5 0 0 0-2.5 2.5v7.094a2.5 2.5 0 0 0 2.5 2.5H22V36h4v-6.906h6.5a2.5 2.5 0 0 0 2.5-2.5V19.5a2.5 2.5 0 0 0-2.5-2.5H26Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$x = [
    _hoisted_2$1w,
    _hoisted_3$1t
  ];
  function _sfc_render$1w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$x, 14, _hoisted_1$1w);
  }
  var _IconChineseFill = /* @__PURE__ */ _export_sfc(_sfc_main$1w, [["render", _sfc_render$1w]]);
  const IconChineseFill = Object.assign(_IconChineseFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconChineseFill.name, _IconChineseFill);
    }
  });
  const _sfc_main$1v = vue.defineComponent({
    name: "IconEnglishFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-english-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1v = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1v = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M23.2 4C12.596 4 4 12.596 4 23.2v1.6C4 35.404 12.596 44 23.2 44h1.6C35.404 44 44 35.404 44 24.8v-1.6C44 12.596 35.404 4 24.8 4h-1.6Zm-9.086 10A2.114 2.114 0 0 0 12 16.114v15.772c0 1.167.947 2.114 2.114 2.114H25v-4h-9v-4h7.778v-4H16v-4h9v-4H14.114ZM32.4 22a5.4 5.4 0 0 0-5.4 5.4V34h4v-6.6a1.4 1.4 0 0 1 2.801 0V34h4v-6.6a5.4 5.4 0 0 0-5.4-5.4Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1s = [
    _hoisted_2$1v
  ];
  function _sfc_render$1v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1s, 14, _hoisted_1$1v);
  }
  var _IconEnglishFill = /* @__PURE__ */ _export_sfc(_sfc_main$1v, [["render", _sfc_render$1v]]);
  const IconEnglishFill = Object.assign(_IconEnglishFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEnglishFill.name, _IconEnglishFill);
    }
  });
  const _sfc_main$1u = vue.defineComponent({
    name: "IconFaceFrownFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-face-frown-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1u = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1u = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.322-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25ZM31.68 32.88a1.91 1.91 0 0 1-2.694-.176 6.66 6.66 0 0 0-5.026-2.28c-1.918 0-3.701.81-4.962 2.207a1.91 1.91 0 0 1-2.834-2.559 10.476 10.476 0 0 1 7.796-3.465c3.063 0 5.916 1.321 7.896 3.58a1.909 1.909 0 0 1-.176 2.693Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1r = [
    _hoisted_2$1u
  ];
  function _sfc_render$1u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1r, 14, _hoisted_1$1u);
  }
  var _IconFaceFrownFill = /* @__PURE__ */ _export_sfc(_sfc_main$1u, [["render", _sfc_render$1u]]);
  const IconFaceFrownFill = Object.assign(_IconFaceFrownFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFaceFrownFill.name, _IconFaceFrownFill);
    }
  });
  const _sfc_main$1t = vue.defineComponent({
    name: "IconFaceMehFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-face-meh-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1t = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1t = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.321-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25ZM15.999 30a2 2 0 0 1 2-2h12a2 2 0 1 1 0 4H18a2 2 0 0 1-2-2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1q = [
    _hoisted_2$1t
  ];
  function _sfc_render$1t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1q, 14, _hoisted_1$1t);
  }
  var _IconFaceMehFill = /* @__PURE__ */ _export_sfc(_sfc_main$1t, [["render", _sfc_render$1t]]);
  const IconFaceMehFill = Object.assign(_IconFaceMehFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFaceMehFill.name, _IconFaceMehFill);
    }
  });
  const _sfc_main$1s = vue.defineComponent({
    name: "IconFaceSmileFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-face-smile-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1s = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1s = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.321-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-.355 9.953a1.91 1.91 0 0 1 2.694.177 6.66 6.66 0 0 0 5.026 2.279c1.918 0 3.7-.81 4.961-2.206a1.91 1.91 0 0 1 2.834 2.558 10.476 10.476 0 0 1-7.795 3.466 10.477 10.477 0 0 1-7.897-3.58 1.91 1.91 0 0 1 .177-2.694Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1p = [
    _hoisted_2$1s
  ];
  function _sfc_render$1s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1p, 14, _hoisted_1$1s);
  }
  var _IconFaceSmileFill = /* @__PURE__ */ _export_sfc(_sfc_main$1s, [["render", _sfc_render$1s]]);
  const IconFaceSmileFill = Object.assign(_IconFaceSmileFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFaceSmileFill.name, _IconFaceSmileFill);
    }
  });
  const _sfc_main$1r = vue.defineComponent({
    name: "IconMoonFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-moon-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1r = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1r = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M42.108 29.769c.124-.387-.258-.736-.645-.613A17.99 17.99 0 0 1 36 30c-9.941 0-18-8.059-18-18 0-1.904.296-3.74.844-5.463.123-.387-.226-.768-.613-.645C10.558 8.334 5 15.518 5 24c0 10.493 8.507 19 19 19 8.482 0 15.666-5.558 18.108-13.231Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1o = [
    _hoisted_2$1r
  ];
  function _sfc_render$1r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1o, 14, _hoisted_1$1r);
  }
  var _IconMoonFill = /* @__PURE__ */ _export_sfc(_sfc_main$1r, [["render", _sfc_render$1r]]);
  const IconMoonFill = Object.assign(_IconMoonFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMoonFill.name, _IconMoonFill);
    }
  });
  const _sfc_main$1q = vue.defineComponent({
    name: "IconPenFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-pen-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1q = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "m31.07 8.444 8.485 8.485L19.05 37.435l-8.485-8.485zM33.9 5.615a2 2 0 0 1 2.829 0l5.657 5.657a2 2 0 0 1 0 2.829l-1.415 1.414-8.485-8.486L33.9 5.615ZM17.636 38.85 9.15 30.363l-3.61 10.83a1 1 0 0 0 1.265 1.265l10.83-3.61Z"
  }, null, -1);
  const _hoisted_3$1n = [
    _hoisted_2$1q
  ];
  function _sfc_render$1q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1n, 14, _hoisted_1$1q);
  }
  var _IconPenFill = /* @__PURE__ */ _export_sfc(_sfc_main$1q, [["render", _sfc_render$1q]]);
  const IconPenFill = Object.assign(_IconPenFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPenFill.name, _IconPenFill);
    }
  });
  const _sfc_main$1p = vue.defineComponent({
    name: "IconSunFill",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sun-fill`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1p = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1p = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "9",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$1m = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M21 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5ZM21 37.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5ZM42.5 21a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5a.5.5 0 0 1 .5-.5h5ZM10.5 21a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5a.5.5 0 0 1 .5-.5h5ZM39.203 34.96a.5.5 0 0 1 0 .707l-3.536 3.536a.5.5 0 0 1-.707 0l-3.535-3.536a.5.5 0 0 1 0-.707l3.535-3.535a.5.5 0 0 1 .707 0l3.536 3.535ZM16.575 12.333a.5.5 0 0 1 0 .707l-3.535 3.535a.5.5 0 0 1-.707 0L8.797 13.04a.5.5 0 0 1 0-.707l3.536-3.536a.5.5 0 0 1 .707 0l3.535 3.536ZM13.04 39.203a.5.5 0 0 1-.707 0l-3.536-3.536a.5.5 0 0 1 0-.707l3.536-3.535a.5.5 0 0 1 .707 0l3.536 3.535a.5.5 0 0 1 0 .707l-3.536 3.536ZM35.668 16.575a.5.5 0 0 1-.708 0l-3.535-3.535a.5.5 0 0 1 0-.707l3.535-3.536a.5.5 0 0 1 .708 0l3.535 3.536a.5.5 0 0 1 0 .707l-3.535 3.535Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$w = [
    _hoisted_2$1p,
    _hoisted_3$1m
  ];
  function _sfc_render$1p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$w, 14, _hoisted_1$1p);
  }
  var _IconSunFill = /* @__PURE__ */ _export_sfc(_sfc_main$1p, [["render", _sfc_render$1p]]);
  const IconSunFill = Object.assign(_IconSunFill, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSunFill.name, _IconSunFill);
    }
  });
  const _sfc_main$1o = vue.defineComponent({
    name: "IconApps",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-apps`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1o = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1o = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 7h13v13H7zM28 7h13v13H28zM7 28h13v13H7zM28 28h13v13H28z" }, null, -1);
  const _hoisted_3$1l = [
    _hoisted_2$1o
  ];
  function _sfc_render$1o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1l, 14, _hoisted_1$1o);
  }
  var _IconApps = /* @__PURE__ */ _export_sfc(_sfc_main$1o, [["render", _sfc_render$1o]]);
  const IconApps = Object.assign(_IconApps, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconApps.name, _IconApps);
    }
  });
  const _sfc_main$1n = vue.defineComponent({
    name: "IconArchive",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-archive`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1n = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1n = /* @__PURE__ */ vue.createElementVNode("rect", {
    x: "9",
    y: "18",
    width: "30",
    height: "22",
    rx: "1"
  }, null, -1);
  const _hoisted_3$1k = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 9a1 1 0 0 1 1-1h34a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V9ZM19 27h10" }, null, -1);
  const _hoisted_4$v = [
    _hoisted_2$1n,
    _hoisted_3$1k
  ];
  function _sfc_render$1n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$v, 14, _hoisted_1$1n);
  }
  var _IconArchive = /* @__PURE__ */ _export_sfc(_sfc_main$1n, [["render", _sfc_render$1n]]);
  const IconArchive = Object.assign(_IconArchive, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconArchive.name, _IconArchive);
    }
  });
  const _sfc_main$1m = vue.defineComponent({
    name: "IconBarChart",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bar-chart`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1m = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1m = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41 7H29v34h12V7ZM29 18H18v23h11V18ZM18 29H7v12h11V29Z" }, null, -1);
  const _hoisted_3$1j = [
    _hoisted_2$1m
  ];
  function _sfc_render$1m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      stroke: "currentColor",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1j, 14, _hoisted_1$1m);
  }
  var _IconBarChart = /* @__PURE__ */ _export_sfc(_sfc_main$1m, [["render", _sfc_render$1m]]);
  const IconBarChart = Object.assign(_IconBarChart, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBarChart.name, _IconBarChart);
    }
  });
  const _sfc_main$1l = vue.defineComponent({
    name: "IconBook",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-book`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1l = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1l = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 13 7 7v28l17 6 17-6V7l-17 6Zm0 0v27.5M29 18l7-2.5M29 25l7-2.5M29 32l7-2.5M19 18l-7-2.5m7 9.5-7-2.5m7 9.5-7-2.5" }, null, -1);
  const _hoisted_3$1i = [
    _hoisted_2$1l
  ];
  function _sfc_render$1l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1i, 14, _hoisted_1$1l);
  }
  var _IconBook = /* @__PURE__ */ _export_sfc(_sfc_main$1l, [["render", _sfc_render$1l]]);
  const IconBook = Object.assign(_IconBook, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBook.name, _IconBook);
    }
  });
  const _sfc_main$1k = vue.defineComponent({
    name: "IconBookmark",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bookmark`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1k = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1k = /* @__PURE__ */ vue.createElementVNode("path", { d: "M16 16h16M16 24h8" }, null, -1);
  const _hoisted_3$1h = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 41H8V6h32v17" }, null, -1);
  const _hoisted_4$u = /* @__PURE__ */ vue.createElementVNode("path", { d: "M30 29h11v13l-5.5-3.5L30 42V29Z" }, null, -1);
  const _hoisted_5$7 = [
    _hoisted_2$1k,
    _hoisted_3$1h,
    _hoisted_4$u
  ];
  function _sfc_render$1k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$7, 14, _hoisted_1$1k);
  }
  var _IconBookmark = /* @__PURE__ */ _export_sfc(_sfc_main$1k, [["render", _sfc_render$1k]]);
  const IconBookmark = Object.assign(_IconBookmark, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBookmark.name, _IconBookmark);
    }
  });
  const _sfc_main$1j = vue.defineComponent({
    name: "IconBranch",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-branch`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1j = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1j = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 10a4 4 0 1 1-8 0 4 4 0 0 1 8 0ZM38 10a4 4 0 1 1-8 0 4 4 0 0 1 8 0ZM19 38a4 4 0 1 1-8 0 4 4 0 0 1 8 0ZM15 15v15m0 3.5V30m0 0c0-5 19-7 19-15" }, null, -1);
  const _hoisted_3$1g = [
    _hoisted_2$1j
  ];
  function _sfc_render$1j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1g, 14, _hoisted_1$1j);
  }
  var _IconBranch = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["render", _sfc_render$1j]]);
  const IconBranch = Object.assign(_IconBranch, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBranch.name, _IconBranch);
    }
  });
  const _sfc_main$1i = vue.defineComponent({
    name: "IconBug",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bug`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1i = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1i = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 42c-6.075 0-11-4.925-11-11V18h22v13c0 6.075-4.925 11-11 11Zm0 0V23m11 4h8M5 27h8M7 14a4 4 0 0 0 4 4h26a4 4 0 0 0 4-4m0 28v-.5a6.5 6.5 0 0 0-6.5-6.5M7 42v-.5a6.5 6.5 0 0 1 6.5-6.5M17 14a7 7 0 1 1 14 0" }, null, -1);
  const _hoisted_3$1f = [
    _hoisted_2$1i
  ];
  function _sfc_render$1i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1f, 14, _hoisted_1$1i);
  }
  var _IconBug = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["render", _sfc_render$1i]]);
  const IconBug = Object.assign(_IconBug, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBug.name, _IconBug);
    }
  });
  const _sfc_main$1h = vue.defineComponent({
    name: "IconBulb",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-bulb`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1h = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1h = /* @__PURE__ */ vue.createElementVNode("path", { d: "M17 42h14m6-24c0 2.823-.9 5.437-2.43 7.568-1.539 2.147-3.185 4.32-3.77 6.897l-.623 2.756A1 1 0 0 1 29.2 36H18.8a1 1 0 0 1-.976-.779l-.624-2.756c-.584-2.576-2.23-4.75-3.77-6.897A12.94 12.94 0 0 1 11 18c0-7.18 5.82-13 13-13s13 5.82 13 13Z" }, null, -1);
  const _hoisted_3$1e = [
    _hoisted_2$1h
  ];
  function _sfc_render$1h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1e, 14, _hoisted_1$1h);
  }
  var _IconBulb = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$1h]]);
  const IconBulb = Object.assign(_IconBulb, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconBulb.name, _IconBulb);
    }
  });
  const _sfc_main$1g = vue.defineComponent({
    name: "IconCalendarClock",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-calendar-clock`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1g = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1g = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 22h34V10a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v30a1 1 0 0 0 1 1h18M34 5v8M14 5v8" }, null, -1);
  const _hoisted_3$1d = /* @__PURE__ */ vue.createElementVNode("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M36 44a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm1.5-9.75V29h-3v8.25H42v-3h-4.5Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$t = [
    _hoisted_2$1g,
    _hoisted_3$1d
  ];
  function _sfc_render$1g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$t, 14, _hoisted_1$1g);
  }
  var _IconCalendarClock = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$1g]]);
  const IconCalendarClock = Object.assign(_IconCalendarClock, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCalendarClock.name, _IconCalendarClock);
    }
  });
  const _sfc_main$1f = vue.defineComponent({
    name: "IconCalendar",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-calendar`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1f = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1f = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 22h34M14 5v8m20-8v8M8 41h32a1 1 0 0 0 1-1V10a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v30a1 1 0 0 0 1 1Z" }, null, -1);
  const _hoisted_3$1c = [
    _hoisted_2$1f
  ];
  function _sfc_render$1f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1c, 14, _hoisted_1$1f);
  }
  var _IconCalendar = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$1f]]);
  const IconCalendar = Object.assign(_IconCalendar, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCalendar.name, _IconCalendar);
    }
  });
  const _sfc_main$1e = vue.defineComponent({
    name: "IconCamera",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-camera`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1e = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1e = /* @__PURE__ */ vue.createElementVNode("path", { d: "m33 12-1.862-3.724A.5.5 0 0 0 30.691 8H17.309a.5.5 0 0 0-.447.276L15 12m16 14a7 7 0 1 1-14 0 7 7 0 0 1 14 0ZM7 40h34a1 1 0 0 0 1-1V13a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v26a1 1 0 0 0 1 1Z" }, null, -1);
  const _hoisted_3$1b = [
    _hoisted_2$1e
  ];
  function _sfc_render$1e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1b, 14, _hoisted_1$1e);
  }
  var _IconCamera = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$1e]]);
  const IconCamera = Object.assign(_IconCamera, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCamera.name, _IconCamera);
    }
  });
  const _sfc_main$1d = vue.defineComponent({
    name: "IconCloud",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-cloud`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1d = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1d = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 29a9 9 0 0 0 9 9h19c5.523 0 10-4.477 10-10 0-5.312-4.142-9.657-9.373-9.98C32.3 12.833 27.598 9 22 9c-6.606 0-11.965 5.338-12 11.935A9 9 0 0 0 5 29Z" }, null, -1);
  const _hoisted_3$1a = [
    _hoisted_2$1d
  ];
  function _sfc_render$1d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$1a, 14, _hoisted_1$1d);
  }
  var _IconCloud = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$1d]]);
  const IconCloud = Object.assign(_IconCloud, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCloud.name, _IconCloud);
    }
  });
  const _sfc_main$1c = vue.defineComponent({
    name: "IconCommand",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-command`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1c = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1c = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29 19v-6a6 6 0 1 1 6 6h-6Zm0 0v10m0-10H19m10 10v6a6 6 0 1 0 6-6h-6Zm0 0H19m0-10v10m0-10v-6a6 6 0 1 0-6 6h6Zm0 10v6a6 6 0 1 1-6-6h6Z" }, null, -1);
  const _hoisted_3$19 = [
    _hoisted_2$1c
  ];
  function _sfc_render$1c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$19, 14, _hoisted_1$1c);
  }
  var _IconCommand = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$1c]]);
  const IconCommand = Object.assign(_IconCommand, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCommand.name, _IconCommand);
    }
  });
  const _sfc_main$1b = vue.defineComponent({
    name: "IconCommon",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-common`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1b = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1b = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 23 7.652 14.345M24 23l16.366-8.664M24 23v19.438M7 14v20l17 9 17-9V14L24 5 7 14Z" }, null, -1);
  const _hoisted_3$18 = [
    _hoisted_2$1b
  ];
  function _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$18, 14, _hoisted_1$1b);
  }
  var _IconCommon = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$1b]]);
  const IconCommon = Object.assign(_IconCommon, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCommon.name, _IconCommon);
    }
  });
  const _sfc_main$1a = vue.defineComponent({
    name: "IconCompass",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-compass`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1a = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1a = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$17 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m21.177 21.183 10.108-4.717a.2.2 0 0 1 .266.265L26.834 26.84l-10.109 4.717a.2.2 0 0 1-.266-.266l4.718-10.108Z" }, null, -1);
  const _hoisted_4$s = [
    _hoisted_2$1a,
    _hoisted_3$17
  ];
  function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$s, 14, _hoisted_1$1a);
  }
  var _IconCompass = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$1a]]);
  const IconCompass = Object.assign(_IconCompass, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCompass.name, _IconCompass);
    }
  });
  const _sfc_main$19 = vue.defineComponent({
    name: "IconComputer",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-computer`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$19 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$19 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41 7H7v22h34V7Z" }, null, -1);
  const _hoisted_3$16 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M23.778 29v10" }, null, -1);
  const _hoisted_4$r = /* @__PURE__ */ vue.createElementVNode("path", { d: "M16 39h16" }, null, -1);
  const _hoisted_5$6 = /* @__PURE__ */ vue.createElementVNode("path", { d: "m20.243 14.657 5.657 5.657M15.414 22.314l7.071-7.071M24.485 21.728l7.071-7.071" }, null, -1);
  const _hoisted_6$1 = [
    _hoisted_2$19,
    _hoisted_3$16,
    _hoisted_4$r,
    _hoisted_5$6
  ];
  function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6$1, 14, _hoisted_1$19);
  }
  var _IconComputer = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$19]]);
  const IconComputer = Object.assign(_IconComputer, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconComputer.name, _IconComputer);
    }
  });
  const _sfc_main$18 = vue.defineComponent({
    name: "IconCopyright",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-copyright`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$18 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$18 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M29.292 18a8 8 0 1 0 0 12M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$15 = [
    _hoisted_2$18
  ];
  function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$15, 14, _hoisted_1$18);
  }
  var _IconCopyright = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$18]]);
  const IconCopyright = Object.assign(_IconCopyright, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconCopyright.name, _IconCopyright);
    }
  });
  const _sfc_main$17 = vue.defineComponent({
    name: "IconDashboard",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-dashboard`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$17 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$17 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M41.808 24c.118 4.63-1.486 9.333-5.21 13m5.21-13h-8.309m8.309 0c-.112-4.38-1.767-8.694-4.627-12M24 6c5.531 0 10.07 2.404 13.18 6M24 6c-5.724 0-10.384 2.574-13.5 6.38M24 6v7.5M37.18 12 31 17.5m-20.5-5.12L17 17.5m-6.5-5.12C6.99 16.662 5.44 22.508 6.53 28m4.872 9c-2.65-2.609-4.226-5.742-4.873-9m0 0 8.97-3.5" }, null, -1);
  const _hoisted_3$14 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 32a5 5 0 1 0 0 10 5 5 0 0 0 0-10Zm0 0V19" }, null, -1);
  const _hoisted_4$q = [
    _hoisted_2$17,
    _hoisted_3$14
  ];
  function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$q, 14, _hoisted_1$17);
  }
  var _IconDashboard = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$17]]);
  const IconDashboard = Object.assign(_IconDashboard, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDashboard.name, _IconDashboard);
    }
  });
  const _sfc_main$16 = vue.defineComponent({
    name: "IconDesktop",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-desktop`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$16 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$16 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 32v8m0 0h-9m9 0h9M7 32h34a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v22a1 1 0 0 0 1 1Z" }, null, -1);
  const _hoisted_3$13 = [
    _hoisted_2$16
  ];
  function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$13, 14, _hoisted_1$16);
  }
  var _IconDesktop = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$16]]);
  const IconDesktop = Object.assign(_IconDesktop, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDesktop.name, _IconDesktop);
    }
  });
  const _sfc_main$15 = vue.defineComponent({
    name: "IconDice",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-dice`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$15 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$15 = /* @__PURE__ */ vue.createStaticVNode('<rect x="6.998" y="7" width="34" height="34" rx="1.5"></rect><circle cx="16" cy="16" r="2"></circle><circle cx="24" cy="24" r="2"></circle><circle cx="16" cy="32" r="2"></circle><circle cx="32" cy="16" r="2"></circle><circle cx="32" cy="32" r="2"></circle><circle cx="16" cy="16" r="2" fill="currentColor" stroke="none"></circle><circle cx="24" cy="24" r="2" fill="currentColor" stroke="none"></circle><circle cx="16" cy="32" r="2" fill="currentColor" stroke="none"></circle><circle cx="32" cy="16" r="2" fill="currentColor" stroke="none"></circle><circle cx="32" cy="32" r="2" fill="currentColor" stroke="none"></circle>', 11);
  const _hoisted_13 = [
    _hoisted_2$15
  ];
  function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_13, 14, _hoisted_1$15);
  }
  var _IconDice = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$15]]);
  const IconDice = Object.assign(_IconDice, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDice.name, _IconDice);
    }
  });
  const _sfc_main$14 = vue.defineComponent({
    name: "IconDragDotVertical",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-drag-dot-vertical`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$14 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$14 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M17 8h2v2h-2V8ZM17 23h2v2h-2v-2ZM17 38h2v2h-2v-2ZM29 8h2v2h-2V8ZM29 23h2v2h-2v-2ZM29 38h2v2h-2v-2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$12 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M17 8h2v2h-2V8ZM17 23h2v2h-2v-2ZM17 38h2v2h-2v-2ZM29 8h2v2h-2V8ZM29 23h2v2h-2v-2ZM29 38h2v2h-2v-2Z" }, null, -1);
  const _hoisted_4$p = [
    _hoisted_2$14,
    _hoisted_3$12
  ];
  function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$p, 14, _hoisted_1$14);
  }
  var _IconDragDotVertical = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$14]]);
  const IconDragDotVertical = Object.assign(_IconDragDotVertical, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDragDotVertical.name, _IconDragDotVertical);
    }
  });
  const _sfc_main$13 = vue.defineComponent({
    name: "IconDragDot",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-drag-dot`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$13 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$13 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M40 17v2h-2v-2h2ZM25 17v2h-2v-2h2ZM10 17v2H8v-2h2ZM40 29v2h-2v-2h2ZM25 29v2h-2v-2h2ZM10 29v2H8v-2h2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$11 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M40 17v2h-2v-2h2ZM25 17v2h-2v-2h2ZM10 17v2H8v-2h2ZM40 29v2h-2v-2h2ZM25 29v2h-2v-2h2ZM10 29v2H8v-2h2Z" }, null, -1);
  const _hoisted_4$o = [
    _hoisted_2$13,
    _hoisted_3$11
  ];
  function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$o, 14, _hoisted_1$13);
  }
  var _IconDragDot = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$13]]);
  const IconDragDot = Object.assign(_IconDragDot, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDragDot.name, _IconDragDot);
    }
  });
  const _sfc_main$12 = vue.defineComponent({
    name: "IconDriveFile",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-drive-file`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$12 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$12 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M38.5 17H29a1 1 0 0 1-1-1V6.5m0-.5H10a1 1 0 0 0-1 1v34a1 1 0 0 0 1 1h28a1 1 0 0 0 1-1V17L28 6Z" }, null, -1);
  const _hoisted_3$10 = [
    _hoisted_2$12
  ];
  function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$10, 14, _hoisted_1$12);
  }
  var _IconDriveFile = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$12]]);
  const IconDriveFile = Object.assign(_IconDriveFile, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconDriveFile.name, _IconDriveFile);
    }
  });
  const _sfc_main$11 = vue.defineComponent({
    name: "IconEar",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-ear`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$11 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$11 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13 15.528C14.32 12.386 18.403 6.977 23.556 7c7.944.036 14.514 8.528 10.116 15.71-4.399 7.181-5.718 10.323-6.598 14.363-.82 3.766-9.288 7.143-11.498-1.515M20 18.5c1-3.083 4.5-4.5 6.5-2 2.85 3.562-3.503 8.312-5.5 12.5" }, null, -1);
  const _hoisted_3$$ = [
    _hoisted_2$11
  ];
  function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$$, 14, _hoisted_1$11);
  }
  var _IconEar = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$11]]);
  const IconEar = Object.assign(_IconEar, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEar.name, _IconEar);
    }
  });
  const _sfc_main$10 = vue.defineComponent({
    name: "IconEmail",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-email`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$10 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$10 = /* @__PURE__ */ vue.createElementVNode("rect", {
    x: "6",
    y: "8",
    width: "36",
    height: "32",
    rx: "1"
  }, null, -1);
  const _hoisted_3$_ = /* @__PURE__ */ vue.createElementVNode("path", { d: "m37 17-12.43 8.606a1 1 0 0 1-1.14 0L11 17" }, null, -1);
  const _hoisted_4$n = [
    _hoisted_2$10,
    _hoisted_3$_
  ];
  function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$n, 14, _hoisted_1$10);
  }
  var _IconEmail = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$10]]);
  const IconEmail = Object.assign(_IconEmail, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEmail.name, _IconEmail);
    }
  });
  const _sfc_main$$ = vue.defineComponent({
    name: "IconEmpty",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-empty`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$$ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$$ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 5v6m7 1 4-4m-18 4-4-4m28.5 22H28s-1 3-4 3-4-3-4-3H6.5M40 41H8a2 2 0 0 1-2-2v-8.46a2 2 0 0 1 .272-1.007l6.15-10.54A2 2 0 0 1 14.148 18H33.85a2 2 0 0 1 1.728.992l6.149 10.541A2 2 0 0 1 42 30.541V39a2 2 0 0 1-2 2Z" }, null, -1);
  const _hoisted_3$Z = [
    _hoisted_2$$
  ];
  function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$Z, 14, _hoisted_1$$);
  }
  var _IconEmpty = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$$]]);
  const IconEmpty = Object.assign(_IconEmpty, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconEmpty.name, _IconEmpty);
    }
  });
  const _sfc_main$_ = vue.defineComponent({
    name: "IconExperiment",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-experiment`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$_ = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$_ = /* @__PURE__ */ vue.createElementVNode("path", { d: "M10.5 7h6m0 0v10.5l-5.25 14M16.5 7h15m0 0h6m-6 0v10.5L37 32.167M11.25 31.5l-2.344 6.853A2 2 0 0 0 10.8 41h26.758a2 2 0 0 0 1.86-2.737L37 32.167M11.25 31.5c1.916 1.833 7.05 4.4 12.25 0s11.166-1.389 13.5.667M26 22.5v.01" }, null, -1);
  const _hoisted_3$Y = [
    _hoisted_2$_
  ];
  function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$Y, 14, _hoisted_1$_);
  }
  var _IconExperiment = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$_]]);
  const IconExperiment = Object.assign(_IconExperiment, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconExperiment.name, _IconExperiment);
    }
  });
  const _sfc_main$Z = vue.defineComponent({
    name: "IconFileAudio",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-file-audio`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$Z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$Z = /* @__PURE__ */ vue.createElementVNode("path", { d: "M37 42H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2Z" }, null, -1);
  const _hoisted_3$X = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M25 30a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$m = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 30a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm0 0-.951-12.363a.5.5 0 0 1 .58-.532L30 18" }, null, -1);
  const _hoisted_5$5 = [
    _hoisted_2$Z,
    _hoisted_3$X,
    _hoisted_4$m
  ];
  function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$5, 14, _hoisted_1$Z);
  }
  var _IconFileAudio = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Z]]);
  const IconFileAudio = Object.assign(_IconFileAudio, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFileAudio.name, _IconFileAudio);
    }
  });
  const _sfc_main$Y = vue.defineComponent({
    name: "IconFileImage",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-file-image`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$Y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$Y = /* @__PURE__ */ vue.createElementVNode("path", { d: "m26 33 5-6v6h-5Zm0 0-3-4-4 4h7Zm11 9H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2ZM17 19h1v1h-1v-1Z" }, null, -1);
  const _hoisted_3$W = [
    _hoisted_2$Y
  ];
  function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$W, 14, _hoisted_1$Y);
  }
  var _IconFileImage = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$Y]]);
  const IconFileImage = Object.assign(_IconFileImage, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFileImage.name, _IconFileImage);
    }
  });
  const _sfc_main$X = vue.defineComponent({
    name: "IconFilePdf",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-file-pdf`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$X = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$X = /* @__PURE__ */ vue.createElementVNode("path", { d: "M11 42h26a2 2 0 0 0 2-2V13.828a2 2 0 0 0-.586-1.414l-5.828-5.828A2 2 0 0 0 31.172 6H11a2 2 0 0 0-2 2v32a2 2 0 0 0 2 2Z" }, null, -1);
  const _hoisted_3$V = /* @__PURE__ */ vue.createElementVNode("path", { d: "M22.305 21.028c.874 1.939 3.506 6.265 4.903 8.055 1.747 2.237 3.494 2.685 4.368 2.237.873-.447 1.21-4.548-7.425-2.685-7.523 1.623-7.424 3.58-6.988 4.476.728 1.193 2.522 2.627 5.678-6.266C25.699 18.79 24.489 17 23.277 17c-1.409 0-2.538.805-.972 4.028Z" }, null, -1);
  const _hoisted_4$l = [
    _hoisted_2$X,
    _hoisted_3$V
  ];
  function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$l, 14, _hoisted_1$X);
  }
  var _IconFilePdf = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$X]]);
  const IconFilePdf = Object.assign(_IconFilePdf, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFilePdf.name, _IconFilePdf);
    }
  });
  const _sfc_main$W = vue.defineComponent({
    name: "IconFileVideo",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-file-video`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$W = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$W = /* @__PURE__ */ vue.createElementVNode("path", { d: "M37 42H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2Z" }, null, -1);
  const _hoisted_3$U = /* @__PURE__ */ vue.createElementVNode("path", { d: "M22 27.796v-6l5 3-5 3Z" }, null, -1);
  const _hoisted_4$k = [
    _hoisted_2$W,
    _hoisted_3$U
  ];
  function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$k, 14, _hoisted_1$W);
  }
  var _IconFileVideo = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$W]]);
  const IconFileVideo = Object.assign(_IconFileVideo, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFileVideo.name, _IconFileVideo);
    }
  });
  const _sfc_main$V = vue.defineComponent({
    name: "IconFile",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-file`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$V = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$V = /* @__PURE__ */ vue.createElementVNode("path", { d: "M16 21h16m-16 8h10m11 13H11a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h21l7 7v27a2 2 0 0 1-2 2Z" }, null, -1);
  const _hoisted_3$T = [
    _hoisted_2$V
  ];
  function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$T, 14, _hoisted_1$V);
  }
  var _IconFile = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$V]]);
  const IconFile = Object.assign(_IconFile, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFile.name, _IconFile);
    }
  });
  const _sfc_main$U = vue.defineComponent({
    name: "IconFire",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-fire`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$U = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$U = /* @__PURE__ */ vue.createElementVNode("path", { d: "M17.577 27.477C20.022 22.579 17.041 12.98 24.546 6c0 0-1.156 15.55 5.36 17.181 2.145.537 2.68-5.369 4.289-8.59 0 0 .536 4.832 2.68 8.59 3.217 7.517-1 14.117-5.896 17.182-4.289 2.684-14.587 2.807-19.835-5.37-4.824-7.516 0-15.57 0-15.57s4.289 12.35 6.433 8.054Z" }, null, -1);
  const _hoisted_3$S = [
    _hoisted_2$U
  ];
  function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$S, 14, _hoisted_1$U);
  }
  var _IconFire = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$U]]);
  const IconFire = Object.assign(_IconFire, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFire.name, _IconFire);
    }
  });
  const _sfc_main$T = vue.defineComponent({
    name: "IconFolderAdd",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-folder-add`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$T = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$T = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 19v14m-7-7h14M6 13h18l-2.527-3.557a1.077 1.077 0 0 0-.88-.443H7.06C6.474 9 6 9.448 6 10v3Zm0 0h33.882c1.17 0 2.118.895 2.118 2v21c0 1.105-.948 3-2.118 3H8.118C6.948 39 6 38.105 6 37V13Z" }, null, -1);
  const _hoisted_3$R = [
    _hoisted_2$T
  ];
  function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$R, 14, _hoisted_1$T);
  }
  var _IconFolderAdd = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$T]]);
  const IconFolderAdd = Object.assign(_IconFolderAdd, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFolderAdd.name, _IconFolderAdd);
    }
  });
  const _sfc_main$S = vue.defineComponent({
    name: "IconFolderDelete",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-folder-delete`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$S = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$S = /* @__PURE__ */ vue.createElementVNode("path", { d: "M17 26h14M6 13h18l-2.527-3.557a1.077 1.077 0 0 0-.88-.443H7.06C6.474 9 6 9.448 6 10v3Zm0 0h33.882c1.17 0 2.118.895 2.118 2v21c0 1.105-.948 3-2.118 3H8.118C6.948 39 6 38.105 6 37V13Z" }, null, -1);
  const _hoisted_3$Q = [
    _hoisted_2$S
  ];
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$Q, 14, _hoisted_1$S);
  }
  var _IconFolderDelete = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$S]]);
  const IconFolderDelete = Object.assign(_IconFolderDelete, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFolderDelete.name, _IconFolderDelete);
    }
  });
  const _sfc_main$R = vue.defineComponent({
    name: "IconFolder",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-folder`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$R = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$R = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 13h18l-2.527-3.557a1.077 1.077 0 0 0-.88-.443H7.06C6.474 9 6 9.448 6 10v3Zm0 0h33.882c1.17 0 2.118.895 2.118 2v21c0 1.105-.948 3-2.118 3H8.118C6.948 39 6 38.105 6 37V13Z" }, null, -1);
  const _hoisted_3$P = [
    _hoisted_2$R
  ];
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$P, 14, _hoisted_1$R);
  }
  var _IconFolder = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$R]]);
  const IconFolder = Object.assign(_IconFolder, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconFolder.name, _IconFolder);
    }
  });
  const _sfc_main$Q = vue.defineComponent({
    name: "IconGift",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-gift`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$Q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$Q = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13.45 14.043H8a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h32a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1h-4.893m-21.657 0c-1.036-2.833-.615-5.6 1.182-6.637 2.152-1.243 5.464.464 7.397 3.812.539.933.914 1.896 1.127 2.825m-9.706 0h9.706m0 0H25.4m0 0a10.31 10.31 0 0 1 1.128-2.825c1.933-3.348 5.244-5.055 7.397-3.812 1.797 1.037 2.217 3.804 1.182 6.637m-9.707 0h9.707M10 26.043a2 2 0 0 1 2-2h24a2 2 0 0 1 2 2v13a2 2 0 0 1-2 2H12a2 2 0 0 1-2-2v-13Z" }, null, -1);
  const _hoisted_3$O = [
    _hoisted_2$Q
  ];
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$O, 14, _hoisted_1$Q);
  }
  var _IconGift = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$Q]]);
  const IconGift = Object.assign(_IconGift, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconGift.name, _IconGift);
    }
  });
  const _sfc_main$P = vue.defineComponent({
    name: "IconIdcard",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-idcard`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$P = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$P = /* @__PURE__ */ vue.createElementVNode("path", { d: "M11 17h9m-9 7h9m-9 7h5m-8 9h32a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v28a2 2 0 0 0 2 2Z" }, null, -1);
  const _hoisted_3$N = /* @__PURE__ */ vue.createElementVNode("path", { d: "M36 33a7 7 0 1 0-14 0" }, null, -1);
  const _hoisted_4$j = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "29",
    cy: "20",
    r: "4"
  }, null, -1);
  const _hoisted_5$4 = [
    _hoisted_2$P,
    _hoisted_3$N,
    _hoisted_4$j
  ];
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$4, 14, _hoisted_1$P);
  }
  var _IconIdcard = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$P]]);
  const IconIdcard = Object.assign(_IconIdcard, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconIdcard.name, _IconIdcard);
    }
  });
  const _sfc_main$O = vue.defineComponent({
    name: "IconImageClose",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-image-close`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$O = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$O = /* @__PURE__ */ vue.createStaticVNode('<path d="M41 26V9a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v30a2 2 0 0 0 2 2h17"></path><path d="m24 33 9-8.5V27s-2 1-3.5 2.5C27.841 31.159 27 33 27 33h-3Zm0 0-3.5-4.5L17 33h7Z"></path><path d="M20.5 28.5 17 33h7l-3.5-4.5ZM33 24.5 24 33h3s.841-1.841 2.5-3.5C31 28 33 27 33 27v-2.5Z" fill="currentColor" stroke="none"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M46 38a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-4.95-4.782 1.74 1.74-3.045 3.046 3.046 3.046-1.74 1.74-3.047-3.045-3.046 3.046-1.74-1.74 3.046-3.047-3.046-3.046 1.74-1.74 3.046 3.046 3.046-3.046Z" fill="currentColor" stroke="none"></path><path d="M17 15h-2v2h2v-2Z"></path>', 5);
  const _hoisted_7$1 = [
    _hoisted_2$O
  ];
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_7$1, 14, _hoisted_1$O);
  }
  var _IconImageClose = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$O]]);
  const IconImageClose = Object.assign(_IconImageClose, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconImageClose.name, _IconImageClose);
    }
  });
  const _sfc_main$N = vue.defineComponent({
    name: "IconImage",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-image`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$N = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$N = /* @__PURE__ */ vue.createElementVNode("path", { d: "m24 33 9-9v9h-9Zm0 0-3.5-4.5L17 33h7Zm15 8H9a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h30a2 2 0 0 1 2 2v30a2 2 0 0 1-2 2ZM15 15h2v2h-2v-2Z" }, null, -1);
  const _hoisted_3$M = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M33 33v-9l-9 9h9ZM23.5 33l-3-4-3 4h6ZM15 15h2v2h-2z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$i = [
    _hoisted_2$N,
    _hoisted_3$M
  ];
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$i, 14, _hoisted_1$N);
  }
  var _IconImage = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$N]]);
  const IconImage = Object.assign(_IconImage, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconImage.name, _IconImage);
    }
  });
  const _sfc_main$M = vue.defineComponent({
    name: "IconInteraction",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-interaction`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$M = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$M = /* @__PURE__ */ vue.createElementVNode("path", { d: "M8 19h16m16 0H24m0 0v23m14 0H10a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h28a2 2 0 0 1 2 2v32a2 2 0 0 1-2 2Z" }, null, -1);
  const _hoisted_3$L = [
    _hoisted_2$M
  ];
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$L, 14, _hoisted_1$M);
  }
  var _IconInteraction = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$M]]);
  const IconInteraction = Object.assign(_IconInteraction, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconInteraction.name, _IconInteraction);
    }
  });
  const _sfc_main$L = vue.defineComponent({
    name: "IconLanguage",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-language`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$L = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$L = /* @__PURE__ */ vue.createElementVNode("path", { d: "m42 43-2.385-6M26 43l2.384-6m11.231 0-.795-2-4.18-10h-1.28l-4.181 10-.795 2m11.231 0h-11.23M17 5l1 5M5 11h26M11 11s1.889 7.826 6.611 12.174C22.333 27.522 30 31 30 31" }, null, -1);
  const _hoisted_3$K = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 11s-1.889 7.826-6.611 12.174C13.667 27.522 6 31 6 31" }, null, -1);
  const _hoisted_4$h = [
    _hoisted_2$L,
    _hoisted_3$K
  ];
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$h, 14, _hoisted_1$L);
  }
  var _IconLanguage = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$L]]);
  const IconLanguage = Object.assign(_IconLanguage, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLanguage.name, _IconLanguage);
    }
  });
  const _sfc_main$K = vue.defineComponent({
    name: "IconLayers",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-layers`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$K = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$K = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24.015 7.017 41 14.62l-16.985 7.605L7.03 14.62l16.985-7.604Z" }, null, -1);
  const _hoisted_3$J = /* @__PURE__ */ vue.createElementVNode("path", { d: "m41 23.255-16.985 7.604L7.03 23.255M40.97 33.412l-16.985 7.605L7 33.412" }, null, -1);
  const _hoisted_4$g = [
    _hoisted_2$K,
    _hoisted_3$J
  ];
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$g, 14, _hoisted_1$K);
  }
  var _IconLayers = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$K]]);
  const IconLayers = Object.assign(_IconLayers, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLayers.name, _IconLayers);
    }
  });
  const _sfc_main$J = vue.defineComponent({
    name: "IconLayout",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-layout`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$J = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$J = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19 40V8m23 2a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v28a2 2 0 0 0 2 2h32a2 2 0 0 0 2-2V10Z" }, null, -1);
  const _hoisted_3$I = [
    _hoisted_2$J
  ];
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$I, 14, _hoisted_1$J);
  }
  var _IconLayout = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$J]]);
  const IconLayout = Object.assign(_IconLayout, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLayout.name, _IconLayout);
    }
  });
  const _sfc_main$I = vue.defineComponent({
    name: "IconLoading",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-loading`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$I = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$I = /* @__PURE__ */ vue.createElementVNode("path", { d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6" }, null, -1);
  const _hoisted_3$H = [
    _hoisted_2$I
  ];
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$H, 14, _hoisted_1$I);
  }
  var _IconLoading = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$I]]);
  const IconLoading = Object.assign(_IconLoading, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLoading.name, _IconLoading);
    }
  });
  const _sfc_main$H = vue.defineComponent({
    name: "IconLocation",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-location`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$H = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$H = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "19",
    r: "5"
  }, null, -1);
  const _hoisted_3$G = /* @__PURE__ */ vue.createElementVNode("path", { d: "M39 20.405C39 28.914 24 43 24 43S9 28.914 9 20.405C9 11.897 15.716 5 24 5c8.284 0 15 6.897 15 15.405Z" }, null, -1);
  const _hoisted_4$f = [
    _hoisted_2$H,
    _hoisted_3$G
  ];
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$f, 14, _hoisted_1$H);
  }
  var _IconLocation = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$H]]);
  const IconLocation = Object.assign(_IconLocation, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLocation.name, _IconLocation);
    }
  });
  const _sfc_main$G = vue.defineComponent({
    name: "IconLock",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-lock`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$G = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$G = /* @__PURE__ */ vue.createElementVNode("rect", {
    x: "7",
    y: "21",
    width: "34",
    height: "20",
    rx: "1"
  }, null, -1);
  const _hoisted_3$F = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15 21v-6a9 9 0 1 1 18 0v6M24 35v-8" }, null, -1);
  const _hoisted_4$e = [
    _hoisted_2$G,
    _hoisted_3$F
  ];
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$e, 14, _hoisted_1$G);
  }
  var _IconLock = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$G]]);
  const IconLock = Object.assign(_IconLock, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLock.name, _IconLock);
    }
  });
  const _sfc_main$F = vue.defineComponent({
    name: "IconLoop",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-loop`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$F = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$F = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 38c-7.732 0-14-6.268-14-14 0-3.815 1.526-7.273 4-9.798M24 10c7.732 0 14 6.268 14 14 0 3.815-1.526 7.273-4 9.798M24 7v6l-4-3 4-3Zm0 33v-6l4 3-4 3Z" }, null, -1);
  const _hoisted_3$E = [
    _hoisted_2$F
  ];
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$E, 14, _hoisted_1$F);
  }
  var _IconLoop = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$F]]);
  const IconLoop = Object.assign(_IconLoop, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconLoop.name, _IconLoop);
    }
  });
  const _sfc_main$E = vue.defineComponent({
    name: "IconMan",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-man`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$E = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$E = /* @__PURE__ */ vue.createElementVNode("path", { d: "M40 8 29.68 18.321M31 8h9v9m-7 10c0 7.18-5.82 13-13 13S7 34.18 7 27s5.82-13 13-13 13 5.82 13 13Z" }, null, -1);
  const _hoisted_3$D = [
    _hoisted_2$E
  ];
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$D, 14, _hoisted_1$E);
  }
  var _IconMan = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$E]]);
  const IconMan = Object.assign(_IconMan, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMan.name, _IconMan);
    }
  });
  const _sfc_main$D = vue.defineComponent({
    name: "IconMenu",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-menu`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$D = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$D = /* @__PURE__ */ vue.createElementVNode("path", { d: "M5 10h38M5 24h38M5 38h38" }, null, -1);
  const _hoisted_3$C = [
    _hoisted_2$D
  ];
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$C, 14, _hoisted_1$D);
  }
  var _IconMenu = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$D]]);
  const IconMenu = Object.assign(_IconMenu, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMenu.name, _IconMenu);
    }
  });
  const _sfc_main$C = vue.defineComponent({
    name: "IconMindMapping",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-mind-mapping`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$C = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$C = /* @__PURE__ */ vue.createElementVNode("path", { d: "M20 10h23M20 24h23M20 38h23M9 12v28m0-28a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 26h7M9 24h7" }, null, -1);
  const _hoisted_3$B = [
    _hoisted_2$C
  ];
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$B, 14, _hoisted_1$C);
  }
  var _IconMindMapping = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$C]]);
  const IconMindMapping = Object.assign(_IconMindMapping, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMindMapping.name, _IconMindMapping);
    }
  });
  const _sfc_main$B = vue.defineComponent({
    name: "IconMobile",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-mobile`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$B = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$B = /* @__PURE__ */ vue.createElementVNode("path", { d: "M17 14h14m6.125 28h-26.25C9.839 42 9 41.105 9 40V8c0-1.105.84-2 1.875-2h26.25C38.16 6 39 6.895 39 8v32c0 1.105-.84 2-1.875 2ZM22 33a2 2 0 1 1 4 0 2 2 0 0 1-4 0Z" }, null, -1);
  const _hoisted_3$A = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "33",
    r: "2",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$d = [
    _hoisted_2$B,
    _hoisted_3$A
  ];
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$d, 14, _hoisted_1$B);
  }
  var _IconMobile = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$B]]);
  const IconMobile = Object.assign(_IconMobile, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMobile.name, _IconMobile);
    }
  });
  const _sfc_main$A = vue.defineComponent({
    name: "IconMoon",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-moon`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$A = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$A = /* @__PURE__ */ vue.createElementVNode("path", { d: "M39.979 29.241c.11-.344-.23-.654-.574-.544-1.53.487-3.162.75-4.855.75-8.834 0-15.997-7.163-15.997-15.997 0-1.693.263-3.324.75-4.855.11-.344-.2-.684-.544-.574C11.939 10.19 7 16.576 7 24.114 7 33.44 14.56 41 23.886 41c7.538 0 13.923-4.94 16.093-11.759Z" }, null, -1);
  const _hoisted_3$z = [
    _hoisted_2$A
  ];
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$z, 14, _hoisted_1$A);
  }
  var _IconMoon = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$A]]);
  const IconMoon = Object.assign(_IconMoon, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMoon.name, _IconMoon);
    }
  });
  const _sfc_main$z = vue.defineComponent({
    name: "IconMosaic",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-mosaic`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$z = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$z = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M6 7h4v4H6V7ZM6 23h4v4H6v-4ZM6 38h4v4H6v-4ZM14 15h4v4h-4v-4ZM14 31h4v4h-4v-4ZM22 7h4v4h-4V7ZM22 23h4v4h-4v-4ZM22 38h4v4h-4v-4ZM30 15h4v4h-4v-4ZM30 31h4v4h-4v-4ZM38 7h4v4h-4V7ZM38 23h4v4h-4v-4ZM38 38h4v4h-4v-4Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$y = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 7h4v4H6V7ZM6 23h4v4H6v-4ZM6 38h4v4H6v-4ZM14 15h4v4h-4v-4ZM14 31h4v4h-4v-4ZM22 7h4v4h-4V7ZM22 23h4v4h-4v-4ZM22 38h4v4h-4v-4ZM30 15h4v4h-4v-4ZM30 31h4v4h-4v-4ZM38 7h4v4h-4V7ZM38 23h4v4h-4v-4ZM38 38h4v4h-4v-4Z" }, null, -1);
  const _hoisted_4$c = [
    _hoisted_2$z,
    _hoisted_3$y
  ];
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$c, 14, _hoisted_1$z);
  }
  var _IconMosaic = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$z]]);
  const IconMosaic = Object.assign(_IconMosaic, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconMosaic.name, _IconMosaic);
    }
  });
  const _sfc_main$y = vue.defineComponent({
    name: "IconNav",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-nav`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$y = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$y = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 19h10m0 0h26m-26 0V9m0 10v10m0 0v10m0-10H6m10 0h26M6 9h36v30H6V9Z" }, null, -1);
  const _hoisted_3$x = [
    _hoisted_2$y
  ];
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$x, 14, _hoisted_1$y);
  }
  var _IconNav = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$y]]);
  const IconNav = Object.assign(_IconNav, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconNav.name, _IconNav);
    }
  });
  const _sfc_main$x = vue.defineComponent({
    name: "IconNotificationClose",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-notification-close`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$x = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$x = /* @__PURE__ */ vue.createElementVNode("path", { d: "M11 35V22c0-1.835.38-3.58 1.066-5.163M11 35H6m5 0h15.5M24 9c7.18 0 13 5.82 13 13v7.5M24 9V4m0 5a12.94 12.94 0 0 0-6.5 1.74M17 42h14M6 4l36 40" }, null, -1);
  const _hoisted_3$w = [
    _hoisted_2$x
  ];
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$w, 14, _hoisted_1$x);
  }
  var _IconNotificationClose = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$x]]);
  const IconNotificationClose = Object.assign(_IconNotificationClose, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconNotificationClose.name, _IconNotificationClose);
    }
  });
  const _sfc_main$w = vue.defineComponent({
    name: "IconNotification",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-notification`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$w = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$w = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 9c7.18 0 13 5.82 13 13v13H11V22c0-7.18 5.82-13 13-13Zm0 0V4M6 35h36m-25 7h14" }, null, -1);
  const _hoisted_3$v = [
    _hoisted_2$w
  ];
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$v, 14, _hoisted_1$w);
  }
  var _IconNotification = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$w]]);
  const IconNotification = Object.assign(_IconNotification, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconNotification.name, _IconNotification);
    }
  });
  const _sfc_main$v = vue.defineComponent({
    name: "IconPalette",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-palette`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$v = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$v = /* @__PURE__ */ vue.createStaticVNode('<path d="M31.813 12.02C29.73 10.459 27.013 10 24 10c-9.78 0-17.708 6.987-17.708 15.042 0 8.054 8.97 14.583 18.75 14.583 5.277 0 2.485-5.318 5.73-8.333 2.767-2.574 10.937-1.563 10.937-6.25 0-2.792-.521-5.209-2.605-7.617"></path><path d="M25.042 25.563 42.23 8.375"></path><circle cx="22.5" cy="17.5" r="2.5" fill="currentColor" stroke="none"></circle><circle cx="15.5" cy="20.5" r="2.5" fill="currentColor" stroke="none"></circle><circle cx="14.5" cy="28.5" r="2.5" fill="currentColor" stroke="none"></circle>', 5);
  const _hoisted_7 = [
    _hoisted_2$v
  ];
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_7, 14, _hoisted_1$v);
  }
  var _IconPalette = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$v]]);
  const IconPalette = Object.assign(_IconPalette, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPalette.name, _IconPalette);
    }
  });
  const _sfc_main$u = vue.defineComponent({
    name: "IconPen",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-pen`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$u = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$u = /* @__PURE__ */ vue.createElementVNode("path", { d: "m28.364 11.565 7.07 7.071M7.15 32.778 33.313 6.615l7.071 7.071L14.221 39.85h-7.07v-7.07Z" }, null, -1);
  const _hoisted_3$u = [
    _hoisted_2$u
  ];
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$u, 14, _hoisted_1$u);
  }
  var _IconPen = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$u]]);
  const IconPen = Object.assign(_IconPen, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPen.name, _IconPen);
    }
  });
  const _sfc_main$t = vue.defineComponent({
    name: "IconPhone",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-phone`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$t = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$t = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6.707 34.284a1 1 0 0 1 0-1.414l5.657-5.657a1 1 0 0 1 1.414 0l4.95 4.95s3.535-1.414 7.778-5.657c4.243-4.243 5.657-7.778 5.657-7.778l-4.95-4.95a1 1 0 0 1 0-1.414l5.657-5.657a1 1 0 0 1 1.414 0l6.01 6.01s3.183 7.425-8.485 19.092c-11.667 11.668-19.092 8.485-19.092 8.485l-6.01-6.01Z" }, null, -1);
  const _hoisted_3$t = [
    _hoisted_2$t
  ];
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$t, 14, _hoisted_1$t);
  }
  var _IconPhone = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$t]]);
  const IconPhone = Object.assign(_IconPhone, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPhone.name, _IconPhone);
    }
  });
  const _sfc_main$s = vue.defineComponent({
    name: "IconPrinter",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-printer`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$s = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$s = /* @__PURE__ */ vue.createElementVNode("path", { d: "M14 15V8a1 1 0 0 1 1-1h18a1 1 0 0 1 1 1v7m-20 0H7a1 1 0 0 0-1 1v17a1 1 0 0 0 1 1h6m1-19h20m0 0h7a1 1 0 0 1 1 1v17a1 1 0 0 1-1 1h-6m-22 0v6a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1v-6m-22 0v-5a1 1 0 0 1 1-1h20a1 1 0 0 1 1 1v5" }, null, -1);
  const _hoisted_3$s = [
    _hoisted_2$s
  ];
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$s, 14, _hoisted_1$s);
  }
  var _IconPrinter = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$s]]);
  const IconPrinter = Object.assign(_IconPrinter, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPrinter.name, _IconPrinter);
    }
  });
  const _sfc_main$r = vue.defineComponent({
    name: "IconPublic",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-public`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$r = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$r = /* @__PURE__ */ vue.createElementVNode("path", { d: "M15 21.5 6.704 19M15 21.5l4.683 5.152a1 1 0 0 1 .25.814L18 40.976l10.918-16.117a1 1 0 0 0-.298-1.409L21.5 19 15 21.5Zm0 0 6.062-6.995a1 1 0 0 0 .138-1.103L18 7.024M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6s18 8.059 18 18Z" }, null, -1);
  const _hoisted_3$r = [
    _hoisted_2$r
  ];
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$r, 14, _hoisted_1$r);
  }
  var _IconPublic = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$r]]);
  const IconPublic = Object.assign(_IconPublic, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPublic.name, _IconPublic);
    }
  });
  const _sfc_main$q = vue.defineComponent({
    name: "IconPushpin",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-pushpin`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$q = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$q = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19.921 28.163 7.193 40.89m12.728-12.728 8.884 8.883c.17.17.447.17.617 0l5.12-5.12a7.862 7.862 0 0 0 1.667-8.655.093.093 0 0 1 .02-.102l4.906-4.906a2 2 0 0 0 0-2.828L32.648 6.95a2 2 0 0 0-2.828 0l-4.89 4.889a.126.126 0 0 1-.139.027 7.828 7.828 0 0 0-8.618 1.66l-5.027 5.026a.591.591 0 0 0 0 .836l8.774 8.775Z" }, null, -1);
  const _hoisted_3$q = [
    _hoisted_2$q
  ];
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$q, 14, _hoisted_1$q);
  }
  var _IconPushpin = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$q]]);
  const IconPushpin = Object.assign(_IconPushpin, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconPushpin.name, _IconPushpin);
    }
  });
  const _sfc_main$p = vue.defineComponent({
    name: "IconQrcode",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-qrcode`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$p = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$p = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 30v4m0 3v6m19-19h-6m-3 0h-4M7 7h17v17H7V7Zm0 25h9v9H7v-9Zm25 0h9v9h-9v-9Zm0-25h9v9h-9V7Zm-18 7h3v3h-3v-3Z" }, null, -1);
  const _hoisted_3$p = [
    _hoisted_2$p
  ];
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$p, 14, _hoisted_1$p);
  }
  var _IconQrcode = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$p]]);
  const IconQrcode = Object.assign(_IconQrcode, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconQrcode.name, _IconQrcode);
    }
  });
  const _sfc_main$o = vue.defineComponent({
    name: "IconRelation",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-relation`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$o = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$o = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19.714 14C15.204 15.784 12 20.302 12 25.593c0 1.142.15 2.247.429 3.298m16.285-14.712C32.998 16.073 36 20.471 36 25.593c0 1.07-.131 2.11-.378 3.102m-18.32 7.194a11.676 11.676 0 0 0 13.556-.112" }, null, -1);
  const _hoisted_3$o = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 19a6 6 0 1 0 0-12 6 6 0 0 0 0 12ZM36 40a6 6 0 1 0 0-12 6 6 0 0 0 0 12ZM12 40a6 6 0 1 0 0-12 6 6 0 0 0 0 12Z" }, null, -1);
  const _hoisted_4$b = [
    _hoisted_2$o,
    _hoisted_3$o
  ];
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      stroke: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$b, 14, _hoisted_1$o);
  }
  var _IconRelation = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$o]]);
  const IconRelation = Object.assign(_IconRelation, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRelation.name, _IconRelation);
    }
  });
  const _sfc_main$n = vue.defineComponent({
    name: "IconRobotAdd",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-robot-add`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$n = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$n = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 7v6m0-6h5m-5 0h-5M3 21v11m25 8H9V13h30v11m-7 11h14m-7-7v14M18 26h1v1h-1v-1Zm11 0h1v1h-1v-1Z" }, null, -1);
  const _hoisted_3$n = [
    _hoisted_2$n
  ];
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$n, 14, _hoisted_1$n);
  }
  var _IconRobotAdd = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$n]]);
  const IconRobotAdd = Object.assign(_IconRobotAdd, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRobotAdd.name, _IconRobotAdd);
    }
  });
  const _sfc_main$m = vue.defineComponent({
    name: "IconRobot",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-robot`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$m = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$m = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M18 26h1v1h-1v-1ZM29 26h1v1h-1v-1Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_3$m = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 7v6m0-6h5m-5 0h-5M3 21v11m36 8H9V13h30v29m6-21v11m-27-6h1v1h-1v-1Zm11 0h1v1h-1v-1Z" }, null, -1);
  const _hoisted_4$a = [
    _hoisted_2$m,
    _hoisted_3$m
  ];
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$a, 14, _hoisted_1$m);
  }
  var _IconRobot = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$m]]);
  const IconRobot = Object.assign(_IconRobot, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconRobot.name, _IconRobot);
    }
  });
  const _sfc_main$l = vue.defineComponent({
    name: "IconSafe",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-safe`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$l = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$l = /* @__PURE__ */ vue.createElementVNode("path", { d: "m16.825 22.165 6 6 10-10M24 6c7 4 16 5 16 5v15s-2 12-16 16.027C10 38 8 26 8 26V11s9-1 16-5Z" }, null, -1);
  const _hoisted_3$l = [
    _hoisted_2$l
  ];
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$l, 14, _hoisted_1$l);
  }
  var _IconSafe = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$l]]);
  const IconSafe = Object.assign(_IconSafe, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSafe.name, _IconSafe);
    }
  });
  const _sfc_main$k = vue.defineComponent({
    name: "IconSchedule",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-schedule`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$k = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$k = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "18"
  }, null, -1);
  const _hoisted_3$k = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 13v10l6.5 7" }, null, -1);
  const _hoisted_4$9 = [
    _hoisted_2$k,
    _hoisted_3$k
  ];
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$9, 14, _hoisted_1$k);
  }
  var _IconSchedule = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$k]]);
  const IconSchedule = Object.assign(_IconSchedule, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSchedule.name, _IconSchedule);
    }
  });
  const _sfc_main$j = vue.defineComponent({
    name: "IconShake",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-shake`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$j = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$j = /* @__PURE__ */ vue.createElementVNode("path", { d: "M43.092 27.536 31.778 38.849M20.465 4.91 9.15 16.221m9.192 14.85a1 1 0 1 1-1.414-1.415 1 1 0 0 1 1.414 1.414ZM6.323 28.95 19.05 41.678a1 1 0 0 0 1.415 0l21.213-21.213a1 1 0 0 0 0-1.415L28.95 6.322a1 1 0 0 0-1.415 0L6.322 27.536a1 1 0 0 0 0 1.414Z" }, null, -1);
  const _hoisted_3$j = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "17.637",
    cy: "30.364",
    r: "1",
    transform: "rotate(45 17.637 30.364)",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$8 = [
    _hoisted_2$j,
    _hoisted_3$j
  ];
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$8, 14, _hoisted_1$j);
  }
  var _IconShake = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$j]]);
  const IconShake = Object.assign(_IconShake, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconShake.name, _IconShake);
    }
  });
  const _sfc_main$i = vue.defineComponent({
    name: "IconSkin",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-skin`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$i = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$i = /* @__PURE__ */ vue.createElementVNode("path", { d: "M17.936 6H7a1 1 0 0 0-1 1v17.559a1 1 0 0 0 1 1h4V40a1 1 0 0 0 1 1h24a1 1 0 0 0 1-1V25.559h4a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1H30.064C28.854 7.23 26.59 9.059 24 9.059S19.147 7.23 17.936 6Z" }, null, -1);
  const _hoisted_3$i = [
    _hoisted_2$i
  ];
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$i, 14, _hoisted_1$i);
  }
  var _IconSkin = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$i]]);
  const IconSkin = Object.assign(_IconSkin, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSkin.name, _IconSkin);
    }
  });
  const _sfc_main$h = vue.defineComponent({
    name: "IconStamp",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-stamp`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$h = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$h = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 33a1 1 0 0 1 1-1h32a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-7ZM29.081 21.18a8 8 0 1 0-10.163 0L14 32h20l-4.919-10.82Z" }, null, -1);
  const _hoisted_3$h = [
    _hoisted_2$h
  ];
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$h, 14, _hoisted_1$h);
  }
  var _IconStamp = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$h]]);
  const IconStamp = Object.assign(_IconStamp, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconStamp.name, _IconStamp);
    }
  });
  const _sfc_main$g = vue.defineComponent({
    name: "IconStorage",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-storage`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$g = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$g = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 18h34v12H7V18ZM40 6H8a1 1 0 0 0-1 1v11h34V7a1 1 0 0 0-1-1ZM7 30h34v11a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1V30Z" }, null, -1);
  const _hoisted_3$g = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13.02 36H13v.02h.02V36Z" }, null, -1);
  const _hoisted_4$7 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M13 12v-2h-2v2h2Zm.02 0h2v-2h-2v2Zm0 .02v2h2v-2h-2Zm-.02 0h-2v2h2v-2ZM13 14h.02v-4H13v4Zm-1.98-2v.02h4V12h-4Zm2-1.98H13v4h.02v-4Zm1.98 2V12h-4v.02h4Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_5$3 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M13.02 24H13v.02h.02V24Z" }, null, -1);
  const _hoisted_6 = [
    _hoisted_2$g,
    _hoisted_3$g,
    _hoisted_4$7,
    _hoisted_5$3
  ];
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_6, 14, _hoisted_1$g);
  }
  var _IconStorage = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$g]]);
  const IconStorage = Object.assign(_IconStorage, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconStorage.name, _IconStorage);
    }
  });
  const _sfc_main$f = vue.defineComponent({
    name: "IconSubscribeAdd",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-subscribe-add`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$f = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$f = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24.53 6.007H9.97c-.535 0-.97.449-.97 1.003V41.8c0 .148.152.245.28.179l15.25-7.881 14.248 7.88c.129.067.28-.03.28-.179V22.06M27.413 11.023h6.794m0 0H41m-6.794 0V4m0 7.023v7.023" }, null, -1);
  const _hoisted_3$f = [
    _hoisted_2$f
  ];
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$f, 14, _hoisted_1$f);
  }
  var _IconSubscribeAdd = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$f]]);
  const IconSubscribeAdd = Object.assign(_IconSubscribeAdd, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSubscribeAdd.name, _IconSubscribeAdd);
    }
  });
  const _sfc_main$e = vue.defineComponent({
    name: "IconSubscribe",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-subscribe`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$e = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$e = /* @__PURE__ */ vue.createElementVNode("path", { d: "M9 7v34.667a.2.2 0 0 0 .294.176L24 34l14.706 7.843a.2.2 0 0 0 .294-.176V7a1 1 0 0 0-1-1H10a1 1 0 0 0-1 1Z" }, null, -1);
  const _hoisted_3$e = [
    _hoisted_2$e
  ];
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$e, 14, _hoisted_1$e);
  }
  var _IconSubscribe = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$e]]);
  const IconSubscribe = Object.assign(_IconSubscribe, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSubscribe.name, _IconSubscribe);
    }
  });
  const _sfc_main$d = vue.defineComponent({
    name: "IconSubscribed",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-subscribed`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$d = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$d = /* @__PURE__ */ vue.createElementVNode("path", { d: "m31.289 15.596-9.193 9.193-4.95-4.95M24 34l14.706 7.843a.2.2 0 0 0 .294-.176V7a1 1 0 0 0-1-1H10a1 1 0 0 0-1 1v34.667a.2.2 0 0 0 .294.176L24 34Z" }, null, -1);
  const _hoisted_3$d = [
    _hoisted_2$d
  ];
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$d, 14, _hoisted_1$d);
  }
  var _IconSubscribed = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$d]]);
  const IconSubscribed = Object.assign(_IconSubscribed, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSubscribed.name, _IconSubscribed);
    }
  });
  const _sfc_main$c = vue.defineComponent({
    name: "IconSun",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-sun`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$c = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$c = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "24",
    r: "7"
  }, null, -1);
  const _hoisted_3$c = /* @__PURE__ */ vue.createElementVNode("path", { d: "M23 7h2v2h-2zM23 39h2v2h-2zM41 23v2h-2v-2zM9 23v2H7v-2zM36.73 35.313l-1.415 1.415-1.414-1.415 1.414-1.414zM14.099 12.686l-1.414 1.415-1.414-1.415 1.414-1.414zM12.687 36.728l-1.414-1.415 1.414-1.414 1.414 1.414zM35.314 14.1 33.9 12.686l1.414-1.414 1.415 1.414z" }, null, -1);
  const _hoisted_4$6 = /* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    stroke: "none",
    d: "M23 7h2v2h-2zM23 39h2v2h-2zM41 23v2h-2v-2zM9 23v2H7v-2zM36.73 35.313l-1.415 1.415-1.414-1.415 1.414-1.414zM14.099 12.686l-1.414 1.415-1.414-1.415 1.414-1.414zM12.687 36.728l-1.414-1.415 1.414-1.414 1.414 1.414zM35.314 14.1 33.9 12.686l1.414-1.414 1.415 1.414z"
  }, null, -1);
  const _hoisted_5$2 = [
    _hoisted_2$c,
    _hoisted_3$c,
    _hoisted_4$6
  ];
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$2, 14, _hoisted_1$c);
  }
  var _IconSun = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$c]]);
  const IconSun = Object.assign(_IconSun, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconSun.name, _IconSun);
    }
  });
  const _sfc_main$b = vue.defineComponent({
    name: "IconTag",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-tag`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$b = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$b = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24.835 6.035a1 1 0 0 1 .903-.273l12.964 2.592a1 1 0 0 1 .784.785l2.593 12.963a1 1 0 0 1-.274.904L21.678 43.133a1 1 0 0 1-1.415 0L4.708 27.577a1 1 0 0 1 0-1.414L24.835 6.035Z" }, null, -1);
  const _hoisted_3$b = /* @__PURE__ */ vue.createElementVNode("path", { d: "M31.577 17.346a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z" }, null, -1);
  const _hoisted_4$5 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M31.582 17.349a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_5$1 = [
    _hoisted_2$b,
    _hoisted_3$b,
    _hoisted_4$5
  ];
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5$1, 14, _hoisted_1$b);
  }
  var _IconTag = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$b]]);
  const IconTag = Object.assign(_IconTag, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTag.name, _IconTag);
    }
  });
  const _sfc_main$a = vue.defineComponent({
    name: "IconTags",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-tags`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$a = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$a = /* @__PURE__ */ vue.createElementVNode("path", { d: "m37.581 28.123-14.849 14.85a1 1 0 0 1-1.414 0L8.59 30.243m25.982-22.68-10.685-.628a1 1 0 0 0-.766.291L9.297 21.052a1 1 0 0 0 0 1.414L20.61 33.78a1 1 0 0 0 1.415 0l13.824-13.825a1 1 0 0 0 .291-.765l-.628-10.686a1 1 0 0 0-.94-.94Zm-6.874 7.729a1 1 0 1 1 1.414-1.414 1 1 0 0 1-1.414 1.414Z" }, null, -1);
  const _hoisted_3$a = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M27.697 15.292a1 1 0 1 1 1.414-1.414 1 1 0 0 1-1.414 1.414Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4$4 = [
    _hoisted_2$a,
    _hoisted_3$a
  ];
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$4, 14, _hoisted_1$a);
  }
  var _IconTags = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$a]]);
  const IconTags = Object.assign(_IconTags, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTags.name, _IconTags);
    }
  });
  const _sfc_main$9 = vue.defineComponent({
    name: "IconThunderbolt",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-thunderbolt`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$9 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$9 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M27.824 5.203A.1.1 0 0 1 28 5.27V21h10.782a.1.1 0 0 1 .075.165L20.176 42.797A.1.1 0 0 1 20 42.73V27H9.219a.1.1 0 0 1-.076-.165L27.824 5.203Z" }, null, -1);
  const _hoisted_3$9 = [
    _hoisted_2$9
  ];
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$9, 14, _hoisted_1$9);
  }
  var _IconThunderbolt = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$9]]);
  const IconThunderbolt = Object.assign(_IconThunderbolt, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconThunderbolt.name, _IconThunderbolt);
    }
  });
  const _sfc_main$8 = vue.defineComponent({
    name: "IconTool",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-tool`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$8 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$8 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M19.994 11.035c3.66-3.659 9.094-4.46 13.531-2.405a.1.1 0 0 1 .028.16l-6.488 6.488a1 1 0 0 0 0 1.414l4.243 4.243a1 1 0 0 0 1.414 0l6.488-6.488a.1.1 0 0 1 .16.028c2.056 4.437 1.254 9.872-2.405 13.53-3.695 3.696-9.2 4.477-13.66 2.347L12.923 40.733a1 1 0 0 1-1.414 0L7.266 36.49a1 1 0 0 1 0-1.414l10.382-10.382c-2.13-4.46-1.349-9.965 2.346-13.66Z" }, null, -1);
  const _hoisted_3$8 = [
    _hoisted_2$8
  ];
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$8, 14, _hoisted_1$8);
  }
  var _IconTool = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$8]]);
  const IconTool = Object.assign(_IconTool, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTool.name, _IconTool);
    }
  });
  const _sfc_main$7 = vue.defineComponent({
    name: "IconTrophy",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-trophy`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$7 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$7 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 33c-6.075 0-11-4.925-11-11m11 11c6.075 0 11-4.925 11-11M24 33v8M13 22V7h22v15m-22 0V9H7v7a6 6 0 0 0 6 6Zm22 0V9h6v7a6 6 0 0 1-6 6ZM12 41h24" }, null, -1);
  const _hoisted_3$7 = [
    _hoisted_2$7
  ];
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$7, 14, _hoisted_1$7);
  }
  var _IconTrophy = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$7]]);
  const IconTrophy = Object.assign(_IconTrophy, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconTrophy.name, _IconTrophy);
    }
  });
  const _sfc_main$6 = vue.defineComponent({
    name: "IconUnlock",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-unlock`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$6 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$6 = /* @__PURE__ */ vue.createElementVNode("rect", {
    x: "7",
    y: "21",
    width: "34",
    height: "20",
    rx: "1"
  }, null, -1);
  const _hoisted_3$6 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M44 15a9 9 0 1 0-18 0v6M24 35v-8" }, null, -1);
  const _hoisted_4$3 = [
    _hoisted_2$6,
    _hoisted_3$6
  ];
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$3, 14, _hoisted_1$6);
  }
  var _IconUnlock = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$6]]);
  const IconUnlock = Object.assign(_IconUnlock, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUnlock.name, _IconUnlock);
    }
  });
  const _sfc_main$5 = vue.defineComponent({
    name: "IconUserAdd",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-user-add`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$5 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$5 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M25 27h-8c-5.523 0-10 4.477-10 10v4h18m11-14v8m0 0v8m0-8h8m-8 0h-8m3-21a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" }, null, -1);
  const _hoisted_3$5 = [
    _hoisted_2$5
  ];
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$5, 14, _hoisted_1$5);
  }
  var _IconUserAdd = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$5]]);
  const IconUserAdd = Object.assign(_IconUserAdd, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUserAdd.name, _IconUserAdd);
    }
  });
  const _sfc_main$4 = vue.defineComponent({
    name: "IconUserGroup",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-user-group`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$4 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$4 = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "18",
    cy: "15",
    r: "7"
  }, null, -1);
  const _hoisted_3$4 = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "34",
    cy: "19",
    r: "4"
  }, null, -1);
  const _hoisted_4$2 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M6 34a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v6H6v-6ZM34 30h4a4 4 0 0 1 4 4v4h-8" }, null, -1);
  const _hoisted_5 = [
    _hoisted_2$4,
    _hoisted_3$4,
    _hoisted_4$2
  ];
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_5, 14, _hoisted_1$4);
  }
  var _IconUserGroup = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4]]);
  const IconUserGroup = Object.assign(_IconUserGroup, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUserGroup.name, _IconUserGroup);
    }
  });
  const _sfc_main$3 = vue.defineComponent({
    name: "IconUser",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-user`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$3 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$3 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M7 37c0-4.97 4.03-8 9-8h16c4.97 0 9 3.03 9 8v3a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-3Z" }, null, -1);
  const _hoisted_3$3 = /* @__PURE__ */ vue.createElementVNode("circle", {
    cx: "24",
    cy: "15",
    r: "8"
  }, null, -1);
  const _hoisted_4$1 = [
    _hoisted_2$3,
    _hoisted_3$3
  ];
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4$1, 14, _hoisted_1$3);
  }
  var _IconUser = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3]]);
  const IconUser = Object.assign(_IconUser, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconUser.name, _IconUser);
    }
  });
  const _sfc_main$2 = vue.defineComponent({
    name: "IconVideoCamera",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-video-camera`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$2 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$2 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M33 18v12m0-12v-6a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v24a1 1 0 0 0 1 1h25a1 1 0 0 0 1-1v-6m0-12 8.713-2.614a1 1 0 0 1 1.287.958v15.312a1 1 0 0 1-1.287.958L33 30M11 19h6" }, null, -1);
  const _hoisted_3$2 = [
    _hoisted_2$2
  ];
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3$2, 14, _hoisted_1$2);
  }
  var _IconVideoCamera = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
  const IconVideoCamera = Object.assign(_IconVideoCamera, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconVideoCamera.name, _IconVideoCamera);
    }
  });
  const _sfc_main$1 = vue.defineComponent({
    name: "IconWifi",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-wifi`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1$1 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2$1 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M31.587 31.485A9.978 9.978 0 0 0 24 28a9.977 9.977 0 0 0-7.586 3.485M37.255 25.822A17.953 17.953 0 0 0 24 20a17.953 17.953 0 0 0-13.256 5.822M43.618 19.449C38.696 14.246 31.728 11 24 11c-7.727 0-14.696 3.246-19.617 8.449" }, null, -1);
  const _hoisted_3$1 = /* @__PURE__ */ vue.createElementVNode("path", {
    d: "M27.535 35.465a5 5 0 0 0-7.07 0L24 39l3.535-3.535Z",
    fill: "currentColor",
    stroke: "none"
  }, null, -1);
  const _hoisted_4 = [
    _hoisted_2$1,
    _hoisted_3$1
  ];
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_4, 14, _hoisted_1$1);
  }
  var _IconWifi = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
  const IconWifi = Object.assign(_IconWifi, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconWifi.name, _IconWifi);
    }
  });
  const _sfc_main = vue.defineComponent({
    name: "IconWoman",
    props: {
      size: {
        type: [Number, String]
      },
      strokeWidth: {
        type: Number,
        default: 4
      },
      strokeLinecap: {
        type: String,
        default: "butt",
        validator: (value) => {
          return ["butt", "round", "square"].includes(value);
        }
      },
      strokeLinejoin: {
        type: String,
        default: "miter",
        validator: (value) => {
          return ["arcs", "bevel", "miter", "miter-clip", "round"].includes(value);
        }
      },
      rotate: Number,
      spin: Boolean
    },
    emits: {
      click: (ev) => true
    },
    setup(props, { emit }) {
      const prefixCls = getPrefixCls("icon");
      const cls = vue.computed(() => [prefixCls, `${prefixCls}-woman`, { [`${prefixCls}-spin`]: props.spin }]);
      const innerStyle = vue.computed(() => {
        const styles = {};
        if (props.size) {
          styles.fontSize = isNumber(props.size) ? `${props.size}px` : props.size;
        }
        if (props.rotate) {
          styles.transform = `rotate(${props.rotate}deg)`;
        }
        return styles;
      });
      const onClick = (ev) => {
        emit("click", ev);
      };
      return {
        cls,
        innerStyle,
        onClick
      };
    }
  });
  const _hoisted_1 = ["stroke-width", "stroke-linecap", "stroke-linejoin"];
  const _hoisted_2 = /* @__PURE__ */ vue.createElementVNode("path", { d: "M24 29c6.075 0 11-4.925 11-11S30.075 7 24 7s-11 4.925-11 11 4.925 11 11 11Zm0 0v15M15 36h18" }, null, -1);
  const _hoisted_3 = [
    _hoisted_2
  ];
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("svg", {
      viewBox: "0 0 48 48",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      class: vue.normalizeClass(_ctx.cls),
      style: vue.normalizeStyle(_ctx.innerStyle),
      "stroke-width": _ctx.strokeWidth,
      "stroke-linecap": _ctx.strokeLinecap,
      "stroke-linejoin": _ctx.strokeLinejoin,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
    }, _hoisted_3, 14, _hoisted_1);
  }
  var _IconWoman = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
  const IconWoman = Object.assign(_IconWoman, {
    install: (app, options) => {
      var _a;
      const iconPrefix = (_a = options == null ? void 0 : options.iconPrefix) != null ? _a : "";
      app.component(iconPrefix + _IconWoman.name, _IconWoman);
    }
  });
  const icons = {
    IconArrowDown,
    IconArrowFall,
    IconArrowLeft,
    IconArrowRight,
    IconArrowRise,
    IconArrowUp,
    IconCaretDown,
    IconCaretLeft,
    IconCaretRight,
    IconCaretUp,
    IconDoubleDown,
    IconDoubleLeft,
    IconDoubleRight,
    IconDoubleUp,
    IconDownCircle,
    IconDown,
    IconDragArrow,
    IconExpand,
    IconLeftCircle,
    IconLeft,
    IconMenuFold,
    IconMenuUnfold,
    IconRightCircle,
    IconRight,
    IconRotateLeft,
    IconRotateRight,
    IconShrink,
    IconSwap,
    IconToBottom,
    IconToLeft,
    IconToRight,
    IconToTop,
    IconUpCircle,
    IconUp,
    IconCheckCircleFill,
    IconCloseCircleFill,
    IconExclamationCircleFill,
    IconExclamationPolygonFill,
    IconInfoCircleFill,
    IconMinusCircleFill,
    IconPlusCircleFill,
    IconQuestionCircleFill,
    IconCheckCircle,
    IconCheckSquare,
    IconCheck,
    IconClockCircle,
    IconCloseCircle,
    IconClose,
    IconExclamationCircle,
    IconExclamation,
    IconInfoCircle,
    IconInfo,
    IconMinusCircle,
    IconMinus,
    IconPlusCircle,
    IconPlus,
    IconQuestionCircle,
    IconQuestion,
    IconStop,
    IconHeartFill,
    IconStarFill,
    IconThumbDownFill,
    IconThumbUpFill,
    IconAt,
    IconCloudDownload,
    IconCodeBlock,
    IconCodeSquare,
    IconCode,
    IconCustomerService,
    IconDownload,
    IconExport,
    IconEyeInvisible,
    IconEye,
    IconHeart,
    IconHistory,
    IconHome,
    IconImport,
    IconLaunch,
    IconList,
    IconMessageBanned,
    IconMessage,
    IconMoreVertical,
    IconMore,
    IconPoweroff,
    IconRefresh,
    IconReply,
    IconSave,
    IconScan,
    IconSearch,
    IconSelectAll,
    IconSend,
    IconSettings,
    IconShareAlt,
    IconShareExternal,
    IconShareInternal,
    IconStar,
    IconSync,
    IconThumbDown,
    IconThumbUp,
    IconTranslate,
    IconUpload,
    IconVoice,
    IconAlignCenter,
    IconAlignLeft,
    IconAlignRight,
    IconAttachment,
    IconBgColors,
    IconBold,
    IconBrush,
    IconCopy,
    IconDelete,
    IconEdit,
    IconEraser,
    IconFilter,
    IconFindReplace,
    IconFontColors,
    IconFormula,
    IconH1,
    IconH2,
    IconH3,
    IconH4,
    IconH5,
    IconH6,
    IconH7,
    IconHighlight,
    IconItalic,
    IconLineHeight,
    IconLink,
    IconObliqueLine,
    IconOrderedList,
    IconOriginalSize,
    IconPaste,
    IconQuote,
    IconRedo,
    IconScissor,
    IconSortAscending,
    IconSortDescending,
    IconSort,
    IconStrikethrough,
    IconUnderline,
    IconUndo,
    IconUnorderedList,
    IconZoomIn,
    IconZoomOut,
    IconMuteFill,
    IconPauseCircleFill,
    IconPlayArrowFill,
    IconPlayCircleFill,
    IconSkipNextFill,
    IconSkipPreviousFill,
    IconSoundFill,
    IconBackward,
    IconForward,
    IconFullscreenExit,
    IconFullscreen,
    IconLiveBroadcast,
    IconMusic,
    IconMute,
    IconPauseCircle,
    IconPause,
    IconPlayArrow,
    IconPlayCircle,
    IconRecordStop,
    IconRecord,
    IconSkipNext,
    IconSkipPrevious,
    IconSound,
    IconBytedanceColor,
    IconLarkColor,
    IconTiktokColor,
    IconXiguaColor,
    IconFaceBookCircleFill,
    IconFacebookSquareFill,
    IconGoogleCircleFill,
    IconQqCircleFill,
    IconTwitterCircleFill,
    IconWeiboCircleFill,
    IconAlipayCircle,
    IconCodeSandbox,
    IconCodepen,
    IconFacebook,
    IconGithub,
    IconGitlab,
    IconGoogle,
    IconQqZone,
    IconQq,
    IconTwitter,
    IconWechat,
    IconWechatpay,
    IconWeibo,
    IconChineseFill,
    IconEnglishFill,
    IconFaceFrownFill,
    IconFaceMehFill,
    IconFaceSmileFill,
    IconMoonFill,
    IconPenFill,
    IconSunFill,
    IconApps,
    IconArchive,
    IconBarChart,
    IconBook,
    IconBookmark,
    IconBranch,
    IconBug,
    IconBulb,
    IconCalendarClock,
    IconCalendar,
    IconCamera,
    IconCloud,
    IconCommand,
    IconCommon,
    IconCompass,
    IconComputer,
    IconCopyright,
    IconDashboard,
    IconDesktop,
    IconDice,
    IconDragDotVertical,
    IconDragDot,
    IconDriveFile,
    IconEar,
    IconEmail,
    IconEmpty,
    IconExperiment,
    IconFileAudio,
    IconFileImage,
    IconFilePdf,
    IconFileVideo,
    IconFile,
    IconFire,
    IconFolderAdd,
    IconFolderDelete,
    IconFolder,
    IconGift,
    IconIdcard,
    IconImageClose,
    IconImage,
    IconInteraction,
    IconLanguage,
    IconLayers,
    IconLayout,
    IconLoading,
    IconLocation,
    IconLock,
    IconLoop,
    IconMan,
    IconMenu,
    IconMindMapping,
    IconMobile,
    IconMoon,
    IconMosaic,
    IconNav,
    IconNotificationClose,
    IconNotification,
    IconPalette,
    IconPen,
    IconPhone,
    IconPrinter,
    IconPublic,
    IconPushpin,
    IconQrcode,
    IconRelation,
    IconRobotAdd,
    IconRobot,
    IconSafe,
    IconSchedule,
    IconShake,
    IconSkin,
    IconStamp,
    IconStorage,
    IconSubscribeAdd,
    IconSubscribe,
    IconSubscribed,
    IconSun,
    IconTag,
    IconTags,
    IconThunderbolt,
    IconTool,
    IconTrophy,
    IconUnlock,
    IconUserAdd,
    IconUserGroup,
    IconUser,
    IconVideoCamera,
    IconWifi,
    IconWoman
  };
  const install = (app, options) => {
    for (const key of Object.keys(icons)) {
      app.use(icons[key], options);
    }
  };
  const ArcoVueIcon = __spreadProps(__spreadValues({}, icons), {
    install
  });
  return ArcoVueIcon;
});
//# sourceMappingURL=arco-vue-icon.js.map
