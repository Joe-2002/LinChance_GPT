import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Card from './card';
import _CardMeta from './card-meta';
import _CardGrid from './card-grid';
declare const Card: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            headerStyle: Record<string, any>;
            bodyStyle: Record<string, any>;
        }> & Omit<Readonly<{
            bordered?: unknown;
            loading?: unknown;
            hoverable?: unknown;
            size?: unknown;
            headerStyle?: unknown;
            bodyStyle?: unknown;
            title?: unknown;
            extra?: unknown;
        } & {
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            headerStyle: Record<string, any>;
            bodyStyle: Record<string, any>;
        } & {
            size?: "medium" | "small" | undefined;
            title?: string | undefined;
            extra?: string | undefined;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "loading" | "bordered" | "hoverable" | "headerStyle" | "bodyStyle">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            bordered?: unknown;
            loading?: unknown;
            hoverable?: unknown;
            size?: unknown;
            headerStyle?: unknown;
            bodyStyle?: unknown;
            title?: unknown;
            extra?: unknown;
        } & {
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            headerStyle: Record<string, any>;
            bodyStyle: Record<string, any>;
        } & {
            size?: "medium" | "small" | undefined;
            title?: string | undefined;
            extra?: string | undefined;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            headerStyle: Record<string, any>;
            bodyStyle: Record<string, any>;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        bordered?: unknown;
        loading?: unknown;
        hoverable?: unknown;
        size?: unknown;
        headerStyle?: unknown;
        bodyStyle?: unknown;
        title?: unknown;
        extra?: unknown;
    } & {
        loading: boolean;
        bordered: boolean;
        hoverable: boolean;
        headerStyle: Record<string, any>;
        bodyStyle: Record<string, any>;
    } & {
        size?: "medium" | "small" | undefined;
        title?: string | undefined;
        extra?: string | undefined;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    bordered?: unknown;
    loading?: unknown;
    hoverable?: unknown;
    size?: unknown;
    headerStyle?: unknown;
    bodyStyle?: unknown;
    title?: unknown;
    extra?: unknown;
} & {
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    headerStyle: Record<string, any>;
    bodyStyle: Record<string, any>;
} & {
    size?: "medium" | "small" | undefined;
    title?: string | undefined;
    extra?: string | undefined;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    headerStyle: Record<string, any>;
    bodyStyle: Record<string, any>;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Meta: import("vue").DefineComponent<{
        title: {
            type: StringConstructor;
        };
        description: {
            type: StringConstructor;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        title?: unknown;
        description?: unknown;
    } & {} & {
        title?: string | undefined;
        description?: string | undefined;
    }>, {}>;
    Grid: import("vue").DefineComponent<{
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        hoverable?: unknown;
    } & {
        hoverable: boolean;
    } & {}>, {
        hoverable: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type CardInstance = InstanceType<typeof _Card>;
export declare type CardMetaInstance = InstanceType<typeof _CardMeta>;
export declare type CardGridInstance = InstanceType<typeof _CardGrid>;
export { _CardMeta as CardMeta, _CardGrid as CardGrid };
export default Card;
