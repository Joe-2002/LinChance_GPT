import type { PropType } from 'vue';
import type { TagProps } from '../tag';
declare const _default: import("vue").DefineComponent<{
    value: (ObjectConstructor | StringConstructor | NumberConstructor)[];
    label: StringConstructor;
    disabled: BooleanConstructor;
    tagProps: {
        type: PropType<TagProps>;
    };
    extra: {
        type: ObjectConstructor;
    };
    index: {
        type: NumberConstructor;
    };
    internal: BooleanConstructor;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | undefined;
    })[]>;
    selectCtx: import("./context").SelectContext | undefined;
    itemRef: import("vue").Ref<HTMLElement | undefined>;
    component: import("vue").ComputedRef<string>;
    isSelected: import("vue").ComputedRef<boolean>;
    isValid: import("vue").Ref<boolean>;
    handleClick: (ev: MouseEvent) => void;
    handleMouseEnter: () => void;
    handleMouseLeave: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value?: unknown;
    label?: unknown;
    disabled?: unknown;
    tagProps?: unknown;
    extra?: unknown;
    index?: unknown;
    internal?: unknown;
} & {
    disabled: boolean;
    internal: boolean;
} & {
    label?: string | undefined;
    value?: string | number | Record<string, any> | undefined;
    tagProps?: TagProps | undefined;
    index?: number | undefined;
    extra?: Record<string, any> | undefined;
}>, {
    disabled: boolean;
    internal: boolean;
}>;
export default _default;
