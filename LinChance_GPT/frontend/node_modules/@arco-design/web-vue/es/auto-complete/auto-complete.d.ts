import { PropType } from 'vue';
import { TriggerProps } from '../trigger';
import { FilterOption, SelectOptionData, SelectOptionGroup } from '../select/interface';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    data: {
        type: PropType<(string | number | SelectOptionData | SelectOptionGroup)[]>;
        default: () => never[];
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
    };
    strict: {
        type: BooleanConstructor;
        default: boolean;
    };
    filterOption: {
        type: PropType<FilterOption>;
        default: boolean;
    };
    triggerProps: {
        type: PropType<TriggerProps>;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string) => true;
    change: (value: string) => true;
    search: (value: string) => true;
    select: (value: string) => true;
    clear: (ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    disabled?: unknown;
    data?: unknown;
    popupContainer?: unknown;
    strict?: unknown;
    filterOption?: unknown;
    triggerProps?: unknown;
    allowClear?: unknown;
} & {
    disabled: boolean;
    strict: boolean;
    data: (string | number | SelectOptionData | SelectOptionGroup)[];
    defaultValue: string;
    allowClear: boolean;
    filterOption: FilterOption;
} & {
    popupContainer?: string | HTMLElement | null | undefined;
    modelValue?: string | undefined;
    triggerProps?: TriggerProps | undefined;
}> & {
    onChange?: ((value: string) => any) | undefined;
    onSelect?: ((value: string) => any) | undefined;
    onClear?: ((ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    onSearch?: ((value: string) => any) | undefined;
}, {
    disabled: boolean;
    strict: boolean;
    data: (string | number | SelectOptionData | SelectOptionGroup)[];
    modelValue: string;
    defaultValue: string;
    allowClear: boolean;
    filterOption: FilterOption;
}>;
export default _default;
