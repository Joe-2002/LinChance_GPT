import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Trigger from './trigger';
declare const Trigger: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            disabled: boolean;
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            animationName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
            scrollToClose: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedClass?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            scrollToClose?: unknown;
        } & {
            defaultPopupVisible: boolean;
            trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            disabled: boolean;
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            animationName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
            scrollToClose: boolean;
        } & {
            popupVisible?: boolean | undefined;
            popupTranslate?: import("./interface").TriggerPopupTranslate | undefined;
            contentClass?: string | unknown[] | Record<string, any> | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: string | unknown[] | Record<string, any> | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupStyle?: import("vue").CSSProperties | undefined;
            duration?: number | {
                enter: number;
                leave: number;
            } | undefined;
            popupContainer?: string | HTMLElement | undefined;
            openedClass?: string | unknown[] | Record<string, any> | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
            onShow?: (() => any) | undefined;
            onHide?: (() => any) | undefined;
            onResize?: (() => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "popupVisible" | "defaultPopupVisible" | "trigger" | "position" | "disabled" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "animationName" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus" | "scrollToClose">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:popupVisible", visible: boolean) => void) & ((event: "popupVisibleChange", visible: boolean) => void) & ((event: "show") => void) & ((event: "hide") => void) & ((event: "resize") => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedClass?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            scrollToClose?: unknown;
        } & {
            defaultPopupVisible: boolean;
            trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            disabled: boolean;
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            animationName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
            scrollToClose: boolean;
        } & {
            popupVisible?: boolean | undefined;
            popupTranslate?: import("./interface").TriggerPopupTranslate | undefined;
            contentClass?: string | unknown[] | Record<string, any> | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: string | unknown[] | Record<string, any> | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupStyle?: import("vue").CSSProperties | undefined;
            duration?: number | {
                enter: number;
                leave: number;
            } | undefined;
            popupContainer?: string | HTMLElement | undefined;
            openedClass?: string | unknown[] | Record<string, any> | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
            onShow?: (() => any) | undefined;
            onHide?: (() => any) | undefined;
            onResize?: (() => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:popupVisible': (visible: boolean) => true;
            popupVisibleChange: (visible: boolean) => true;
            show: () => true;
            hide: () => true;
            resize: () => true;
        }, string, {
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
            position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
            disabled: boolean;
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            animationName: string;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
            scrollToClose: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        disabled?: unknown;
        popupOffset?: unknown;
        popupTranslate?: unknown;
        showArrow?: unknown;
        alignPoint?: unknown;
        popupHoverStay?: unknown;
        blurToClose?: unknown;
        clickToClose?: unknown;
        clickOutsideToClose?: unknown;
        unmountOnClose?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupStyle?: unknown;
        animationName?: unknown;
        duration?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        focusDelay?: unknown;
        autoFitPopupWidth?: unknown;
        autoFitPopupMinWidth?: unknown;
        autoFixPosition?: unknown;
        popupContainer?: unknown;
        updateAtScroll?: unknown;
        autoFitTransformOrigin?: unknown;
        hideEmpty?: unknown;
        openedClass?: unknown;
        autoFitPosition?: unknown;
        renderToBody?: unknown;
        preventFocus?: unknown;
        scrollToClose?: unknown;
    } & {
        defaultPopupVisible: boolean;
        trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
        position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
        disabled: boolean;
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        animationName: string;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
        scrollToClose: boolean;
    } & {
        popupVisible?: boolean | undefined;
        popupTranslate?: import("./interface").TriggerPopupTranslate | undefined;
        contentClass?: string | unknown[] | Record<string, any> | undefined;
        contentStyle?: import("vue").CSSProperties | undefined;
        arrowClass?: string | unknown[] | Record<string, any> | undefined;
        arrowStyle?: import("vue").CSSProperties | undefined;
        popupStyle?: import("vue").CSSProperties | undefined;
        duration?: number | {
            enter: number;
            leave: number;
        } | undefined;
        popupContainer?: string | HTMLElement | undefined;
        openedClass?: string | unknown[] | Record<string, any> | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
        onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
        onShow?: (() => any) | undefined;
        onHide?: (() => any) | undefined;
        onResize?: (() => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    trigger?: unknown;
    position?: unknown;
    disabled?: unknown;
    popupOffset?: unknown;
    popupTranslate?: unknown;
    showArrow?: unknown;
    alignPoint?: unknown;
    popupHoverStay?: unknown;
    blurToClose?: unknown;
    clickToClose?: unknown;
    clickOutsideToClose?: unknown;
    unmountOnClose?: unknown;
    contentClass?: unknown;
    contentStyle?: unknown;
    arrowClass?: unknown;
    arrowStyle?: unknown;
    popupStyle?: unknown;
    animationName?: unknown;
    duration?: unknown;
    mouseEnterDelay?: unknown;
    mouseLeaveDelay?: unknown;
    focusDelay?: unknown;
    autoFitPopupWidth?: unknown;
    autoFitPopupMinWidth?: unknown;
    autoFixPosition?: unknown;
    popupContainer?: unknown;
    updateAtScroll?: unknown;
    autoFitTransformOrigin?: unknown;
    hideEmpty?: unknown;
    openedClass?: unknown;
    autoFitPosition?: unknown;
    renderToBody?: unknown;
    preventFocus?: unknown;
    scrollToClose?: unknown;
} & {
    defaultPopupVisible: boolean;
    trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
    position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
    disabled: boolean;
    popupOffset: number;
    showArrow: boolean;
    alignPoint: boolean;
    popupHoverStay: boolean;
    blurToClose: boolean;
    clickToClose: boolean;
    clickOutsideToClose: boolean;
    unmountOnClose: boolean;
    animationName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    autoFitPopupWidth: boolean;
    autoFitPopupMinWidth: boolean;
    autoFixPosition: boolean;
    updateAtScroll: boolean;
    autoFitTransformOrigin: boolean;
    hideEmpty: boolean;
    autoFitPosition: boolean;
    renderToBody: boolean;
    preventFocus: boolean;
    scrollToClose: boolean;
} & {
    popupVisible?: boolean | undefined;
    popupTranslate?: import("./interface").TriggerPopupTranslate | undefined;
    contentClass?: string | unknown[] | Record<string, any> | undefined;
    contentStyle?: import("vue").CSSProperties | undefined;
    arrowClass?: string | unknown[] | Record<string, any> | undefined;
    arrowStyle?: import("vue").CSSProperties | undefined;
    popupStyle?: import("vue").CSSProperties | undefined;
    duration?: number | {
        enter: number;
        leave: number;
    } | undefined;
    popupContainer?: string | HTMLElement | undefined;
    openedClass?: string | unknown[] | Record<string, any> | undefined;
}> & {
    "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
    onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
    onShow?: (() => any) | undefined;
    onHide?: (() => any) | undefined;
    onResize?: (() => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:popupVisible': (visible: boolean) => true;
    popupVisibleChange: (visible: boolean) => true;
    show: () => true;
    hide: () => true;
    resize: () => true;
}, string, {
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    trigger: "hover" | "click" | "focus" | "contextMenu" | ("hover" | "click" | "focus" | "contextMenu")[];
    position: "top" | "tl" | "tr" | "bottom" | "bl" | "br" | "left" | "lt" | "lb" | "right" | "rt" | "rb";
    disabled: boolean;
    popupOffset: number;
    showArrow: boolean;
    alignPoint: boolean;
    popupHoverStay: boolean;
    blurToClose: boolean;
    clickToClose: boolean;
    clickOutsideToClose: boolean;
    unmountOnClose: boolean;
    animationName: string;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    autoFitPopupWidth: boolean;
    autoFitPopupMinWidth: boolean;
    autoFixPosition: boolean;
    updateAtScroll: boolean;
    autoFitTransformOrigin: boolean;
    hideEmpty: boolean;
    autoFitPosition: boolean;
    renderToBody: boolean;
    preventFocus: boolean;
    scrollToClose: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TriggerInstance = InstanceType<typeof _Trigger>;
export type { TriggerEvent, TriggerPosition } from '../_utils/constant';
export type { TriggerProps, TriggerPopupTranslate } from './interface';
export default Trigger;
