import type { CSSProperties, PropType, StyleValue } from 'vue';
import { ButtonProps } from '../button';
declare const _default: import("vue").DefineComponent<{
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
    };
    top: {
        type: (StringConstructor | NumberConstructor)[];
    };
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
    };
    titleAlign: {
        type: PropType<"center" | "start">;
        default: string;
    };
    alignCenter: {
        type: BooleanConstructor;
        default: boolean;
    };
    unmountOnClose: BooleanConstructor;
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCancel: {
        type: BooleanConstructor;
        default: boolean;
    };
    simple: {
        type: BooleanConstructor;
        default: (props: any) => any;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    okText: StringConstructor;
    cancelText: StringConstructor;
    okLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    okButtonProps: {
        type: PropType<ButtonProps>;
    };
    cancelButtonProps: {
        type: PropType<ButtonProps>;
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
        default: string;
    };
    maskStyle: {
        type: PropType<CSSProperties>;
    };
    modalClass: {
        type: PropType<string | any[]>;
    };
    modalStyle: {
        type: PropType<CSSProperties>;
    };
    onBeforeOk: {
        type: PropType<(done: (closed: boolean) => void) => void | boolean | Promise<void | boolean>>;
    };
    onBeforeCancel: {
        type: PropType<() => boolean>;
    };
    escToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskAnimationName: {
        type: StringConstructor;
        default: (props: Record<string, any>) => "fade-in-standard" | "fade-modal";
    };
    modalAnimationName: {
        type: StringConstructor;
        default: (props: Record<string, any>) => "zoom-in" | "zoom-modal";
    };
    bodyClass: {
        type: PropType<string | any[]>;
    };
    bodyStyle: {
        type: PropType<StyleValue>;
    };
    messageType: {
        type: PropType<"error" | "success" | "warning" | "info">;
    };
}, {
    prefixCls: string;
    mounted: import("vue").Ref<boolean>;
    computedVisible: import("vue").ComputedRef<boolean>;
    containerRef: import("vue").Ref<HTMLElement | undefined>;
    wrapperRef: import("vue").Ref<HTMLElement | undefined>;
    mergedModalStyle: import("vue").ComputedRef<CSSProperties>;
    okDisplayText: import("vue").ComputedRef<string>;
    cancelDisplayText: import("vue").ComputedRef<string>;
    zIndex: import("vue").Ref<number>;
    handleOk: (e: Event) => Promise<void>;
    handleCancel: (e: Event) => void;
    handleMaskClick: (e: Event) => void;
    handleMaskMouseDown: (ev: Event) => void;
    handleOpen: () => void;
    handleClose: () => void;
    mergedOkLoading: import("vue").ComputedRef<boolean>;
    modalRef: import("vue").Ref<HTMLElement | undefined>;
    wrapperCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    modalCls: import("vue").ComputedRef<(string | any[] | {
        [x: string]: boolean;
    } | undefined)[]>;
    teleportContainer: import("vue").Ref<string | HTMLElement | undefined>;
    handleMoveDown: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:visible': (visible: boolean) => true;
    ok: (e: Event) => true;
    cancel: (e: Event) => true;
    open: () => true;
    close: () => true;
    beforeOpen: () => true;
    beforeClose: () => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible?: unknown;
    defaultVisible?: unknown;
    width?: unknown;
    top?: unknown;
    mask?: unknown;
    title?: unknown;
    titleAlign?: unknown;
    alignCenter?: unknown;
    unmountOnClose?: unknown;
    maskClosable?: unknown;
    hideCancel?: unknown;
    simple?: unknown;
    closable?: unknown;
    okText?: unknown;
    cancelText?: unknown;
    okLoading?: unknown;
    okButtonProps?: unknown;
    cancelButtonProps?: unknown;
    footer?: unknown;
    renderToBody?: unknown;
    popupContainer?: unknown;
    maskStyle?: unknown;
    modalClass?: unknown;
    modalStyle?: unknown;
    onBeforeOk?: unknown;
    onBeforeCancel?: unknown;
    escToClose?: unknown;
    draggable?: unknown;
    fullscreen?: unknown;
    maskAnimationName?: unknown;
    modalAnimationName?: unknown;
    bodyClass?: unknown;
    bodyStyle?: unknown;
    messageType?: unknown;
} & {
    unmountOnClose: boolean;
    popupContainer: string | HTMLElement;
    renderToBody: boolean;
    footer: boolean;
    mask: boolean;
    closable: boolean;
    defaultVisible: boolean;
    maskClosable: boolean;
    draggable: boolean;
    simple: boolean;
    okLoading: boolean;
    escToClose: boolean;
    hideCancel: boolean;
    titleAlign: "center" | "start";
    alignCenter: boolean;
    fullscreen: boolean;
    maskAnimationName: string;
    modalAnimationName: string;
} & {
    top?: string | number | undefined;
    visible?: boolean | undefined;
    title?: string | undefined;
    width?: string | number | undefined;
    bodyStyle?: StyleValue | undefined;
    okText?: string | undefined;
    cancelText?: string | undefined;
    okButtonProps?: ButtonProps | undefined;
    cancelButtonProps?: ButtonProps | undefined;
    onBeforeOk?: ((done: (closed: boolean) => void) => void | boolean | Promise<void | boolean>) | undefined;
    onBeforeCancel?: (() => boolean) | undefined;
    maskStyle?: CSSProperties | undefined;
    modalClass?: string | any[] | undefined;
    modalStyle?: CSSProperties | undefined;
    bodyClass?: string | any[] | undefined;
    messageType?: "error" | "success" | "warning" | "info" | undefined;
}> & {
    onClose?: (() => any) | undefined;
    "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
    onOk?: ((e: Event) => any) | undefined;
    onOpen?: (() => any) | undefined;
    onCancel?: ((e: Event) => any) | undefined;
    onBeforeOpen?: (() => any) | undefined;
    onBeforeClose?: (() => any) | undefined;
}, {
    unmountOnClose: boolean;
    popupContainer: string | HTMLElement;
    renderToBody: boolean;
    visible: boolean;
    footer: boolean;
    mask: boolean;
    closable: boolean;
    defaultVisible: boolean;
    maskClosable: boolean;
    draggable: boolean;
    simple: boolean;
    okLoading: boolean;
    escToClose: boolean;
    hideCancel: boolean;
    titleAlign: "center" | "start";
    alignCenter: boolean;
    fullscreen: boolean;
    maskAnimationName: string;
    modalAnimationName: string;
}>;
export default _default;
