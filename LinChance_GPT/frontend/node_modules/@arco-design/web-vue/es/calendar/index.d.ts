import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Calendar from './calendar';
declare const Calendar: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            modelValue: Date;
            defaultMode: "year" | "month";
            modes: ("year" | "month")[];
            allowSelect: boolean;
            panel: boolean;
            panelTodayBtn: boolean;
            dayStartOfWeek: 0 | 1;
            isWeek: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            mode?: unknown;
            defaultMode?: unknown;
            modes?: unknown;
            allowSelect?: unknown;
            panel?: unknown;
            panelWidth?: unknown;
            panelTodayBtn?: unknown;
            dayStartOfWeek?: unknown;
            isWeek?: unknown;
        } & {
            defaultMode: "year" | "month";
            modes: ("year" | "month")[];
            allowSelect: boolean;
            panel: boolean;
            panelTodayBtn: boolean;
            dayStartOfWeek: 0 | 1;
            isWeek: boolean;
        } & {
            mode?: "year" | "month" | undefined;
            modelValue?: Date | undefined;
            defaultValue?: Date | undefined;
            panelWidth?: number | undefined;
        }> & {
            onChange?: ((date: Date) => any) | undefined;
            "onUpdate:modelValue"?: ((date: Date) => any) | undefined;
            onPanelChange?: ((date: Date) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "defaultMode" | "modes" | "allowSelect" | "panel" | "panelTodayBtn" | "dayStartOfWeek" | "isWeek">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:modelValue", date: Date) => void) & ((event: "change", date: Date) => void) & ((event: "panelChange", date: Date) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            mode?: unknown;
            defaultMode?: unknown;
            modes?: unknown;
            allowSelect?: unknown;
            panel?: unknown;
            panelWidth?: unknown;
            panelTodayBtn?: unknown;
            dayStartOfWeek?: unknown;
            isWeek?: unknown;
        } & {
            defaultMode: "year" | "month";
            modes: ("year" | "month")[];
            allowSelect: boolean;
            panel: boolean;
            panelTodayBtn: boolean;
            dayStartOfWeek: 0 | 1;
            isWeek: boolean;
        } & {
            mode?: "year" | "month" | undefined;
            modelValue?: Date | undefined;
            defaultValue?: Date | undefined;
            panelWidth?: number | undefined;
        }> & {
            onChange?: ((date: Date) => any) | undefined;
            "onUpdate:modelValue"?: ((date: Date) => any) | undefined;
            onPanelChange?: ((date: Date) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (date: Date) => true;
            change: (date: Date) => true;
            panelChange: (date: Date) => true;
        }, string, {
            modelValue: Date;
            defaultMode: "year" | "month";
            modes: ("year" | "month")[];
            allowSelect: boolean;
            panel: boolean;
            panelTodayBtn: boolean;
            dayStartOfWeek: 0 | 1;
            isWeek: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        mode?: unknown;
        defaultMode?: unknown;
        modes?: unknown;
        allowSelect?: unknown;
        panel?: unknown;
        panelWidth?: unknown;
        panelTodayBtn?: unknown;
        dayStartOfWeek?: unknown;
        isWeek?: unknown;
    } & {
        defaultMode: "year" | "month";
        modes: ("year" | "month")[];
        allowSelect: boolean;
        panel: boolean;
        panelTodayBtn: boolean;
        dayStartOfWeek: 0 | 1;
        isWeek: boolean;
    } & {
        mode?: "year" | "month" | undefined;
        modelValue?: Date | undefined;
        defaultValue?: Date | undefined;
        panelWidth?: number | undefined;
    }> & {
        onChange?: ((date: Date) => any) | undefined;
        "onUpdate:modelValue"?: ((date: Date) => any) | undefined;
        onPanelChange?: ((date: Date) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    mode?: unknown;
    defaultMode?: unknown;
    modes?: unknown;
    allowSelect?: unknown;
    panel?: unknown;
    panelWidth?: unknown;
    panelTodayBtn?: unknown;
    dayStartOfWeek?: unknown;
    isWeek?: unknown;
} & {
    defaultMode: "year" | "month";
    modes: ("year" | "month")[];
    allowSelect: boolean;
    panel: boolean;
    panelTodayBtn: boolean;
    dayStartOfWeek: 0 | 1;
    isWeek: boolean;
} & {
    mode?: "year" | "month" | undefined;
    modelValue?: Date | undefined;
    defaultValue?: Date | undefined;
    panelWidth?: number | undefined;
}> & {
    onChange?: ((date: Date) => any) | undefined;
    "onUpdate:modelValue"?: ((date: Date) => any) | undefined;
    onPanelChange?: ((date: Date) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (date: Date) => true;
    change: (date: Date) => true;
    panelChange: (date: Date) => true;
}, string, {
    modelValue: Date;
    defaultMode: "year" | "month";
    modes: ("year" | "month")[];
    allowSelect: boolean;
    panel: boolean;
    panelTodayBtn: boolean;
    dayStartOfWeek: 0 | 1;
    isWeek: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type CalendarInstance = InstanceType<typeof _Calendar>;
export default Calendar;
