import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Slider from './slider';
declare const Slider: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            range: boolean;
            modelValue: number | [number, number];
            defaultValue: number | [number, number];
            direction: "horizontal" | "vertical";
            min: number;
            max: number;
            step: number;
            showTooltip: boolean;
            showTicks: boolean;
            showInput: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            step?: unknown;
            min?: unknown;
            marks?: unknown;
            max?: unknown;
            direction?: unknown;
            disabled?: unknown;
            showTicks?: unknown;
            showInput?: unknown;
            range?: unknown;
            formatTooltip?: unknown;
            showTooltip?: unknown;
        } & {
            disabled: boolean;
            range: boolean;
            defaultValue: number | [number, number];
            direction: "horizontal" | "vertical";
            min: number;
            max: number;
            step: number;
            showTooltip: boolean;
            showTicks: boolean;
            showInput: boolean;
        } & {
            modelValue?: number | [number, number] | undefined;
            formatTooltip?: Function | undefined;
            marks?: Record<number, string> | undefined;
        }> & {
            onChange?: ((value: number | [number, number]) => any) | undefined;
            "onUpdate:modelValue"?: ((value: number | [number, number]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "range" | "modelValue" | "defaultValue" | "direction" | "min" | "max" | "step" | "showTooltip" | "showTicks" | "showInput">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:modelValue", value: number | [number, number]) => void) & ((event: "change", value: number | [number, number]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            step?: unknown;
            min?: unknown;
            marks?: unknown;
            max?: unknown;
            direction?: unknown;
            disabled?: unknown;
            showTicks?: unknown;
            showInput?: unknown;
            range?: unknown;
            formatTooltip?: unknown;
            showTooltip?: unknown;
        } & {
            disabled: boolean;
            range: boolean;
            defaultValue: number | [number, number];
            direction: "horizontal" | "vertical";
            min: number;
            max: number;
            step: number;
            showTooltip: boolean;
            showTicks: boolean;
            showInput: boolean;
        } & {
            modelValue?: number | [number, number] | undefined;
            formatTooltip?: Function | undefined;
            marks?: Record<number, string> | undefined;
        }> & {
            onChange?: ((value: number | [number, number]) => any) | undefined;
            "onUpdate:modelValue"?: ((value: number | [number, number]) => any) | undefined;
        }, {
            prefixCls: string;
            cls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            trackCls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            trackRef: import("vue").Ref<HTMLElement | null>;
            computedValue: import("vue").ComputedRef<[number, number]>;
            mergedDisabled: import("vue").ComputedRef<boolean>;
            markList: import("vue").ComputedRef<{
                key: number;
                content: string | undefined;
                isActive: boolean;
            }[]>;
            getBtnStyle: (value: number) => import("vue").CSSProperties;
            getBarStyle: ([start, end]: [number, number]) => import("vue").CSSProperties;
            handleClick: (e: MouseEvent) => void;
            handleMoveStart: () => void;
            handleEndMoving: (x: number, y: number) => void;
            handleMoveEnd: () => void;
            handleStartMoving: (x: number, y: number) => void;
            handleStartChange: (value?: number | undefined) => void;
            handleEndChange: (value?: number | undefined) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (value: number | [number, number]) => true;
            change: (value: number | [number, number]) => true;
        }, string, {
            disabled: boolean;
            range: boolean;
            modelValue: number | [number, number];
            defaultValue: number | [number, number];
            direction: "horizontal" | "vertical";
            min: number;
            max: number;
            step: number;
            showTooltip: boolean;
            showTicks: boolean;
            showInput: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        step?: unknown;
        min?: unknown;
        marks?: unknown;
        max?: unknown;
        direction?: unknown;
        disabled?: unknown;
        showTicks?: unknown;
        showInput?: unknown;
        range?: unknown;
        formatTooltip?: unknown;
        showTooltip?: unknown;
    } & {
        disabled: boolean;
        range: boolean;
        defaultValue: number | [number, number];
        direction: "horizontal" | "vertical";
        min: number;
        max: number;
        step: number;
        showTooltip: boolean;
        showTicks: boolean;
        showInput: boolean;
    } & {
        modelValue?: number | [number, number] | undefined;
        formatTooltip?: Function | undefined;
        marks?: Record<number, string> | undefined;
    }> & {
        onChange?: ((value: number | [number, number]) => any) | undefined;
        "onUpdate:modelValue"?: ((value: number | [number, number]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        trackCls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        trackRef: import("vue").Ref<HTMLElement | null>;
        computedValue: import("vue").ComputedRef<[number, number]>;
        mergedDisabled: import("vue").ComputedRef<boolean>;
        markList: import("vue").ComputedRef<{
            key: number;
            content: string | undefined;
            isActive: boolean;
        }[]>;
        getBtnStyle: (value: number) => import("vue").CSSProperties;
        getBarStyle: ([start, end]: [number, number]) => import("vue").CSSProperties;
        handleClick: (e: MouseEvent) => void;
        handleMoveStart: () => void;
        handleEndMoving: (x: number, y: number) => void;
        handleMoveEnd: () => void;
        handleStartMoving: (x: number, y: number) => void;
        handleStartChange: (value?: number | undefined) => void;
        handleEndChange: (value?: number | undefined) => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    step?: unknown;
    min?: unknown;
    marks?: unknown;
    max?: unknown;
    direction?: unknown;
    disabled?: unknown;
    showTicks?: unknown;
    showInput?: unknown;
    range?: unknown;
    formatTooltip?: unknown;
    showTooltip?: unknown;
} & {
    disabled: boolean;
    range: boolean;
    defaultValue: number | [number, number];
    direction: "horizontal" | "vertical";
    min: number;
    max: number;
    step: number;
    showTooltip: boolean;
    showTicks: boolean;
    showInput: boolean;
} & {
    modelValue?: number | [number, number] | undefined;
    formatTooltip?: Function | undefined;
    marks?: Record<number, string> | undefined;
}> & {
    onChange?: ((value: number | [number, number]) => any) | undefined;
    "onUpdate:modelValue"?: ((value: number | [number, number]) => any) | undefined;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    trackCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    trackRef: import("vue").Ref<HTMLElement | null>;
    computedValue: import("vue").ComputedRef<[number, number]>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    markList: import("vue").ComputedRef<{
        key: number;
        content: string | undefined;
        isActive: boolean;
    }[]>;
    getBtnStyle: (value: number) => import("vue").CSSProperties;
    getBarStyle: ([start, end]: [number, number]) => import("vue").CSSProperties;
    handleClick: (e: MouseEvent) => void;
    handleMoveStart: () => void;
    handleEndMoving: (x: number, y: number) => void;
    handleMoveEnd: () => void;
    handleStartMoving: (x: number, y: number) => void;
    handleStartChange: (value?: number | undefined) => void;
    handleEndChange: (value?: number | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: number | [number, number]) => true;
    change: (value: number | [number, number]) => true;
}, string, {
    disabled: boolean;
    range: boolean;
    modelValue: number | [number, number];
    defaultValue: number | [number, number];
    direction: "horizontal" | "vertical";
    min: number;
    max: number;
    step: number;
    showTooltip: boolean;
    showTicks: boolean;
    showInput: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type SliderInstance = InstanceType<typeof _Slider>;
export default Slider;
