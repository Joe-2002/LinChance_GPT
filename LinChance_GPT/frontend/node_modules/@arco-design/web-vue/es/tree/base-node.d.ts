import { PropType, VNode } from 'vue';
declare const _default: import("vue").DefineComponent<{
    key: {
        type: PropType<string | number>;
    };
    title: {
        type: StringConstructor;
    };
    selectable: {
        type: BooleanConstructor;
    };
    disabled: {
        type: BooleanConstructor;
    };
    disableCheckbox: {
        type: BooleanConstructor;
    };
    checkable: {
        type: BooleanConstructor;
    };
    draggable: {
        type: BooleanConstructor;
    };
    isLeaf: {
        type: BooleanConstructor;
    };
    icon: {
        type: PropType<() => VNode>;
    };
    switcherIcon: {
        type: PropType<() => VNode>;
    };
    loadingIcon: {
        type: PropType<() => VNode>;
    };
    dragIcon: {
        type: PropType<() => VNode>;
    };
    isTail: {
        type: BooleanConstructor;
    };
    blockNode: {
        type: BooleanConstructor;
    };
    showLine: {
        type: BooleanConstructor;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
    lineless: {
        type: PropType<boolean[]>;
        default: () => never[];
    };
}, {
    nodekey: import("vue").Ref<import("./interface").TreeNodeKey>;
    refTitle: import("vue").Ref<HTMLElement | undefined>;
    prefixCls: string;
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean | undefined;
    })[]>;
    titleClassNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    indeterminate: import("vue").ComputedRef<boolean | undefined>;
    checked: import("vue").ComputedRef<boolean | undefined>;
    expanded: import("vue").ComputedRef<boolean | undefined>;
    selected: import("vue").ComputedRef<boolean | undefined>;
    treeTitle: import("vue").ComputedRef<(() => VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | undefined) | undefined>;
    treeNodeData: import("vue").ComputedRef<import("./interface").TreeNodeData>;
    loading: import("vue").ComputedRef<boolean | undefined>;
    treeDragIcon: import("vue").ComputedRef<import("vue").Slot | undefined>;
    treeNodeIcon: import("vue").ComputedRef<import("vue").Slot | undefined>;
    extra: import("vue").ComputedRef<(() => VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | undefined) | undefined>;
    nodeStatus: {
        loading: boolean | undefined;
        checked: boolean | undefined;
        selected: boolean | undefined;
        indeterminate: boolean | undefined;
        expanded: boolean | undefined;
        isLeaf: boolean;
    };
    onCheckboxChange(checked: boolean, e: Event): void;
    onTitleClick(e: Event): void;
    onSwitcherClick: (e: Event) => void;
    onDragStart(e: DragEvent): void;
    onDragEnd(e: DragEvent): void;
    onDragOver(e: DragEvent): void;
    onDragLeave(e: DragEvent): void;
    onDrop(e: DragEvent): void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    key?: unknown;
    title?: unknown;
    selectable?: unknown;
    disabled?: unknown;
    disableCheckbox?: unknown;
    checkable?: unknown;
    draggable?: unknown;
    isLeaf?: unknown;
    icon?: unknown;
    switcherIcon?: unknown;
    loadingIcon?: unknown;
    dragIcon?: unknown;
    isTail?: unknown;
    blockNode?: unknown;
    showLine?: unknown;
    level?: unknown;
    lineless?: unknown;
} & {
    disabled: boolean;
    draggable: boolean;
    checkable: boolean;
    isLeaf: boolean;
    showLine: boolean;
    selectable: boolean;
    disableCheckbox: boolean;
    isTail: boolean;
    blockNode: boolean;
    level: number;
    lineless: boolean[];
} & {
    icon?: (() => VNode) | undefined;
    key?: string | number | undefined;
    title?: string | undefined;
    switcherIcon?: (() => VNode) | undefined;
    loadingIcon?: (() => VNode) | undefined;
    dragIcon?: (() => VNode) | undefined;
}>, {
    disabled: boolean;
    draggable: boolean;
    checkable: boolean;
    isLeaf: boolean;
    showLine: boolean;
    selectable: boolean;
    disableCheckbox: boolean;
    isTail: boolean;
    blockNode: boolean;
    level: number;
    lineless: boolean[];
}>;
export default _default;
