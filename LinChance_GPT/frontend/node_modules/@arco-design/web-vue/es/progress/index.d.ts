import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Progress from './progress';
declare const Progress: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "circle" | "line";
            animation: boolean;
            steps: number;
            percent: number;
            showText: boolean;
        }> & Omit<Readonly<{
            type?: unknown;
            size?: unknown;
            percent?: unknown;
            steps?: unknown;
            animation?: unknown;
            strokeWidth?: unknown;
            width?: unknown;
            color?: unknown;
            trackColor?: unknown;
            bufferColor?: unknown;
            showText?: unknown;
            status?: unknown;
        } & {
            type: "circle" | "line";
            animation: boolean;
            steps: number;
            percent: number;
            showText: boolean;
        } & {
            color?: string | Record<string, any> | undefined;
            size?: "mini" | "medium" | "large" | "small" | undefined;
            strokeWidth?: number | undefined;
            width?: string | number | undefined;
            status?: "normal" | "success" | "warning" | "danger" | undefined;
            trackColor?: string | undefined;
            bufferColor?: string | Record<string, any> | undefined;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "animation" | "steps" | "percent" | "showText">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            type?: unknown;
            size?: unknown;
            percent?: unknown;
            steps?: unknown;
            animation?: unknown;
            strokeWidth?: unknown;
            width?: unknown;
            color?: unknown;
            trackColor?: unknown;
            bufferColor?: unknown;
            showText?: unknown;
            status?: unknown;
        } & {
            type: "circle" | "line";
            animation: boolean;
            steps: number;
            percent: number;
            showText: boolean;
        } & {
            color?: string | Record<string, any> | undefined;
            size?: "mini" | "medium" | "large" | "small" | undefined;
            strokeWidth?: number | undefined;
            width?: string | number | undefined;
            status?: "normal" | "success" | "warning" | "danger" | undefined;
            trackColor?: string | undefined;
            bufferColor?: string | Record<string, any> | undefined;
        }>, {
            cls: import("vue").ComputedRef<string[]>;
            computedStatus: import("vue").ComputedRef<"normal" | "success" | "warning" | "danger">;
            mergedSize: import("vue").ComputedRef<"mini" | "medium" | "large" | "small">;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            type: "circle" | "line";
            animation: boolean;
            steps: number;
            percent: number;
            showText: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        type?: unknown;
        size?: unknown;
        percent?: unknown;
        steps?: unknown;
        animation?: unknown;
        strokeWidth?: unknown;
        width?: unknown;
        color?: unknown;
        trackColor?: unknown;
        bufferColor?: unknown;
        showText?: unknown;
        status?: unknown;
    } & {
        type: "circle" | "line";
        animation: boolean;
        steps: number;
        percent: number;
        showText: boolean;
    } & {
        color?: string | Record<string, any> | undefined;
        size?: "mini" | "medium" | "large" | "small" | undefined;
        strokeWidth?: number | undefined;
        width?: string | number | undefined;
        status?: "normal" | "success" | "warning" | "danger" | undefined;
        trackColor?: string | undefined;
        bufferColor?: string | Record<string, any> | undefined;
    }> & import("vue").ShallowUnwrapRef<{
        cls: import("vue").ComputedRef<string[]>;
        computedStatus: import("vue").ComputedRef<"normal" | "success" | "warning" | "danger">;
        mergedSize: import("vue").ComputedRef<"mini" | "medium" | "large" | "small">;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    type?: unknown;
    size?: unknown;
    percent?: unknown;
    steps?: unknown;
    animation?: unknown;
    strokeWidth?: unknown;
    width?: unknown;
    color?: unknown;
    trackColor?: unknown;
    bufferColor?: unknown;
    showText?: unknown;
    status?: unknown;
} & {
    type: "circle" | "line";
    animation: boolean;
    steps: number;
    percent: number;
    showText: boolean;
} & {
    color?: string | Record<string, any> | undefined;
    size?: "mini" | "medium" | "large" | "small" | undefined;
    strokeWidth?: number | undefined;
    width?: string | number | undefined;
    status?: "normal" | "success" | "warning" | "danger" | undefined;
    trackColor?: string | undefined;
    bufferColor?: string | Record<string, any> | undefined;
}>, {
    cls: import("vue").ComputedRef<string[]>;
    computedStatus: import("vue").ComputedRef<"normal" | "success" | "warning" | "danger">;
    mergedSize: import("vue").ComputedRef<"mini" | "medium" | "large" | "small">;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    type: "circle" | "line";
    animation: boolean;
    steps: number;
    percent: number;
    showText: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type ProgressInstance = InstanceType<typeof _Progress>;
export default Progress;
