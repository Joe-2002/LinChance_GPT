import type { PropType } from 'vue';
import { RadioOption } from './interface';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number | boolean>;
        default: undefined;
    };
    defaultValue: {
        type: PropType<string | number | boolean>;
        default: string;
    };
    type: {
        type: PropType<"button" | "radio">;
        default: string;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
    };
    options: {
        type: PropType<(string | number | RadioOption)[]>;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string | number | boolean) => true;
    change: (value: string | number | boolean, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    type?: unknown;
    size?: unknown;
    options?: unknown;
    direction?: unknown;
    disabled?: unknown;
} & {
    disabled: boolean;
    type: "button" | "radio";
    defaultValue: string | number | boolean;
    direction: "horizontal" | "vertical";
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    modelValue?: string | number | boolean | undefined;
    options?: (string | number | RadioOption)[] | undefined;
}> & {
    onChange?: ((value: string | number | boolean, ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | number | boolean) => any) | undefined;
}, {
    disabled: boolean;
    type: "button" | "radio";
    modelValue: string | number | boolean;
    defaultValue: string | number | boolean;
    direction: "horizontal" | "vertical";
}>;
export default _default;
