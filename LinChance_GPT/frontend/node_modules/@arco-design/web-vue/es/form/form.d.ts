import { PropType } from 'vue';
import { FieldData, FieldRule, ValidatedError } from './interface';
declare const _default: import("vue").DefineComponent<{
    model: {
        type: ObjectConstructor;
        required: true;
    };
    layout: {
        type: PropType<"inline" | "horizontal" | "vertical">;
        default: string;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
    };
    labelColProps: {
        type: ObjectConstructor;
        default: () => {
            span: number;
            offset: number;
        };
    };
    wrapperColProps: {
        type: ObjectConstructor;
        default: () => {
            span: number;
            offset: number;
        };
    };
    labelColStyle: ObjectConstructor;
    wrapperColStyle: ObjectConstructor;
    labelAlign: {
        type: PropType<"left" | "right">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    rules: {
        type: PropType<Record<string, FieldRule<any> | FieldRule<any>[]>>;
    };
    autoLabelWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    handleSubmit: (e: Event) => void;
    innerValidate: (callback?: ((errors: undefined | Record<string, ValidatedError>) => void) | undefined) => Promise<undefined | Record<string, ValidatedError>>;
    innerValidateField: (field: string | string[], callback?: ((errors: undefined | Record<string, ValidatedError>) => void) | undefined) => Promise<Record<string, ValidatedError> | undefined>;
    innerResetFields: (field?: string | string[] | undefined) => void;
    innerClearValidate: (field?: string | string[] | undefined) => void;
    innerSetFields: (data: Record<string, FieldData>) => void;
}, unknown, {}, {
    validate(callback?: ((errors: undefined | Record<string, ValidatedError>) => void) | undefined): Promise<undefined | Record<string, ValidatedError>>;
    validateField(field: string | string[], callback?: ((errors: undefined | Record<string, ValidatedError>) => void) | undefined): Promise<undefined | Record<string, ValidatedError>>;
    resetFields(field?: string | string[] | undefined): void;
    clearValidate(field?: string | string[] | undefined): void;
    setFields(data: Record<string, FieldData>): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    submit: (data: {
        values: Record<string, any>;
        errors: Record<string, ValidatedError> | undefined;
    }, ev: Event) => true;
    submitSuccess: (values: Record<string, any>, ev: Event) => true;
    submitFailed: (data: {
        values: Record<string, any>;
        errors: Record<string, ValidatedError>;
    }, ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    model?: unknown;
    layout?: unknown;
    size?: unknown;
    labelColProps?: unknown;
    wrapperColProps?: unknown;
    labelColStyle?: unknown;
    wrapperColStyle?: unknown;
    labelAlign?: unknown;
    disabled?: unknown;
    rules?: unknown;
    autoLabelWidth?: unknown;
} & {
    layout: "inline" | "horizontal" | "vertical";
    model: Record<string, any>;
    labelColProps: Record<string, any>;
    wrapperColProps: Record<string, any>;
    labelAlign: "left" | "right";
    autoLabelWidth: boolean;
} & {
    disabled?: boolean | undefined;
    size?: "mini" | "medium" | "large" | "small" | undefined;
    labelColStyle?: Record<string, any> | undefined;
    wrapperColStyle?: Record<string, any> | undefined;
    rules?: Record<string, FieldRule<any> | FieldRule<any>[]> | undefined;
}> & {
    onSubmit?: ((data: {
        values: Record<string, any>;
        errors: Record<string, ValidatedError> | undefined;
    }, ev: Event) => any) | undefined;
    onSubmitSuccess?: ((values: Record<string, any>, ev: Event) => any) | undefined;
    onSubmitFailed?: ((data: {
        values: Record<string, any>;
        errors: Record<string, ValidatedError>;
    }, ev: Event) => any) | undefined;
}, {
    disabled: boolean;
    layout: "inline" | "horizontal" | "vertical";
    labelColProps: Record<string, any>;
    wrapperColProps: Record<string, any>;
    labelAlign: "left" | "right";
    autoLabelWidth: boolean;
}>;
export default _default;
