import { PropType } from 'vue';
import { FieldRule } from './interface';
declare const _default: import("vue").DefineComponent<{
    field: {
        type: StringConstructor;
        default: string;
    };
    label: StringConstructor;
    tooltip: {
        type: StringConstructor;
    };
    showColon: {
        type: BooleanConstructor;
        default: boolean;
    };
    noStyle: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    help: StringConstructor;
    extra: StringConstructor;
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    asteriskPosition: {
        type: StringConstructor;
        default: string;
    };
    rules: {
        type: PropType<FieldRule<any> | FieldRule<any>[]>;
    };
    validateStatus: {
        type: PropType<"error" | "success" | "warning" | "validating">;
    };
    validateTrigger: {
        type: PropType<"focus" | "input" | "blur" | "change" | ("focus" | "input" | "blur" | "change")[]>;
        default: string;
    };
    labelColProps: ObjectConstructor;
    wrapperColProps: ObjectConstructor;
    hideLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideAsterisk: {
        type: BooleanConstructor;
        default: boolean;
    };
    labelColStyle: ObjectConstructor;
    wrapperColStyle: ObjectConstructor;
    rowProps: ObjectConstructor;
    rowClass: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    contentClass: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    contentFlex: {
        type: BooleanConstructor;
        default: boolean;
    };
    mergeProps: {
        type: PropType<boolean | ((props: Record<string, any>) => Record<string, any>)>;
        default: boolean;
    };
    labelColFlex: {
        type: (StringConstructor | NumberConstructor)[];
    };
    feedback: {
        type: BooleanConstructor;
        default: boolean;
    };
    labelComponent: {
        type: StringConstructor;
        default: string;
    };
    labelAttrs: ObjectConstructor;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | Record<string, any> | undefined)[]>;
    isRequired: import("vue").ComputedRef<boolean>;
    isError: import("vue").ComputedRef<boolean>;
    finalMessage: import("vue").ComputedRef<string[]>;
    mergedLabelCol: import("vue").ComputedRef<any>;
    mergedWrapperCol: import("vue").ComputedRef<any>;
    labelColCls: import("vue").ComputedRef<(string | {
        [x: string]: string | number | boolean | undefined;
    })[]>;
    autoLabelWidth: import("vue").Ref<boolean | undefined> | undefined;
    layout: import("vue").Ref<string | undefined> | undefined;
    mergedLabelStyle: import("vue").ComputedRef<any>;
    wrapperColCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    mergedWrapperStyle: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    field?: unknown;
    label?: unknown;
    tooltip?: unknown;
    showColon?: unknown;
    noStyle?: unknown;
    disabled?: unknown;
    help?: unknown;
    extra?: unknown;
    required?: unknown;
    asteriskPosition?: unknown;
    rules?: unknown;
    validateStatus?: unknown;
    validateTrigger?: unknown;
    labelColProps?: unknown;
    wrapperColProps?: unknown;
    hideLabel?: unknown;
    hideAsterisk?: unknown;
    labelColStyle?: unknown;
    wrapperColStyle?: unknown;
    rowProps?: unknown;
    rowClass?: unknown;
    contentClass?: unknown;
    contentFlex?: unknown;
    mergeProps?: unknown;
    labelColFlex?: unknown;
    feedback?: unknown;
    labelComponent?: unknown;
    labelAttrs?: unknown;
} & {
    feedback: boolean;
    required: boolean;
    field: string;
    showColon: boolean;
    asteriskPosition: string;
    noStyle: boolean;
    validateTrigger: "focus" | "input" | "blur" | "change" | ("focus" | "input" | "blur" | "change")[];
    hideLabel: boolean;
    hideAsterisk: boolean;
    contentFlex: boolean;
    mergeProps: boolean | ((props: Record<string, any>) => Record<string, any>);
    labelComponent: string;
} & {
    disabled?: boolean | undefined;
    contentClass?: string | unknown[] | Record<string, any> | undefined;
    help?: string | undefined;
    tooltip?: string | undefined;
    label?: string | undefined;
    extra?: string | undefined;
    rowClass?: string | unknown[] | Record<string, any> | undefined;
    labelColProps?: Record<string, any> | undefined;
    wrapperColProps?: Record<string, any> | undefined;
    labelColStyle?: Record<string, any> | undefined;
    wrapperColStyle?: Record<string, any> | undefined;
    rules?: FieldRule<any> | FieldRule<any>[] | undefined;
    validateStatus?: "error" | "success" | "warning" | "validating" | undefined;
    rowProps?: Record<string, any> | undefined;
    labelColFlex?: string | number | undefined;
    labelAttrs?: Record<string, any> | undefined;
}>, {
    disabled: boolean;
    feedback: boolean;
    required: boolean;
    field: string;
    showColon: boolean;
    asteriskPosition: string;
    noStyle: boolean;
    validateTrigger: "focus" | "input" | "blur" | "change" | ("focus" | "input" | "blur" | "change")[];
    hideLabel: boolean;
    hideAsterisk: boolean;
    contentFlex: boolean;
    mergeProps: boolean | ((props: Record<string, any>) => Record<string, any>);
    labelComponent: string;
}>;
export default _default;
