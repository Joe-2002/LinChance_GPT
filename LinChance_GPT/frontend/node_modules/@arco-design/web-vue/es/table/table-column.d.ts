import { CSSProperties, PropType } from 'vue';
import { TableData, TableFilterable, TableSortable } from './interface';
import { ClassName } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    dataIndex: StringConstructor;
    title: StringConstructor;
    width: NumberConstructor;
    align: {
        type: PropType<"left" | "right" | "center" | undefined>;
    };
    fixed: {
        type: PropType<"left" | "right" | undefined>;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    sortable: {
        type: PropType<TableSortable>;
        default: undefined;
    };
    filterable: {
        type: PropType<TableFilterable>;
        default: undefined;
    };
    cellClass: {
        type: PropType<ClassName>;
    };
    headerCellClass: {
        type: PropType<ClassName>;
    };
    bodyCellClass: {
        type: PropType<ClassName | ((record: TableData) => ClassName)>;
    };
    summaryCellClass: {
        type: PropType<ClassName | ((record: TableData) => ClassName)>;
    };
    cellStyle: {
        type: PropType<CSSProperties>;
    };
    headerCellStyle: {
        type: PropType<CSSProperties>;
    };
    bodyCellStyle: {
        type: PropType<CSSProperties | ((record: TableData) => CSSProperties)>;
    };
    summaryCellStyle: {
        type: PropType<CSSProperties | ((record: TableData) => CSSProperties)>;
    };
    index: {
        type: NumberConstructor;
    };
    tooltip: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    dataIndex?: unknown;
    title?: unknown;
    width?: unknown;
    align?: unknown;
    fixed?: unknown;
    ellipsis?: unknown;
    sortable?: unknown;
    filterable?: unknown;
    cellClass?: unknown;
    headerCellClass?: unknown;
    bodyCellClass?: unknown;
    summaryCellClass?: unknown;
    cellStyle?: unknown;
    headerCellStyle?: unknown;
    bodyCellStyle?: unknown;
    summaryCellStyle?: unknown;
    index?: unknown;
    tooltip?: unknown;
} & {
    ellipsis: boolean;
    tooltip: boolean | Record<string, any>;
} & {
    fixed?: "left" | "right" | undefined;
    title?: string | undefined;
    align?: "left" | "right" | "center" | undefined;
    index?: number | undefined;
    width?: number | undefined;
    dataIndex?: string | undefined;
    sortable?: TableSortable | undefined;
    filterable?: TableFilterable | undefined;
    cellClass?: ClassName | undefined;
    headerCellClass?: ClassName | undefined;
    bodyCellClass?: ClassName | ((record: TableData) => ClassName) | undefined;
    summaryCellClass?: ClassName | ((record: TableData) => ClassName) | undefined;
    cellStyle?: CSSProperties | undefined;
    headerCellStyle?: CSSProperties | undefined;
    bodyCellStyle?: CSSProperties | ((record: TableData) => CSSProperties) | undefined;
    summaryCellStyle?: CSSProperties | ((record: TableData) => CSSProperties) | undefined;
}>, {
    ellipsis: boolean;
    tooltip: boolean | Record<string, any>;
    sortable: TableSortable;
    filterable: TableFilterable;
}>;
export default _default;
