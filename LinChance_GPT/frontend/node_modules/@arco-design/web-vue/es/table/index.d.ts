import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Table from './table';
import _Thead from './table-thead';
import _Tbody from './table-tbody';
import _Tr from './table-tr';
import _Th from './table-th';
import _Td from './table-td';
import _Column from './table-column';
declare const Table: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: "mini" | "medium" | "large" | "small";
            scrollbar: boolean | import("..").ScrollbarProps;
            data: import("./interface").TableData[];
            loading: boolean | Record<string, any>;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumnData[];
            hoverable: boolean;
            pagination: boolean | import("..").PaginationProps;
            stripe: boolean;
            tableLayoutFixed: boolean;
            pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            spanAll: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
            columnResizable: boolean;
            summaryText: string;
            defaultExpandAllRows: boolean;
            stickyHeader: number | boolean;
        }> & Omit<Readonly<{
            columns?: unknown;
            data?: unknown;
            bordered?: unknown;
            hoverable?: unknown;
            stripe?: unknown;
            size?: unknown;
            tableLayoutFixed?: unknown;
            loading?: unknown;
            rowSelection?: unknown;
            expandable?: unknown;
            scroll?: unknown;
            pagination?: unknown;
            pagePosition?: unknown;
            indentSize?: unknown;
            rowKey?: unknown;
            showHeader?: unknown;
            virtualListProps?: unknown;
            spanMethod?: unknown;
            spanAll?: unknown;
            components?: unknown;
            loadMore?: unknown;
            filterIconAlignLeft?: unknown;
            hideExpandButtonOnEmpty?: unknown;
            rowClass?: unknown;
            draggable?: unknown;
            rowNumber?: unknown;
            columnResizable?: unknown;
            summary?: unknown;
            summaryText?: unknown;
            summarySpanMethod?: unknown;
            selectedKeys?: unknown;
            defaultSelectedKeys?: unknown;
            expandedKeys?: unknown;
            defaultExpandedKeys?: unknown;
            defaultExpandAllRows?: unknown;
            stickyHeader?: unknown;
            scrollbar?: unknown;
        } & {
            size: "mini" | "medium" | "large" | "small";
            scrollbar: boolean | import("..").ScrollbarProps;
            data: import("./interface").TableData[];
            loading: boolean | Record<string, any>;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumnData[];
            hoverable: boolean;
            pagination: boolean | import("..").PaginationProps;
            stripe: boolean;
            tableLayoutFixed: boolean;
            pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            spanAll: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
            columnResizable: boolean;
            summaryText: string;
            defaultExpandAllRows: boolean;
            stickyHeader: number | boolean;
        } & {
            scroll?: {
                x?: string | number | undefined;
                y?: string | number | undefined;
                minWidth?: string | number | undefined;
                maxHeight?: string | number | undefined;
            } | undefined;
            summary?: boolean | ((params: {
                columns: import("./interface").TableColumnData[];
                data: import("./interface").TableData[];
            }) => import("./interface").TableData[]) | undefined;
            virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
            rowSelection?: import("./interface").TableRowSelection | undefined;
            expandable?: import("./interface").TableExpandable | undefined;
            spanMethod?: ((data: {
                record: import("./interface").TableData;
                column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
                rowIndex: number;
                columnIndex: number;
            }) => void | {
                rowspan?: number | undefined;
                colspan?: number | undefined;
            }) | undefined;
            components?: import("./interface").TableComponents | undefined;
            loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
            rowClass?: string | any[] | Record<string, any> | ((record: import("./interface").TableData, rowIndex: number) => any) | undefined;
            draggable?: import("./interface").TableDraggable | undefined;
            rowNumber?: boolean | Record<string, any> | undefined;
            summarySpanMethod?: ((data: {
                record: import("./interface").TableData;
                column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
                rowIndex: number;
                columnIndex: number;
            }) => void | {
                rowspan?: number | undefined;
                colspan?: number | undefined;
            }) | undefined;
            selectedKeys?: (string | number)[] | undefined;
            defaultSelectedKeys?: (string | number)[] | undefined;
            expandedKeys?: (string | number)[] | undefined;
            defaultExpandedKeys?: (string | number)[] | undefined;
        }> & {
            onChange?: ((data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => any) | undefined;
            onSelect?: ((rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
            onPageChange?: ((page: number) => any) | undefined;
            onPageSizeChange?: ((pageSize: number) => any) | undefined;
            onExpand?: ((rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
            "onUpdate:selectedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
            "onUpdate:expandedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
            onExpandedChange?: ((rowKeys: (string | number)[]) => any) | undefined;
            onSelectAll?: ((checked: boolean) => any) | undefined;
            onSelectionChange?: ((rowKeys: (string | number)[]) => any) | undefined;
            onSorterChange?: ((dataIndex: string, direction: string) => any) | undefined;
            onFilterChange?: ((dataIndex: string, filteredValues: string[]) => any) | undefined;
            onCellMouseEnter?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onCellMouseLeave?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onRowClick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
            onHeaderClick?: ((column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onColumnResize?: ((dataIndex: string, width: number) => any) | undefined;
            onRowDblclick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
            onCellDblclick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onRowContextmenu?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
            onCellContextmenu?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "scrollbar" | "data" | "loading" | "bordered" | "columns" | "hoverable" | "pagination" | "stripe" | "tableLayoutFixed" | "pagePosition" | "indentSize" | "rowKey" | "showHeader" | "spanAll" | "filterIconAlignLeft" | "hideExpandButtonOnEmpty" | "columnResizable" | "summaryText" | "defaultExpandAllRows" | "stickyHeader">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "select", rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => void) & ((event: "change", data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => void) & ((event: "expand", rowKey: string | number, record: import("./interface").TableData) => void) & ((event: "pageChange", page: number) => void) & ((event: "pageSizeChange", pageSize: number) => void) & ((event: "update:selectedKeys", rowKeys: (string | number)[]) => void) & ((event: "update:expandedKeys", rowKeys: (string | number)[]) => void) & ((event: "expandedChange", rowKeys: (string | number)[]) => void) & ((event: "selectAll", checked: boolean) => void) & ((event: "selectionChange", rowKeys: (string | number)[]) => void) & ((event: "sorterChange", dataIndex: string, direction: string) => void) & ((event: "filterChange", dataIndex: string, filteredValues: string[]) => void) & ((event: "cellMouseEnter", record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => void) & ((event: "cellMouseLeave", record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => void) & ((event: "cellClick", record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => void) & ((event: "rowClick", record: import("./interface").TableData, ev: Event) => void) & ((event: "headerClick", column: import("./interface").TableColumnData, ev: Event) => void) & ((event: "columnResize", dataIndex: string, width: number) => void) & ((event: "rowDblclick", record: import("./interface").TableData, ev: Event) => void) & ((event: "cellDblclick", record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => void) & ((event: "rowContextmenu", record: import("./interface").TableData, ev: Event) => void) & ((event: "cellContextmenu", record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            columns?: unknown;
            data?: unknown;
            bordered?: unknown;
            hoverable?: unknown;
            stripe?: unknown;
            size?: unknown;
            tableLayoutFixed?: unknown;
            loading?: unknown;
            rowSelection?: unknown;
            expandable?: unknown;
            scroll?: unknown;
            pagination?: unknown;
            pagePosition?: unknown;
            indentSize?: unknown;
            rowKey?: unknown;
            showHeader?: unknown;
            virtualListProps?: unknown;
            spanMethod?: unknown;
            spanAll?: unknown;
            components?: unknown;
            loadMore?: unknown;
            filterIconAlignLeft?: unknown;
            hideExpandButtonOnEmpty?: unknown;
            rowClass?: unknown;
            draggable?: unknown;
            rowNumber?: unknown;
            columnResizable?: unknown;
            summary?: unknown;
            summaryText?: unknown;
            summarySpanMethod?: unknown;
            selectedKeys?: unknown;
            defaultSelectedKeys?: unknown;
            expandedKeys?: unknown;
            defaultExpandedKeys?: unknown;
            defaultExpandAllRows?: unknown;
            stickyHeader?: unknown;
            scrollbar?: unknown;
        } & {
            size: "mini" | "medium" | "large" | "small";
            scrollbar: boolean | import("..").ScrollbarProps;
            data: import("./interface").TableData[];
            loading: boolean | Record<string, any>;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumnData[];
            hoverable: boolean;
            pagination: boolean | import("..").PaginationProps;
            stripe: boolean;
            tableLayoutFixed: boolean;
            pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            spanAll: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
            columnResizable: boolean;
            summaryText: string;
            defaultExpandAllRows: boolean;
            stickyHeader: number | boolean;
        } & {
            scroll?: {
                x?: string | number | undefined;
                y?: string | number | undefined;
                minWidth?: string | number | undefined;
                maxHeight?: string | number | undefined;
            } | undefined;
            summary?: boolean | ((params: {
                columns: import("./interface").TableColumnData[];
                data: import("./interface").TableData[];
            }) => import("./interface").TableData[]) | undefined;
            virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
            rowSelection?: import("./interface").TableRowSelection | undefined;
            expandable?: import("./interface").TableExpandable | undefined;
            spanMethod?: ((data: {
                record: import("./interface").TableData;
                column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
                rowIndex: number;
                columnIndex: number;
            }) => void | {
                rowspan?: number | undefined;
                colspan?: number | undefined;
            }) | undefined;
            components?: import("./interface").TableComponents | undefined;
            loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
            rowClass?: string | any[] | Record<string, any> | ((record: import("./interface").TableData, rowIndex: number) => any) | undefined;
            draggable?: import("./interface").TableDraggable | undefined;
            rowNumber?: boolean | Record<string, any> | undefined;
            summarySpanMethod?: ((data: {
                record: import("./interface").TableData;
                column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
                rowIndex: number;
                columnIndex: number;
            }) => void | {
                rowspan?: number | undefined;
                colspan?: number | undefined;
            }) | undefined;
            selectedKeys?: (string | number)[] | undefined;
            defaultSelectedKeys?: (string | number)[] | undefined;
            expandedKeys?: (string | number)[] | undefined;
            defaultExpandedKeys?: (string | number)[] | undefined;
        }> & {
            onChange?: ((data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => any) | undefined;
            onSelect?: ((rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
            onPageChange?: ((page: number) => any) | undefined;
            onPageSizeChange?: ((pageSize: number) => any) | undefined;
            onExpand?: ((rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
            "onUpdate:selectedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
            "onUpdate:expandedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
            onExpandedChange?: ((rowKeys: (string | number)[]) => any) | undefined;
            onSelectAll?: ((checked: boolean) => any) | undefined;
            onSelectionChange?: ((rowKeys: (string | number)[]) => any) | undefined;
            onSorterChange?: ((dataIndex: string, direction: string) => any) | undefined;
            onFilterChange?: ((dataIndex: string, filteredValues: string[]) => any) | undefined;
            onCellMouseEnter?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onCellMouseLeave?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onRowClick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
            onHeaderClick?: ((column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onColumnResize?: ((dataIndex: string, width: number) => any) | undefined;
            onRowDblclick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
            onCellDblclick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
            onRowContextmenu?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
            onCellContextmenu?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        }, {
            render: () => JSX.Element;
            selfExpand: (rowKey: import("../_utils/types").BaseType | import("../_utils/types").BaseType[], expanded?: boolean) => void;
            selfExpandAll: (expanded?: boolean) => void;
            selfSelect: (rowKey: import("../_utils/types").BaseType | import("../_utils/types").BaseType[], checked?: boolean) => void;
            selfSelectAll: (checked?: boolean) => void;
            selfResetFilters: (dataIndex?: string | string[] | undefined) => void;
            selfClearFilters: (dataIndex?: string | string[] | undefined) => void;
            selfResetSorters: () => void;
            selfClearSorters: () => void;
        }, unknown, {}, {
            selectAll(checked?: boolean | undefined): void;
            select(rowKey: string | number | (string | number)[], checked?: boolean | undefined): void;
            expandAll(checked?: boolean | undefined): void;
            expand(rowKey: string | number | (string | number)[], checked?: boolean | undefined): void;
            resetFilters(dataIndex?: string | string[] | undefined): void;
            clearFilters(dataIndex?: string | string[] | undefined): void;
            resetSorters(): void;
            clearSorters(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:selectedKeys': (rowKeys: (string | number)[]) => true;
            'update:expandedKeys': (rowKeys: (string | number)[]) => true;
            expand: (rowKey: string | number, record: import("./interface").TableData) => true;
            expandedChange: (rowKeys: (string | number)[]) => true;
            select: (rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => true;
            selectAll: (checked: boolean) => true;
            selectionChange: (rowKeys: (string | number)[]) => true;
            sorterChange: (dataIndex: string, direction: string) => true;
            filterChange: (dataIndex: string, filteredValues: string[]) => true;
            pageChange: (page: number) => true;
            pageSizeChange: (pageSize: number) => true;
            change: (data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => true;
            cellMouseEnter: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
            cellMouseLeave: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
            cellClick: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
            rowClick: (record: import("./interface").TableData, ev: Event) => true;
            headerClick: (column: import("./interface").TableColumnData, ev: Event) => true;
            columnResize: (dataIndex: string, width: number) => true;
            rowDblclick: (record: import("./interface").TableData, ev: Event) => true;
            cellDblclick: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
            rowContextmenu: (record: import("./interface").TableData, ev: Event) => true;
            cellContextmenu: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
        }, string, {
            size: "mini" | "medium" | "large" | "small";
            scrollbar: boolean | import("..").ScrollbarProps;
            data: import("./interface").TableData[];
            loading: boolean | Record<string, any>;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumnData[];
            hoverable: boolean;
            pagination: boolean | import("..").PaginationProps;
            stripe: boolean;
            tableLayoutFixed: boolean;
            pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            spanAll: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
            columnResizable: boolean;
            summaryText: string;
            defaultExpandAllRows: boolean;
            stickyHeader: number | boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        columns?: unknown;
        data?: unknown;
        bordered?: unknown;
        hoverable?: unknown;
        stripe?: unknown;
        size?: unknown;
        tableLayoutFixed?: unknown;
        loading?: unknown;
        rowSelection?: unknown;
        expandable?: unknown;
        scroll?: unknown;
        pagination?: unknown;
        pagePosition?: unknown;
        indentSize?: unknown;
        rowKey?: unknown;
        showHeader?: unknown;
        virtualListProps?: unknown;
        spanMethod?: unknown;
        spanAll?: unknown;
        components?: unknown;
        loadMore?: unknown;
        filterIconAlignLeft?: unknown;
        hideExpandButtonOnEmpty?: unknown;
        rowClass?: unknown;
        draggable?: unknown;
        rowNumber?: unknown;
        columnResizable?: unknown;
        summary?: unknown;
        summaryText?: unknown;
        summarySpanMethod?: unknown;
        selectedKeys?: unknown;
        defaultSelectedKeys?: unknown;
        expandedKeys?: unknown;
        defaultExpandedKeys?: unknown;
        defaultExpandAllRows?: unknown;
        stickyHeader?: unknown;
        scrollbar?: unknown;
    } & {
        size: "mini" | "medium" | "large" | "small";
        scrollbar: boolean | import("..").ScrollbarProps;
        data: import("./interface").TableData[];
        loading: boolean | Record<string, any>;
        bordered: boolean | import("./interface").TableBorder;
        columns: import("./interface").TableColumnData[];
        hoverable: boolean;
        pagination: boolean | import("..").PaginationProps;
        stripe: boolean;
        tableLayoutFixed: boolean;
        pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
        indentSize: number;
        rowKey: string;
        showHeader: boolean;
        spanAll: boolean;
        filterIconAlignLeft: boolean;
        hideExpandButtonOnEmpty: boolean;
        columnResizable: boolean;
        summaryText: string;
        defaultExpandAllRows: boolean;
        stickyHeader: number | boolean;
    } & {
        scroll?: {
            x?: string | number | undefined;
            y?: string | number | undefined;
            minWidth?: string | number | undefined;
            maxHeight?: string | number | undefined;
        } | undefined;
        summary?: boolean | ((params: {
            columns: import("./interface").TableColumnData[];
            data: import("./interface").TableData[];
        }) => import("./interface").TableData[]) | undefined;
        virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
        rowSelection?: import("./interface").TableRowSelection | undefined;
        expandable?: import("./interface").TableExpandable | undefined;
        spanMethod?: ((data: {
            record: import("./interface").TableData;
            column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
            rowIndex: number;
            columnIndex: number;
        }) => void | {
            rowspan?: number | undefined;
            colspan?: number | undefined;
        }) | undefined;
        components?: import("./interface").TableComponents | undefined;
        loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
        rowClass?: string | any[] | Record<string, any> | ((record: import("./interface").TableData, rowIndex: number) => any) | undefined;
        draggable?: import("./interface").TableDraggable | undefined;
        rowNumber?: boolean | Record<string, any> | undefined;
        summarySpanMethod?: ((data: {
            record: import("./interface").TableData;
            column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
            rowIndex: number;
            columnIndex: number;
        }) => void | {
            rowspan?: number | undefined;
            colspan?: number | undefined;
        }) | undefined;
        selectedKeys?: (string | number)[] | undefined;
        defaultSelectedKeys?: (string | number)[] | undefined;
        expandedKeys?: (string | number)[] | undefined;
        defaultExpandedKeys?: (string | number)[] | undefined;
    }> & {
        onChange?: ((data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => any) | undefined;
        onSelect?: ((rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
        onPageChange?: ((page: number) => any) | undefined;
        onPageSizeChange?: ((pageSize: number) => any) | undefined;
        onExpand?: ((rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
        "onUpdate:selectedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
        "onUpdate:expandedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
        onExpandedChange?: ((rowKeys: (string | number)[]) => any) | undefined;
        onSelectAll?: ((checked: boolean) => any) | undefined;
        onSelectionChange?: ((rowKeys: (string | number)[]) => any) | undefined;
        onSorterChange?: ((dataIndex: string, direction: string) => any) | undefined;
        onFilterChange?: ((dataIndex: string, filteredValues: string[]) => any) | undefined;
        onCellMouseEnter?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        onCellMouseLeave?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        onRowClick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
        onHeaderClick?: ((column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        onColumnResize?: ((dataIndex: string, width: number) => any) | undefined;
        onRowDblclick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
        onCellDblclick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
        onRowContextmenu?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
        onCellContextmenu?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        render: () => JSX.Element;
        selfExpand: (rowKey: import("../_utils/types").BaseType | import("../_utils/types").BaseType[], expanded?: boolean) => void;
        selfExpandAll: (expanded?: boolean) => void;
        selfSelect: (rowKey: import("../_utils/types").BaseType | import("../_utils/types").BaseType[], checked?: boolean) => void;
        selfSelectAll: (checked?: boolean) => void;
        selfResetFilters: (dataIndex?: string | string[] | undefined) => void;
        selfClearFilters: (dataIndex?: string | string[] | undefined) => void;
        selfResetSorters: () => void;
        selfClearSorters: () => void;
    }> & {} & {} & {
        selectAll(checked?: boolean | undefined): void;
        select(rowKey: string | number | (string | number)[], checked?: boolean | undefined): void;
        expandAll(checked?: boolean | undefined): void;
        expand(rowKey: string | number | (string | number)[], checked?: boolean | undefined): void;
        resetFilters(dataIndex?: string | string[] | undefined): void;
        clearFilters(dataIndex?: string | string[] | undefined): void;
        resetSorters(): void;
        clearSorters(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    columns?: unknown;
    data?: unknown;
    bordered?: unknown;
    hoverable?: unknown;
    stripe?: unknown;
    size?: unknown;
    tableLayoutFixed?: unknown;
    loading?: unknown;
    rowSelection?: unknown;
    expandable?: unknown;
    scroll?: unknown;
    pagination?: unknown;
    pagePosition?: unknown;
    indentSize?: unknown;
    rowKey?: unknown;
    showHeader?: unknown;
    virtualListProps?: unknown;
    spanMethod?: unknown;
    spanAll?: unknown;
    components?: unknown;
    loadMore?: unknown;
    filterIconAlignLeft?: unknown;
    hideExpandButtonOnEmpty?: unknown;
    rowClass?: unknown;
    draggable?: unknown;
    rowNumber?: unknown;
    columnResizable?: unknown;
    summary?: unknown;
    summaryText?: unknown;
    summarySpanMethod?: unknown;
    selectedKeys?: unknown;
    defaultSelectedKeys?: unknown;
    expandedKeys?: unknown;
    defaultExpandedKeys?: unknown;
    defaultExpandAllRows?: unknown;
    stickyHeader?: unknown;
    scrollbar?: unknown;
} & {
    size: "mini" | "medium" | "large" | "small";
    scrollbar: boolean | import("..").ScrollbarProps;
    data: import("./interface").TableData[];
    loading: boolean | Record<string, any>;
    bordered: boolean | import("./interface").TableBorder;
    columns: import("./interface").TableColumnData[];
    hoverable: boolean;
    pagination: boolean | import("..").PaginationProps;
    stripe: boolean;
    tableLayoutFixed: boolean;
    pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
    indentSize: number;
    rowKey: string;
    showHeader: boolean;
    spanAll: boolean;
    filterIconAlignLeft: boolean;
    hideExpandButtonOnEmpty: boolean;
    columnResizable: boolean;
    summaryText: string;
    defaultExpandAllRows: boolean;
    stickyHeader: number | boolean;
} & {
    scroll?: {
        x?: string | number | undefined;
        y?: string | number | undefined;
        minWidth?: string | number | undefined;
        maxHeight?: string | number | undefined;
    } | undefined;
    summary?: boolean | ((params: {
        columns: import("./interface").TableColumnData[];
        data: import("./interface").TableData[];
    }) => import("./interface").TableData[]) | undefined;
    virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
    rowSelection?: import("./interface").TableRowSelection | undefined;
    expandable?: import("./interface").TableExpandable | undefined;
    spanMethod?: ((data: {
        record: import("./interface").TableData;
        column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
        rowIndex: number;
        columnIndex: number;
    }) => void | {
        rowspan?: number | undefined;
        colspan?: number | undefined;
    }) | undefined;
    components?: import("./interface").TableComponents | undefined;
    loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
    rowClass?: string | any[] | Record<string, any> | ((record: import("./interface").TableData, rowIndex: number) => any) | undefined;
    draggable?: import("./interface").TableDraggable | undefined;
    rowNumber?: boolean | Record<string, any> | undefined;
    summarySpanMethod?: ((data: {
        record: import("./interface").TableData;
        column: import("./interface").TableColumnData | import("./interface").TableOperationColumn;
        rowIndex: number;
        columnIndex: number;
    }) => void | {
        rowspan?: number | undefined;
        colspan?: number | undefined;
    }) | undefined;
    selectedKeys?: (string | number)[] | undefined;
    defaultSelectedKeys?: (string | number)[] | undefined;
    expandedKeys?: (string | number)[] | undefined;
    defaultExpandedKeys?: (string | number)[] | undefined;
}> & {
    onChange?: ((data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => any) | undefined;
    onSelect?: ((rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
    onPageChange?: ((page: number) => any) | undefined;
    onPageSizeChange?: ((pageSize: number) => any) | undefined;
    onExpand?: ((rowKey: string | number, record: import("./interface").TableData) => any) | undefined;
    "onUpdate:selectedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
    "onUpdate:expandedKeys"?: ((rowKeys: (string | number)[]) => any) | undefined;
    onExpandedChange?: ((rowKeys: (string | number)[]) => any) | undefined;
    onSelectAll?: ((checked: boolean) => any) | undefined;
    onSelectionChange?: ((rowKeys: (string | number)[]) => any) | undefined;
    onSorterChange?: ((dataIndex: string, direction: string) => any) | undefined;
    onFilterChange?: ((dataIndex: string, filteredValues: string[]) => any) | undefined;
    onCellMouseEnter?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
    onCellMouseLeave?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
    onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
    onRowClick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
    onHeaderClick?: ((column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
    onColumnResize?: ((dataIndex: string, width: number) => any) | undefined;
    onRowDblclick?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
    onCellDblclick?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
    onRowContextmenu?: ((record: import("./interface").TableData, ev: Event) => any) | undefined;
    onCellContextmenu?: ((record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => any) | undefined;
}, {
    render: () => JSX.Element;
    selfExpand: (rowKey: import("../_utils/types").BaseType | import("../_utils/types").BaseType[], expanded?: boolean) => void;
    selfExpandAll: (expanded?: boolean) => void;
    selfSelect: (rowKey: import("../_utils/types").BaseType | import("../_utils/types").BaseType[], checked?: boolean) => void;
    selfSelectAll: (checked?: boolean) => void;
    selfResetFilters: (dataIndex?: string | string[] | undefined) => void;
    selfClearFilters: (dataIndex?: string | string[] | undefined) => void;
    selfResetSorters: () => void;
    selfClearSorters: () => void;
}, unknown, {}, {
    selectAll(checked?: boolean | undefined): void;
    select(rowKey: string | number | (string | number)[], checked?: boolean | undefined): void;
    expandAll(checked?: boolean | undefined): void;
    expand(rowKey: string | number | (string | number)[], checked?: boolean | undefined): void;
    resetFilters(dataIndex?: string | string[] | undefined): void;
    clearFilters(dataIndex?: string | string[] | undefined): void;
    resetSorters(): void;
    clearSorters(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:selectedKeys': (rowKeys: (string | number)[]) => true;
    'update:expandedKeys': (rowKeys: (string | number)[]) => true;
    expand: (rowKey: string | number, record: import("./interface").TableData) => true;
    expandedChange: (rowKeys: (string | number)[]) => true;
    select: (rowKeys: (string | number)[], rowKey: string | number, record: import("./interface").TableData) => true;
    selectAll: (checked: boolean) => true;
    selectionChange: (rowKeys: (string | number)[]) => true;
    sorterChange: (dataIndex: string, direction: string) => true;
    filterChange: (dataIndex: string, filteredValues: string[]) => true;
    pageChange: (page: number) => true;
    pageSizeChange: (pageSize: number) => true;
    change: (data: import("./interface").TableData[], extra: import("./interface").TableChangeExtra, currentData: import("./interface").TableData[]) => true;
    cellMouseEnter: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
    cellMouseLeave: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
    cellClick: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
    rowClick: (record: import("./interface").TableData, ev: Event) => true;
    headerClick: (column: import("./interface").TableColumnData, ev: Event) => true;
    columnResize: (dataIndex: string, width: number) => true;
    rowDblclick: (record: import("./interface").TableData, ev: Event) => true;
    cellDblclick: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
    rowContextmenu: (record: import("./interface").TableData, ev: Event) => true;
    cellContextmenu: (record: import("./interface").TableData, column: import("./interface").TableColumnData, ev: Event) => true;
}, string, {
    size: "mini" | "medium" | "large" | "small";
    scrollbar: boolean | import("..").ScrollbarProps;
    data: import("./interface").TableData[];
    loading: boolean | Record<string, any>;
    bordered: boolean | import("./interface").TableBorder;
    columns: import("./interface").TableColumnData[];
    hoverable: boolean;
    pagination: boolean | import("..").PaginationProps;
    stripe: boolean;
    tableLayoutFixed: boolean;
    pagePosition: "top" | "tl" | "tr" | "bottom" | "bl" | "br";
    indentSize: number;
    rowKey: string;
    showHeader: boolean;
    spanAll: boolean;
    filterIconAlignLeft: boolean;
    hideExpandButtonOnEmpty: boolean;
    columnResizable: boolean;
    summaryText: string;
    defaultExpandAllRows: boolean;
    stickyHeader: number | boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Thead: import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
    Tbody: import("vue").DefineComponent<{}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
    Tr: import("vue").DefineComponent<{
        expand: {
            type: BooleanConstructor;
        };
        empty: {
            type: BooleanConstructor;
        };
        checked: {
            type: BooleanConstructor;
        };
        rowIndex: NumberConstructor;
        record: {
            type: import("vue").PropType<import("./interface").TableDataWithRaw>;
            default: () => {};
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        expand?: unknown;
        empty?: unknown;
        checked?: unknown;
        rowIndex?: unknown;
        record?: unknown;
    } & {
        empty: boolean;
        expand: boolean;
        checked: boolean;
        record: import("./interface").TableDataWithRaw;
    } & {
        rowIndex?: number | undefined;
    }>, {
        empty: boolean;
        expand: boolean;
        checked: boolean;
        record: import("./interface").TableDataWithRaw;
    }>;
    Th: import("vue").DefineComponent<{
        column: {
            type: import("vue").PropType<import("./interface").TableColumnData>;
            default: () => {};
        };
        operations: {
            type: import("vue").PropType<import("./interface").TableOperationColumn[]>;
            default: () => never[];
        };
        dataColumns: {
            type: import("vue").PropType<import("./interface").TableColumnData[]>;
            default: () => never[];
        };
        resizable: BooleanConstructor;
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        column?: unknown;
        operations?: unknown;
        dataColumns?: unknown;
        resizable?: unknown;
    } & {
        column: import("./interface").TableColumnData;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumnData[];
        resizable: boolean;
    } & {}>, {
        column: import("./interface").TableColumnData;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumnData[];
        resizable: boolean;
    }>;
    Td: import("vue").DefineComponent<{
        rowIndex: NumberConstructor;
        record: {
            type: import("vue").PropType<import("./interface").TableDataWithRaw>;
            default: () => {};
        };
        column: {
            type: import("vue").PropType<import("./interface").TableColumnData>;
            default: () => {};
        };
        type: {
            type: import("vue").PropType<"normal" | "checkbox" | "radio" | "expand" | "operation">;
            default: string;
        };
        operations: {
            type: import("vue").PropType<import("./interface").TableOperationColumn[]>;
            default: () => never[];
        };
        dataColumns: {
            type: import("vue").PropType<import("./interface").TableColumnData[]>;
            default: () => never[];
        };
        colSpan: {
            type: NumberConstructor;
            default: number;
        };
        rowSpan: {
            type: NumberConstructor;
            default: number;
        };
        isFixedExpand: {
            type: BooleanConstructor;
            default: boolean;
        };
        containerWidth: {
            type: NumberConstructor;
        };
        showExpandBtn: {
            type: BooleanConstructor;
            default: boolean;
        };
        indentSize: {
            type: NumberConstructor;
            default: number;
        };
        renderExpandBtn: {
            type: import("vue").PropType<(record: import("./interface").TableDataWithRaw, stopPropagation?: boolean | undefined) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        summary: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        rowIndex?: unknown;
        record?: unknown;
        column?: unknown;
        type?: unknown;
        operations?: unknown;
        dataColumns?: unknown;
        colSpan?: unknown;
        rowSpan?: unknown;
        isFixedExpand?: unknown;
        containerWidth?: unknown;
        showExpandBtn?: unknown;
        indentSize?: unknown;
        renderExpandBtn?: unknown;
        summary?: unknown;
    } & {
        column: import("./interface").TableColumnData;
        summary: boolean;
        type: "normal" | "checkbox" | "radio" | "expand" | "operation";
        indentSize: number;
        record: import("./interface").TableDataWithRaw;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumnData[];
        colSpan: number;
        rowSpan: number;
        isFixedExpand: boolean;
        showExpandBtn: boolean;
    } & {
        rowIndex?: number | undefined;
        containerWidth?: number | undefined;
        renderExpandBtn?: ((record: import("./interface").TableDataWithRaw, stopPropagation?: boolean | undefined) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) | undefined;
    }>, {
        column: import("./interface").TableColumnData;
        summary: boolean;
        type: "normal" | "checkbox" | "radio" | "expand" | "operation";
        indentSize: number;
        record: import("./interface").TableDataWithRaw;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumnData[];
        colSpan: number;
        rowSpan: number;
        isFixedExpand: boolean;
        showExpandBtn: boolean;
    }>;
    Column: import("vue").DefineComponent<{
        dataIndex: StringConstructor;
        title: StringConstructor;
        width: NumberConstructor;
        align: {
            type: import("vue").PropType<"left" | "right" | "center" | undefined>;
        };
        fixed: {
            type: import("vue").PropType<"left" | "right" | undefined>;
        };
        ellipsis: {
            type: BooleanConstructor;
            default: boolean;
        };
        sortable: {
            type: import("vue").PropType<import("./interface").TableSortable>;
            default: undefined;
        };
        filterable: {
            type: import("vue").PropType<import("./interface").TableFilterable>;
            default: undefined;
        };
        cellClass: {
            type: import("vue").PropType<import("../_utils/types").ClassName>;
        };
        headerCellClass: {
            type: import("vue").PropType<import("../_utils/types").ClassName>;
        };
        bodyCellClass: {
            type: import("vue").PropType<import("../_utils/types").ClassName | ((record: import("./interface").TableData) => import("../_utils/types").ClassName)>;
        };
        summaryCellClass: {
            type: import("vue").PropType<import("../_utils/types").ClassName | ((record: import("./interface").TableData) => import("../_utils/types").ClassName)>;
        };
        cellStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        headerCellStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        bodyCellStyle: {
            type: import("vue").PropType<import("vue").CSSProperties | ((record: import("./interface").TableData) => import("vue").CSSProperties)>;
        };
        summaryCellStyle: {
            type: import("vue").PropType<import("vue").CSSProperties | ((record: import("./interface").TableData) => import("vue").CSSProperties)>;
        };
        index: {
            type: NumberConstructor;
        };
        tooltip: {
            type: (ObjectConstructor | BooleanConstructor)[];
            default: boolean;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[] | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        dataIndex?: unknown;
        title?: unknown;
        width?: unknown;
        align?: unknown;
        fixed?: unknown;
        ellipsis?: unknown;
        sortable?: unknown;
        filterable?: unknown;
        cellClass?: unknown;
        headerCellClass?: unknown;
        bodyCellClass?: unknown;
        summaryCellClass?: unknown;
        cellStyle?: unknown;
        headerCellStyle?: unknown;
        bodyCellStyle?: unknown;
        summaryCellStyle?: unknown;
        index?: unknown;
        tooltip?: unknown;
    } & {
        ellipsis: boolean;
        tooltip: boolean | Record<string, any>;
    } & {
        fixed?: "left" | "right" | undefined;
        title?: string | undefined;
        align?: "left" | "right" | "center" | undefined;
        index?: number | undefined;
        width?: number | undefined;
        dataIndex?: string | undefined;
        sortable?: import("./interface").TableSortable | undefined;
        filterable?: import("./interface").TableFilterable | undefined;
        cellClass?: import("../_utils/types").ClassName | undefined;
        headerCellClass?: import("../_utils/types").ClassName | undefined;
        bodyCellClass?: import("../_utils/types").ClassName | ((record: import("./interface").TableData) => import("../_utils/types").ClassName) | undefined;
        summaryCellClass?: import("../_utils/types").ClassName | ((record: import("./interface").TableData) => import("../_utils/types").ClassName) | undefined;
        cellStyle?: import("vue").CSSProperties | undefined;
        headerCellStyle?: import("vue").CSSProperties | undefined;
        bodyCellStyle?: import("vue").CSSProperties | ((record: import("./interface").TableData) => import("vue").CSSProperties) | undefined;
        summaryCellStyle?: import("vue").CSSProperties | ((record: import("./interface").TableData) => import("vue").CSSProperties) | undefined;
    }>, {
        ellipsis: boolean;
        tooltip: boolean | Record<string, any>;
        sortable: import("./interface").TableSortable;
        filterable: import("./interface").TableFilterable;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TableInstance = InstanceType<typeof _Table>;
export declare type TheadInstance = InstanceType<typeof _Thead>;
export declare type TbodyInstance = InstanceType<typeof _Tbody>;
export declare type TrInstance = InstanceType<typeof _Tr>;
export declare type ThInstance = InstanceType<typeof _Th>;
export declare type TdInstance = InstanceType<typeof _Td>;
export declare type TableColumnInstance = InstanceType<typeof _Column>;
export type { TableData, TableSortable, TableFilterData, TableFilterable, TableColumnData, TableBorder, TableRowSelection, TableExpandable, TableDraggable, TableChangeExtra, } from './interface';
export { _Thead as Thead, _Tbody as Tbody, _Tr as Tr, _Th as Th, _Td as Td, _Column as TableColumn, };
export default Table;
