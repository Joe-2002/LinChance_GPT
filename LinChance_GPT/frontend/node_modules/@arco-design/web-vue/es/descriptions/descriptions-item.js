import { defineComponent, toRefs, inject, getCurrentInstance, ref, reactive, onMounted, onUpdated, onBeforeUnmount, renderSlot } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import { descriptionsInjectionKey } from "./context.js";
import { useIndex } from "../_hooks/use-index.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper.js";
const _sfc_main = defineComponent({
  name: "DescriptionsItem",
  props: {
    span: {
      type: Number,
      default: 1
    },
    label: String
  },
  setup(props) {
    var _a;
    const { span } = toRefs(props);
    const prefixCls = getPrefixCls("descriptions");
    const descCtx = inject(descriptionsInjectionKey, {});
    const instance = getCurrentInstance();
    const itemRef = ref();
    const { computedIndex } = useIndex({
      itemRef,
      selector: `.${prefixCls}-item-value`,
      parentClassName: `${prefixCls}-table`
    });
    const itemData = reactive({
      index: computedIndex,
      span
    });
    if (instance == null ? void 0 : instance.uid) {
      (_a = descCtx.addItem) == null ? void 0 : _a.call(descCtx, instance.uid, itemData);
    }
    const getItemRef = () => {
      var _a2;
      const itemEle = ((_a2 = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a2.$el).parentElement;
      if (itemEle && itemEle !== itemRef.value) {
        itemRef.value = itemEle;
      }
    };
    onMounted(() => getItemRef());
    onUpdated(() => getItemRef());
    onBeforeUnmount(() => {
      var _a2;
      if (instance == null ? void 0 : instance.uid) {
        (_a2 = descCtx.removeItem) == null ? void 0 : _a2.call(descCtx, instance.uid);
      }
    });
    return {
      prefixCls
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default");
}
var DescriptionsItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { DescriptionsItem as default };
