import type { PropType, CSSProperties } from 'vue';
import { DescData } from './interface';
import { ResponsiveValue } from '../grid';
declare const _default: import("vue").DefineComponent<{
    data: {
        type: PropType<DescData[]>;
        default: () => never[];
    };
    column: {
        type: PropType<number | ResponsiveValue>;
        default: number;
    };
    title: StringConstructor;
    layout: {
        type: PropType<"horizontal" | "vertical" | "inline-horizontal" | "inline-vertical">;
        default: string;
    };
    align: {
        type: PropType<"left" | "right" | "center" | {
            label?: "left" | "right" | "center" | undefined;
            value?: "left" | "right" | "center" | undefined;
        }>;
        default: string;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    labelStyle: {
        type: PropType<CSSProperties>;
    };
    valueStyle: {
        type: PropType<CSSProperties>;
    };
    tableLayout: {
        type: PropType<"auto" | "fixed">;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    data?: unknown;
    column?: unknown;
    title?: unknown;
    layout?: unknown;
    align?: unknown;
    size?: unknown;
    bordered?: unknown;
    labelStyle?: unknown;
    valueStyle?: unknown;
    tableLayout?: unknown;
} & {
    column: number | ResponsiveValue;
    layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
    data: DescData[];
    bordered: boolean;
    align: "left" | "right" | "center" | {
        label?: "left" | "right" | "center" | undefined;
        value?: "left" | "right" | "center" | undefined;
    };
    tableLayout: "auto" | "fixed";
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    title?: string | undefined;
    labelStyle?: CSSProperties | undefined;
    valueStyle?: CSSProperties | undefined;
}>, {
    column: number | ResponsiveValue;
    layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
    data: DescData[];
    bordered: boolean;
    align: "left" | "right" | "center" | {
        label?: "left" | "right" | "center" | undefined;
        value?: "left" | "right" | "center" | undefined;
    };
    tableLayout: "auto" | "fixed";
}>;
export default _default;
