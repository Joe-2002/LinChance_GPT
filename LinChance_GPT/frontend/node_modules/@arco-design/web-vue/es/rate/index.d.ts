import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Rate from './rate';
declare const Rate: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            modelValue: number;
            defaultValue: number;
            readonly: boolean;
            allowClear: boolean;
            count: number;
            allowHalf: boolean;
            grading: boolean;
        }> & Omit<Readonly<{
            count?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            allowHalf?: unknown;
            allowClear?: unknown;
            grading?: unknown;
            readonly?: unknown;
            disabled?: unknown;
            color?: unknown;
        } & {
            disabled: boolean;
            defaultValue: number;
            readonly: boolean;
            allowClear: boolean;
            count: number;
            allowHalf: boolean;
            grading: boolean;
        } & {
            color?: string | Record<string, string> | undefined;
            modelValue?: number | undefined;
        }> & {
            onChange?: ((value: number) => any) | undefined;
            "onUpdate:modelValue"?: ((value: number) => any) | undefined;
            onHoverChange?: ((value: number) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "modelValue" | "defaultValue" | "readonly" | "allowClear" | "count" | "allowHalf" | "grading">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "update:modelValue", value: number) => void) & ((event: "change", value: number) => void) & ((event: "hoverChange", value: number) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            count?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            allowHalf?: unknown;
            allowClear?: unknown;
            grading?: unknown;
            readonly?: unknown;
            disabled?: unknown;
            color?: unknown;
        } & {
            disabled: boolean;
            defaultValue: number;
            readonly: boolean;
            allowClear: boolean;
            count: number;
            allowHalf: boolean;
            grading: boolean;
        } & {
            color?: string | Record<string, string> | undefined;
            modelValue?: number | undefined;
        }> & {
            onChange?: ((value: number) => any) | undefined;
            "onUpdate:modelValue"?: ((value: number) => any) | undefined;
            onHoverChange?: ((value: number) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (value: number) => true;
            change: (value: number) => true;
            hoverChange: (value: number) => true;
        }, string, {
            disabled: boolean;
            modelValue: number;
            defaultValue: number;
            readonly: boolean;
            allowClear: boolean;
            count: number;
            allowHalf: boolean;
            grading: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        count?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        allowHalf?: unknown;
        allowClear?: unknown;
        grading?: unknown;
        readonly?: unknown;
        disabled?: unknown;
        color?: unknown;
    } & {
        disabled: boolean;
        defaultValue: number;
        readonly: boolean;
        allowClear: boolean;
        count: number;
        allowHalf: boolean;
        grading: boolean;
    } & {
        color?: string | Record<string, string> | undefined;
        modelValue?: number | undefined;
    }> & {
        onChange?: ((value: number) => any) | undefined;
        "onUpdate:modelValue"?: ((value: number) => any) | undefined;
        onHoverChange?: ((value: number) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    count?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    allowHalf?: unknown;
    allowClear?: unknown;
    grading?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    color?: unknown;
} & {
    disabled: boolean;
    defaultValue: number;
    readonly: boolean;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    grading: boolean;
} & {
    color?: string | Record<string, string> | undefined;
    modelValue?: number | undefined;
}> & {
    onChange?: ((value: number) => any) | undefined;
    "onUpdate:modelValue"?: ((value: number) => any) | undefined;
    onHoverChange?: ((value: number) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: number) => true;
    change: (value: number) => true;
    hoverChange: (value: number) => true;
}, string, {
    disabled: boolean;
    modelValue: number;
    defaultValue: number;
    readonly: boolean;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    grading: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type RateInstance = InstanceType<typeof _Rate>;
export default Rate;
