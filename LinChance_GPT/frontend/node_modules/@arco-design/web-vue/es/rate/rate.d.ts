import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    count: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultValue: {
        type: NumberConstructor;
        default: number;
    };
    allowHalf: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    grading: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: PropType<string | Record<string, string>>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: number) => true;
    change: (value: number) => true;
    hoverChange: (value: number) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    count?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    allowHalf?: unknown;
    allowClear?: unknown;
    grading?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    color?: unknown;
} & {
    disabled: boolean;
    defaultValue: number;
    readonly: boolean;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    grading: boolean;
} & {
    color?: string | Record<string, string> | undefined;
    modelValue?: number | undefined;
}> & {
    onChange?: ((value: number) => any) | undefined;
    "onUpdate:modelValue"?: ((value: number) => any) | undefined;
    onHoverChange?: ((value: number) => any) | undefined;
}, {
    disabled: boolean;
    modelValue: number;
    defaultValue: number;
    readonly: boolean;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    grading: boolean;
}>;
export default _default;
