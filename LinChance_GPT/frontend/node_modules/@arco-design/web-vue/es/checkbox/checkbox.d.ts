import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<boolean | (string | number | boolean)[]>;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: (BooleanConstructor | StringConstructor | NumberConstructor)[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    uninjectGroupContext: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: boolean | (string | number | boolean)[]) => true;
    change: (value: boolean | (string | number | boolean)[], ev: Event) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultChecked?: unknown;
    value?: unknown;
    disabled?: unknown;
    indeterminate?: unknown;
    uninjectGroupContext?: unknown;
} & {
    disabled: boolean;
    defaultChecked: boolean;
    indeterminate: boolean;
    uninjectGroupContext: boolean;
} & {
    modelValue?: boolean | (string | number | boolean)[] | undefined;
    value?: string | number | boolean | undefined;
}> & {
    onChange?: ((value: boolean | (string | number | boolean)[], ev: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean | (string | number | boolean)[]) => any) | undefined;
}, {
    disabled: boolean;
    modelValue: boolean | (string | number | boolean)[];
    defaultChecked: boolean;
    indeterminate: boolean;
    uninjectGroupContext: boolean;
}>;
export default _default;
