import type { CSSProperties, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    color: {
        type: PropType<string>;
    };
    size: {
        type: PropType<"medium" | "large" | "small">;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    checkable: {
        type: BooleanConstructor;
        default: boolean;
    };
    checked: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | "" | undefined;
    })[]>;
    style: import("vue").ComputedRef<CSSProperties | undefined>;
    computedVisible: import("vue").ComputedRef<boolean>;
    computedChecked: import("vue").ComputedRef<boolean>;
    handleClick: (ev: MouseEvent) => void;
    handleClose: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:visible': (visible: boolean) => true;
    'update:checked': (checked: boolean) => true;
    close: (ev: MouseEvent) => true;
    check: (checked: boolean, ev: MouseEvent) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    color?: unknown;
    size?: unknown;
    bordered?: unknown;
    visible?: unknown;
    defaultVisible?: unknown;
    loading?: unknown;
    closable?: unknown;
    checkable?: unknown;
    checked?: unknown;
    defaultChecked?: unknown;
} & {
    loading: boolean;
    bordered: boolean;
    closable: boolean;
    defaultVisible: boolean;
    checkable: boolean;
    defaultChecked: boolean;
} & {
    visible?: boolean | undefined;
    color?: string | undefined;
    size?: "medium" | "large" | "small" | undefined;
    checked?: boolean | undefined;
}> & {
    onClose?: ((ev: MouseEvent) => any) | undefined;
    "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
    "onUpdate:checked"?: ((checked: boolean) => any) | undefined;
    onCheck?: ((checked: boolean, ev: MouseEvent) => any) | undefined;
}, {
    visible: boolean;
    loading: boolean;
    bordered: boolean;
    closable: boolean;
    defaultVisible: boolean;
    checked: boolean;
    checkable: boolean;
    defaultChecked: boolean;
}>;
export default _default;
