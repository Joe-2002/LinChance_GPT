import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Tag from './tag';
declare const Tag: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            visible: boolean;
            loading: boolean;
            bordered: boolean;
            closable: boolean;
            defaultVisible: boolean;
            checked: boolean;
            checkable: boolean;
            defaultChecked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            bordered?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
        } & {
            loading: boolean;
            bordered: boolean;
            closable: boolean;
            defaultVisible: boolean;
            checkable: boolean;
            defaultChecked: boolean;
        } & {
            visible?: boolean | undefined;
            color?: string | undefined;
            size?: "medium" | "large" | "small" | undefined;
            checked?: boolean | undefined;
        }> & {
            onClose?: ((ev: MouseEvent) => any) | undefined;
            "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
            "onUpdate:checked"?: ((checked: boolean) => any) | undefined;
            onCheck?: ((checked: boolean, ev: MouseEvent) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "visible" | "loading" | "bordered" | "closable" | "defaultVisible" | "checked" | "checkable" | "defaultChecked">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "close", ev: MouseEvent) => void) & ((event: "update:visible", visible: boolean) => void) & ((event: "update:checked", checked: boolean) => void) & ((event: "check", checked: boolean, ev: MouseEvent) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            color?: unknown;
            size?: unknown;
            bordered?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
        } & {
            loading: boolean;
            bordered: boolean;
            closable: boolean;
            defaultVisible: boolean;
            checkable: boolean;
            defaultChecked: boolean;
        } & {
            visible?: boolean | undefined;
            color?: string | undefined;
            size?: "medium" | "large" | "small" | undefined;
            checked?: boolean | undefined;
        }> & {
            onClose?: ((ev: MouseEvent) => any) | undefined;
            "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
            "onUpdate:checked"?: ((checked: boolean) => any) | undefined;
            onCheck?: ((checked: boolean, ev: MouseEvent) => any) | undefined;
        }, {
            prefixCls: string;
            cls: import("vue").ComputedRef<(string | {
                [x: string]: boolean | "" | undefined;
            })[]>;
            style: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
            computedVisible: import("vue").ComputedRef<boolean>;
            computedChecked: import("vue").ComputedRef<boolean>;
            handleClick: (ev: MouseEvent) => void;
            handleClose: (ev: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:visible': (visible: boolean) => true;
            'update:checked': (checked: boolean) => true;
            close: (ev: MouseEvent) => true;
            check: (checked: boolean, ev: MouseEvent) => true;
        }, string, {
            visible: boolean;
            loading: boolean;
            bordered: boolean;
            closable: boolean;
            defaultVisible: boolean;
            checked: boolean;
            checkable: boolean;
            defaultChecked: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        color?: unknown;
        size?: unknown;
        bordered?: unknown;
        visible?: unknown;
        defaultVisible?: unknown;
        loading?: unknown;
        closable?: unknown;
        checkable?: unknown;
        checked?: unknown;
        defaultChecked?: unknown;
    } & {
        loading: boolean;
        bordered: boolean;
        closable: boolean;
        defaultVisible: boolean;
        checkable: boolean;
        defaultChecked: boolean;
    } & {
        visible?: boolean | undefined;
        color?: string | undefined;
        size?: "medium" | "large" | "small" | undefined;
        checked?: boolean | undefined;
    }> & {
        onClose?: ((ev: MouseEvent) => any) | undefined;
        "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
        "onUpdate:checked"?: ((checked: boolean) => any) | undefined;
        onCheck?: ((checked: boolean, ev: MouseEvent) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean | "" | undefined;
        })[]>;
        style: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
        computedVisible: import("vue").ComputedRef<boolean>;
        computedChecked: import("vue").ComputedRef<boolean>;
        handleClick: (ev: MouseEvent) => void;
        handleClose: (ev: MouseEvent) => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    color?: unknown;
    size?: unknown;
    bordered?: unknown;
    visible?: unknown;
    defaultVisible?: unknown;
    loading?: unknown;
    closable?: unknown;
    checkable?: unknown;
    checked?: unknown;
    defaultChecked?: unknown;
} & {
    loading: boolean;
    bordered: boolean;
    closable: boolean;
    defaultVisible: boolean;
    checkable: boolean;
    defaultChecked: boolean;
} & {
    visible?: boolean | undefined;
    color?: string | undefined;
    size?: "medium" | "large" | "small" | undefined;
    checked?: boolean | undefined;
}> & {
    onClose?: ((ev: MouseEvent) => any) | undefined;
    "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
    "onUpdate:checked"?: ((checked: boolean) => any) | undefined;
    onCheck?: ((checked: boolean, ev: MouseEvent) => any) | undefined;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | "" | undefined;
    })[]>;
    style: import("vue").ComputedRef<import("vue").CSSProperties | undefined>;
    computedVisible: import("vue").ComputedRef<boolean>;
    computedChecked: import("vue").ComputedRef<boolean>;
    handleClick: (ev: MouseEvent) => void;
    handleClose: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:visible': (visible: boolean) => true;
    'update:checked': (checked: boolean) => true;
    close: (ev: MouseEvent) => true;
    check: (checked: boolean, ev: MouseEvent) => true;
}, string, {
    visible: boolean;
    loading: boolean;
    bordered: boolean;
    closable: boolean;
    defaultVisible: boolean;
    checked: boolean;
    checkable: boolean;
    defaultChecked: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TagInstance = InstanceType<typeof _Tag>;
export type { TagProps, TagColor } from './interface';
export default Tag;
