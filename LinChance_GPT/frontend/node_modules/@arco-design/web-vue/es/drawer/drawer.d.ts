import type { CSSProperties, PropType } from 'vue';
import { ButtonProps } from '../button';
declare const _default: import("vue").DefineComponent<{
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top" | "bottom" | "left" | "right">;
        default: string;
        validator: (value: any) => boolean;
    };
    title: StringConstructor;
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    okText: StringConstructor;
    cancelText: StringConstructor;
    okLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    okButtonProps: {
        type: PropType<ButtonProps>;
    };
    cancelButtonProps: {
        type: PropType<ButtonProps>;
    };
    unmountOnClose: BooleanConstructor;
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
        default: string;
    };
    drawerStyle: {
        type: PropType<CSSProperties>;
    };
    onBeforeOk: {
        type: PropType<(done: (closed: boolean) => void) => void | boolean | Promise<void | boolean>>;
    };
    onBeforeCancel: {
        type: PropType<() => boolean>;
    };
    escToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    header: {
        type: BooleanConstructor;
        default: boolean;
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCancel: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    prefixCls: string;
    style: import("vue").ComputedRef<CSSProperties>;
    t: (key: string, ...args: any[]) => string;
    mounted: import("vue").Ref<boolean>;
    computedVisible: import("vue").ComputedRef<boolean>;
    mergedOkLoading: import("vue").ComputedRef<boolean>;
    zIndex: import("vue").Ref<number>;
    handleOk: (e: Event) => Promise<void>;
    handleCancel: (e: Event) => void;
    handleOpen: () => void;
    handleClose: () => void;
    handleMask: (e: Event) => void;
    isFixed: import("vue").ComputedRef<boolean>;
    teleportContainer: import("vue").Ref<string | HTMLElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:visible': (visible: boolean) => true;
    ok: (e: Event) => true;
    cancel: (e: Event) => true;
    open: () => true;
    close: () => true;
    beforeOpen: () => true;
    beforeClose: () => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible?: unknown;
    defaultVisible?: unknown;
    placement?: unknown;
    title?: unknown;
    mask?: unknown;
    maskClosable?: unknown;
    closable?: unknown;
    okText?: unknown;
    cancelText?: unknown;
    okLoading?: unknown;
    okButtonProps?: unknown;
    cancelButtonProps?: unknown;
    unmountOnClose?: unknown;
    width?: unknown;
    height?: unknown;
    popupContainer?: unknown;
    drawerStyle?: unknown;
    onBeforeOk?: unknown;
    onBeforeCancel?: unknown;
    escToClose?: unknown;
    renderToBody?: unknown;
    header?: unknown;
    footer?: unknown;
    hideCancel?: unknown;
} & {
    unmountOnClose: boolean;
    popupContainer: string | HTMLElement;
    renderToBody: boolean;
    visible: boolean;
    footer: boolean;
    header: boolean;
    mask: boolean;
    closable: boolean;
    height: string | number;
    width: string | number;
    defaultVisible: boolean;
    maskClosable: boolean;
    placement: "top" | "bottom" | "left" | "right";
    okLoading: boolean;
    escToClose: boolean;
    hideCancel: boolean;
} & {
    title?: string | undefined;
    okText?: string | undefined;
    cancelText?: string | undefined;
    okButtonProps?: ButtonProps | undefined;
    cancelButtonProps?: ButtonProps | undefined;
    drawerStyle?: CSSProperties | undefined;
    onBeforeOk?: ((done: (closed: boolean) => void) => void | boolean | Promise<void | boolean>) | undefined;
    onBeforeCancel?: (() => boolean) | undefined;
}> & {
    onClose?: (() => any) | undefined;
    "onUpdate:visible"?: ((visible: boolean) => any) | undefined;
    onOk?: ((e: Event) => any) | undefined;
    onOpen?: (() => any) | undefined;
    onCancel?: ((e: Event) => any) | undefined;
    onBeforeOpen?: (() => any) | undefined;
    onBeforeClose?: (() => any) | undefined;
}, {
    unmountOnClose: boolean;
    popupContainer: string | HTMLElement;
    renderToBody: boolean;
    visible: boolean;
    footer: boolean;
    header: boolean;
    mask: boolean;
    closable: boolean;
    height: string | number;
    width: string | number;
    defaultVisible: boolean;
    maskClosable: boolean;
    placement: "top" | "bottom" | "left" | "right";
    okLoading: boolean;
    escToClose: boolean;
    hideCancel: boolean;
}>;
export default _default;
