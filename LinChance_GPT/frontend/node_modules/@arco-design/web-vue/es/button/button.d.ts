import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"dashed" | "text" | "outline" | "primary" | "secondary">;
    };
    shape: {
        type: PropType<"round" | "circle" | "square">;
    };
    status: {
        type: PropType<"normal" | "success" | "warning" | "danger">;
    };
    size: {
        type: PropType<"mini" | "medium" | "large" | "small">;
    };
    long: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    htmlType: {
        type: StringConstructor;
        default: string;
    };
    href: StringConstructor;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    handleClick: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (ev: MouseEvent) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    shape?: unknown;
    status?: unknown;
    size?: unknown;
    long?: unknown;
    loading?: unknown;
    disabled?: unknown;
    htmlType?: unknown;
    href?: unknown;
} & {
    disabled: boolean;
    loading: boolean;
    long: boolean;
    htmlType: string;
} & {
    size?: "mini" | "medium" | "large" | "small" | undefined;
    type?: "dashed" | "text" | "outline" | "primary" | "secondary" | undefined;
    href?: string | undefined;
    shape?: "round" | "circle" | "square" | undefined;
    status?: "normal" | "success" | "warning" | "danger" | undefined;
}> & {
    onClick?: ((ev: MouseEvent) => any) | undefined;
}, {
    disabled: boolean;
    loading: boolean;
    long: boolean;
    htmlType: string;
}>;
export default _default;
