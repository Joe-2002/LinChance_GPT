import { App } from 'vue';
import { ArcoOptions } from '../_utils/types';
import _Image from './image';
import _ImagePreview from './preview';
import _ImagePreviewGroup from './preview-group';
import _ImagePreviewAction from './preview-action';
declare const Image: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            renderToBody: boolean;
            preview: boolean;
            hideFooter: boolean | "never";
            footerPosition: "outer" | "inner";
            showLoader: boolean;
            previewVisible: boolean;
            defaultPreviewVisible: boolean;
        }> & Omit<Readonly<{
            renderToBody?: unknown;
            src?: unknown;
            width?: unknown;
            height?: unknown;
            title?: unknown;
            description?: unknown;
            fit?: unknown;
            alt?: unknown;
            hideFooter?: unknown;
            footerPosition?: unknown;
            showLoader?: unknown;
            preview?: unknown;
            previewVisible?: unknown;
            defaultPreviewVisible?: unknown;
            previewProps?: unknown;
            footerClass?: unknown;
        } & {
            renderToBody: boolean;
            preview: boolean;
            hideFooter: boolean | "never";
            footerPosition: "outer" | "inner";
            showLoader: boolean;
            defaultPreviewVisible: boolean;
        } & {
            title?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            description?: string | undefined;
            src?: string | undefined;
            fit?: "none" | "contain" | "cover" | "fill" | "scale-down" | undefined;
            alt?: string | undefined;
            previewVisible?: boolean | undefined;
            previewProps?: import("./interface").ImagePreviewProps | undefined;
            footerClass?: string | unknown[] | Record<string, any> | undefined;
        }> & {
            "onPreview-visible-change"?: ((...args: any[]) => any) | undefined;
            "onUpdate:previewVisible"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "renderToBody" | "preview" | "hideFooter" | "footerPosition" | "showLoader" | "previewVisible" | "defaultPreviewVisible">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "preview-visible-change" | "update:previewVisible", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            renderToBody?: unknown;
            src?: unknown;
            width?: unknown;
            height?: unknown;
            title?: unknown;
            description?: unknown;
            fit?: unknown;
            alt?: unknown;
            hideFooter?: unknown;
            footerPosition?: unknown;
            showLoader?: unknown;
            preview?: unknown;
            previewVisible?: unknown;
            defaultPreviewVisible?: unknown;
            previewProps?: unknown;
            footerClass?: unknown;
        } & {
            renderToBody: boolean;
            preview: boolean;
            hideFooter: boolean | "never";
            footerPosition: "outer" | "inner";
            showLoader: boolean;
            defaultPreviewVisible: boolean;
        } & {
            title?: string | undefined;
            height?: string | number | undefined;
            width?: string | number | undefined;
            description?: string | undefined;
            src?: string | undefined;
            fit?: "none" | "contain" | "cover" | "fill" | "scale-down" | undefined;
            alt?: string | undefined;
            previewVisible?: boolean | undefined;
            previewProps?: import("./interface").ImagePreviewProps | undefined;
            footerClass?: string | unknown[] | Record<string, any> | undefined;
        }> & {
            "onPreview-visible-change"?: ((...args: any[]) => any) | undefined;
            "onUpdate:previewVisible"?: ((...args: any[]) => any) | undefined;
        }, {
            t: (key: string, ...args: any[]) => string;
            refImg: import("vue").Ref<any>;
            prefixCls: string;
            wrapperClassNames: import("vue").ComputedRef<unknown[]>;
            wrapperStyles: import("vue").ComputedRef<import("vue").StyleValue[]>;
            showFooter: import("vue").ComputedRef<boolean>;
            imgProps: import("vue").ComputedRef<Omit<{
                [x: string]: unknown;
            }, "style" | "class">>;
            imgStyle: import("vue").ComputedRef<{
                width: string | undefined;
                height: string | undefined;
            }>;
            isLoaded: import("vue").ComputedRef<boolean>;
            isError: import("vue").ComputedRef<boolean>;
            isLoading: import("vue").ComputedRef<boolean>;
            mergedPreviewVisible: import("vue").ComputedRef<boolean>;
            mergePreview: import("vue").ComputedRef<boolean>;
            onImgLoaded: () => void;
            onImgLoadError: () => void;
            onImgClick: () => void;
            onPreviewClose: () => void;
            fitStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("preview-visible-change" | "update:previewVisible")[], string, {
            renderToBody: boolean;
            preview: boolean;
            hideFooter: boolean | "never";
            footerPosition: "outer" | "inner";
            showLoader: boolean;
            previewVisible: boolean;
            defaultPreviewVisible: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        renderToBody?: unknown;
        src?: unknown;
        width?: unknown;
        height?: unknown;
        title?: unknown;
        description?: unknown;
        fit?: unknown;
        alt?: unknown;
        hideFooter?: unknown;
        footerPosition?: unknown;
        showLoader?: unknown;
        preview?: unknown;
        previewVisible?: unknown;
        defaultPreviewVisible?: unknown;
        previewProps?: unknown;
        footerClass?: unknown;
    } & {
        renderToBody: boolean;
        preview: boolean;
        hideFooter: boolean | "never";
        footerPosition: "outer" | "inner";
        showLoader: boolean;
        defaultPreviewVisible: boolean;
    } & {
        title?: string | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        description?: string | undefined;
        src?: string | undefined;
        fit?: "none" | "contain" | "cover" | "fill" | "scale-down" | undefined;
        alt?: string | undefined;
        previewVisible?: boolean | undefined;
        previewProps?: import("./interface").ImagePreviewProps | undefined;
        footerClass?: string | unknown[] | Record<string, any> | undefined;
    }> & {
        "onPreview-visible-change"?: ((...args: any[]) => any) | undefined;
        "onUpdate:previewVisible"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        t: (key: string, ...args: any[]) => string;
        refImg: import("vue").Ref<any>;
        prefixCls: string;
        wrapperClassNames: import("vue").ComputedRef<unknown[]>;
        wrapperStyles: import("vue").ComputedRef<import("vue").StyleValue[]>;
        showFooter: import("vue").ComputedRef<boolean>;
        imgProps: import("vue").ComputedRef<Omit<{
            [x: string]: unknown;
        }, "style" | "class">>;
        imgStyle: import("vue").ComputedRef<{
            width: string | undefined;
            height: string | undefined;
        }>;
        isLoaded: import("vue").ComputedRef<boolean>;
        isError: import("vue").ComputedRef<boolean>;
        isLoading: import("vue").ComputedRef<boolean>;
        mergedPreviewVisible: import("vue").ComputedRef<boolean>;
        mergePreview: import("vue").ComputedRef<boolean>;
        onImgLoaded: () => void;
        onImgLoadError: () => void;
        onImgClick: () => void;
        onPreviewClose: () => void;
        fitStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    renderToBody?: unknown;
    src?: unknown;
    width?: unknown;
    height?: unknown;
    title?: unknown;
    description?: unknown;
    fit?: unknown;
    alt?: unknown;
    hideFooter?: unknown;
    footerPosition?: unknown;
    showLoader?: unknown;
    preview?: unknown;
    previewVisible?: unknown;
    defaultPreviewVisible?: unknown;
    previewProps?: unknown;
    footerClass?: unknown;
} & {
    renderToBody: boolean;
    preview: boolean;
    hideFooter: boolean | "never";
    footerPosition: "outer" | "inner";
    showLoader: boolean;
    defaultPreviewVisible: boolean;
} & {
    title?: string | undefined;
    height?: string | number | undefined;
    width?: string | number | undefined;
    description?: string | undefined;
    src?: string | undefined;
    fit?: "none" | "contain" | "cover" | "fill" | "scale-down" | undefined;
    alt?: string | undefined;
    previewVisible?: boolean | undefined;
    previewProps?: import("./interface").ImagePreviewProps | undefined;
    footerClass?: string | unknown[] | Record<string, any> | undefined;
}> & {
    "onPreview-visible-change"?: ((...args: any[]) => any) | undefined;
    "onUpdate:previewVisible"?: ((...args: any[]) => any) | undefined;
}, {
    t: (key: string, ...args: any[]) => string;
    refImg: import("vue").Ref<any>;
    prefixCls: string;
    wrapperClassNames: import("vue").ComputedRef<unknown[]>;
    wrapperStyles: import("vue").ComputedRef<import("vue").StyleValue[]>;
    showFooter: import("vue").ComputedRef<boolean>;
    imgProps: import("vue").ComputedRef<Omit<{
        [x: string]: unknown;
    }, "style" | "class">>;
    imgStyle: import("vue").ComputedRef<{
        width: string | undefined;
        height: string | undefined;
    }>;
    isLoaded: import("vue").ComputedRef<boolean>;
    isError: import("vue").ComputedRef<boolean>;
    isLoading: import("vue").ComputedRef<boolean>;
    mergedPreviewVisible: import("vue").ComputedRef<boolean>;
    mergePreview: import("vue").ComputedRef<boolean>;
    onImgLoaded: () => void;
    onImgLoadError: () => void;
    onImgClick: () => void;
    onPreviewClose: () => void;
    fitStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("preview-visible-change" | "update:previewVisible")[], "preview-visible-change" | "update:previewVisible", {
    renderToBody: boolean;
    preview: boolean;
    hideFooter: boolean | "never";
    footerPosition: "outer" | "inner";
    showLoader: boolean;
    previewVisible: boolean;
    defaultPreviewVisible: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Preview: import("vue").DefineComponent<{
        renderToBody: {
            type: BooleanConstructor;
            default: boolean;
        };
        src: {
            type: StringConstructor;
        };
        visible: {
            type: BooleanConstructor;
            default: undefined;
        };
        defaultVisible: {
            type: BooleanConstructor;
            default: boolean;
        };
        maskClosable: {
            type: BooleanConstructor;
            default: boolean;
        };
        closable: {
            type: BooleanConstructor;
            default: boolean;
        };
        actionsLayout: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        popupContainer: {
            type: import("vue").PropType<HTMLElement>;
        };
        inGroup: {
            type: BooleanConstructor;
            default: boolean;
        };
        groupArrowProps: {
            type: ObjectConstructor;
            default: () => {};
        };
    }, {
        prefixCls: string;
        classNames: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        container: import("vue").ComputedRef<HTMLElement>;
        wrapperStyles: import("vue").ComputedRef<import("vue").CSSProperties>;
        scale: import("vue").Ref<number>;
        translate: import("vue").Ref<number[]>;
        rotate: import("vue").Ref<number>;
        moving: import("vue").Ref<boolean>;
        mergedVisible: import("vue").ComputedRef<boolean>;
        isLoading: import("vue").ComputedRef<boolean>;
        isLoaded: import("vue").ComputedRef<boolean>;
        scaleValueVisible: import("vue").Ref<boolean>;
        refWrapper: import("vue").Ref<any>;
        refImage: import("vue").Ref<any>;
        onMaskClick: (e: MouseEvent) => void;
        onCloseClick: () => void;
        onImgLoad(): void;
        onImgError(): void;
        actions: import("vue").ComputedRef<({
            key: string;
            name: string;
            content: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>;
            onClick: () => void;
            disabled?: undefined;
        } | {
            key: string;
            name: string;
            content: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>;
            onClick: () => void;
            disabled: boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:visible")[], "close" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        renderToBody?: unknown;
        src?: unknown;
        visible?: unknown;
        defaultVisible?: unknown;
        maskClosable?: unknown;
        closable?: unknown;
        actionsLayout?: unknown;
        popupContainer?: unknown;
        inGroup?: unknown;
        groupArrowProps?: unknown;
    } & {
        renderToBody: boolean;
        closable: boolean;
        actionsLayout: string[];
        defaultVisible: boolean;
        maskClosable: boolean;
        inGroup: boolean;
        groupArrowProps: Record<string, any>;
    } & {
        popupContainer?: HTMLElement | undefined;
        visible?: boolean | undefined;
        src?: string | undefined;
    }> & {
        onClose?: ((...args: any[]) => any) | undefined;
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    }, {
        renderToBody: boolean;
        visible: boolean;
        closable: boolean;
        actionsLayout: string[];
        defaultVisible: boolean;
        maskClosable: boolean;
        inGroup: boolean;
        groupArrowProps: Record<string, any>;
    }>;
    PreviewGroup: import("vue").DefineComponent<{
        renderToBody: {
            type: BooleanConstructor;
            default: boolean;
        };
        srcList: {
            type: import("vue").PropType<string[]>;
        };
        current: {
            type: NumberConstructor;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        infinite: {
            type: BooleanConstructor;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            default: undefined;
        };
        defaultVisible: {
            type: BooleanConstructor;
            default: boolean;
        };
        maskClosable: {
            type: BooleanConstructor;
            default: boolean;
        };
        closable: {
            type: BooleanConstructor;
            default: boolean;
        };
        actionsLayout: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        popupContainer: {
            type: import("vue").PropType<string | HTMLElement>;
        };
    }, {
        mergedVisible: import("vue").ComputedRef<boolean>;
        currentUrl: import("vue").ComputedRef<string | undefined>;
        prevIndex: import("vue").ComputedRef<number | undefined>;
        nextIndex: import("vue").ComputedRef<number | undefined>;
        onClose(): void;
        groupArrowProps: {
            onPrev: (() => void) | undefined;
            onNext: (() => void) | undefined;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current" | "update:visible" | "visible-change")[], "change" | "update:current" | "update:visible" | "visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        renderToBody?: unknown;
        srcList?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        infinite?: unknown;
        visible?: unknown;
        defaultVisible?: unknown;
        maskClosable?: unknown;
        closable?: unknown;
        actionsLayout?: unknown;
        popupContainer?: unknown;
    } & {
        renderToBody: boolean;
        infinite: boolean;
        closable: boolean;
        defaultCurrent: number;
        actionsLayout: string[];
        defaultVisible: boolean;
        maskClosable: boolean;
    } & {
        popupContainer?: string | HTMLElement | undefined;
        visible?: boolean | undefined;
        current?: number | undefined;
        srcList?: string[] | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        "onVisible-change"?: ((...args: any[]) => any) | undefined;
    }, {
        renderToBody: boolean;
        infinite: boolean;
        visible: boolean;
        closable: boolean;
        defaultCurrent: number;
        actionsLayout: string[];
        defaultVisible: boolean;
        maskClosable: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type ImageInstance = InstanceType<typeof _Image>;
export declare type ImagePreviewInstance = InstanceType<typeof _ImagePreview>;
export declare type ImagePreviewGroupInstance = InstanceType<typeof _ImagePreviewGroup>;
export declare type ImagePreviewActionInstance = InstanceType<typeof _ImagePreviewAction>;
export { _ImagePreview as ImagePreview, _ImagePreviewGroup as ImagePreviewGroup, _ImagePreviewAction as ImagePreviewAction, };
export default Image;
