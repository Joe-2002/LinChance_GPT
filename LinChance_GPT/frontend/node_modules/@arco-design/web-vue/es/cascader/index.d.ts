import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Cascader from './cascader';
import _CascaderPanel from './cascader-panel';
declare const Cascader: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            disabled: boolean;
            multiple: boolean;
            inputValue: string;
            error: boolean;
            defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
            allowClear: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            defaultInputValue: string;
            checkStrictly: boolean;
            options: import("./interface").CascaderOption[];
            pathMode: boolean;
            expandTrigger: "hover" | "click";
            searchOptionOnlyLabel: boolean;
            searchDelay: number;
            valueKey: string;
            fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
            expandChild: boolean;
        }> & Omit<Readonly<{
            pathMode?: unknown;
            multiple?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            options?: unknown;
            disabled?: unknown;
            error?: unknown;
            size?: unknown;
            allowSearch?: unknown;
            allowClear?: unknown;
            inputValue?: unknown;
            defaultInputValue?: unknown;
            popupVisible?: unknown;
            expandTrigger?: unknown;
            defaultPopupVisible?: unknown;
            placeholder?: unknown;
            filterOption?: unknown;
            popupContainer?: unknown;
            maxTagCount?: unknown;
            formatLabel?: unknown;
            triggerProps?: unknown;
            checkStrictly?: unknown;
            loadMore?: unknown;
            loading?: unknown;
            searchOptionOnlyLabel?: unknown;
            searchDelay?: unknown;
            fieldNames?: unknown;
            valueKey?: unknown;
            fallback?: unknown;
            expandChild?: unknown;
            virtualListProps?: unknown;
        } & {
            defaultPopupVisible: boolean;
            disabled: boolean;
            multiple: boolean;
            error: boolean;
            defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
            allowClear: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            defaultInputValue: string;
            checkStrictly: boolean;
            options: import("./interface").CascaderOption[];
            pathMode: boolean;
            expandTrigger: "hover" | "click";
            searchOptionOnlyLabel: boolean;
            searchDelay: number;
            valueKey: string;
            fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
            expandChild: boolean;
        } & {
            popupVisible?: boolean | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            size?: "mini" | "medium" | "large" | "small" | undefined;
            modelValue?: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
            inputValue?: string | undefined;
            formatLabel?: ((options: import("./interface").CascaderOption[]) => string) | undefined;
            placeholder?: string | undefined;
            fieldNames?: import("../_utils/types").FieldString<import("./interface").CascaderOption> | undefined;
            virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
            loadMore?: ((option: import("./interface").CascaderOption, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
            filterOption?: ((inputValue: string, option: import("./interface").CascaderOption) => boolean) | undefined;
            triggerProps?: import("..").TriggerProps | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
            onFocus?: ((ev: FocusEvent) => any) | undefined;
            onBlur?: ((ev: FocusEvent) => any) | undefined;
            onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
            onInputValueChange?: ((value: string) => any) | undefined;
            onClear?: (() => any) | undefined;
            "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
            onSearch?: ((value: string) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "popupVisible" | "defaultPopupVisible" | "disabled" | "multiple" | "inputValue" | "error" | "defaultValue" | "allowClear" | "loading" | "allowSearch" | "maxTagCount" | "defaultInputValue" | "checkStrictly" | "options" | "pathMode" | "expandTrigger" | "searchOptionOnlyLabel" | "searchDelay" | "valueKey" | "fallback" | "expandChild">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "focus", ev: FocusEvent) => void) & ((event: "update:popupVisible", visible: boolean) => void) & ((event: "popupVisibleChange", visible: boolean) => void) & ((event: "clear") => void) & ((event: "inputValueChange", value: string) => void) & ((event: "blur", ev: FocusEvent) => void) & ((event: "update:modelValue", value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => void) & ((event: "change", value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => void) & ((event: "search", value: string) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            pathMode?: unknown;
            multiple?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            options?: unknown;
            disabled?: unknown;
            error?: unknown;
            size?: unknown;
            allowSearch?: unknown;
            allowClear?: unknown;
            inputValue?: unknown;
            defaultInputValue?: unknown;
            popupVisible?: unknown;
            expandTrigger?: unknown;
            defaultPopupVisible?: unknown;
            placeholder?: unknown;
            filterOption?: unknown;
            popupContainer?: unknown;
            maxTagCount?: unknown;
            formatLabel?: unknown;
            triggerProps?: unknown;
            checkStrictly?: unknown;
            loadMore?: unknown;
            loading?: unknown;
            searchOptionOnlyLabel?: unknown;
            searchDelay?: unknown;
            fieldNames?: unknown;
            valueKey?: unknown;
            fallback?: unknown;
            expandChild?: unknown;
            virtualListProps?: unknown;
        } & {
            defaultPopupVisible: boolean;
            disabled: boolean;
            multiple: boolean;
            error: boolean;
            defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
            allowClear: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            defaultInputValue: string;
            checkStrictly: boolean;
            options: import("./interface").CascaderOption[];
            pathMode: boolean;
            expandTrigger: "hover" | "click";
            searchOptionOnlyLabel: boolean;
            searchDelay: number;
            valueKey: string;
            fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
            expandChild: boolean;
        } & {
            popupVisible?: boolean | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            size?: "mini" | "medium" | "large" | "small" | undefined;
            modelValue?: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
            inputValue?: string | undefined;
            formatLabel?: ((options: import("./interface").CascaderOption[]) => string) | undefined;
            placeholder?: string | undefined;
            fieldNames?: import("../_utils/types").FieldString<import("./interface").CascaderOption> | undefined;
            virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
            loadMore?: ((option: import("./interface").CascaderOption, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
            filterOption?: ((inputValue: string, option: import("./interface").CascaderOption) => boolean) | undefined;
            triggerProps?: import("..").TriggerProps | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
            onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
            onFocus?: ((ev: FocusEvent) => any) | undefined;
            onBlur?: ((ev: FocusEvent) => any) | undefined;
            onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
            onInputValueChange?: ((value: string) => any) | undefined;
            onClear?: (() => any) | undefined;
            "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
            onSearch?: ((value: string) => any) | undefined;
        }, {
            optionInfos: import("vue").Ref<{
                [x: string]: any;
                raw: {
                    [x: string]: unknown;
                };
                key: string;
                valueKey: string;
                level: number;
                index: number;
                value: string | number;
                label: string;
                disabled: boolean;
                selectionDisabled: boolean;
                isLeaf: boolean;
                parent?: any | undefined;
                children?: any[] | undefined;
                path: any[];
                pathValue: any[];
                totalLeafOptions?: number | undefined;
                render?: import("vue").RenderFunction | undefined;
                tagProps?: {
                    color?: string | undefined;
                    size?: "medium" | "large" | "small" | undefined;
                    visible?: boolean | undefined;
                    defaultVisible?: boolean | undefined;
                    loading?: boolean | undefined;
                    closable?: boolean | undefined;
                    checkable?: boolean | undefined;
                    checked?: boolean | undefined;
                    defaultChecked?: boolean | undefined;
                } | undefined;
            }[]>;
            filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
            selectedPath: import("vue").Ref<string[]>;
            activeKey: import("vue").Ref<string | undefined>;
            displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
            computedInputValue: import("vue").ComputedRef<string>;
            computedPopupVisible: import("vue").ComputedRef<boolean>;
            handleClear: (e: MouseEvent) => void;
            selectViewValue: import("vue").ComputedRef<any[]>;
            handleInputValueChange: (value: string, reason: string) => void;
            showSearchPanel: import("vue").ComputedRef<boolean>;
            handlePopupVisibleChange: (visible: boolean) => void;
            handleFocus: (e: FocusEvent) => void;
            handleBlur: (e: FocusEvent) => void;
            handleRemove: (key: string) => void;
            mergedDisabled: import("vue").ComputedRef<boolean>;
            handleKeyDown: (event: KeyboardEvent) => void;
            totalLevel: import("vue").Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            'update:modelValue': (value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => true;
            'update:popupVisible': (visible: boolean) => true;
            change: (value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => true;
            inputValueChange: (value: string) => true;
            clear: () => true;
            search: (value: string) => true;
            popupVisibleChange: (visible: boolean) => true;
            focus: (ev: FocusEvent) => true;
            blur: (ev: FocusEvent) => true;
        }, string, {
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            disabled: boolean;
            multiple: boolean;
            inputValue: string;
            error: boolean;
            defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
            allowClear: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            defaultInputValue: string;
            checkStrictly: boolean;
            options: import("./interface").CascaderOption[];
            pathMode: boolean;
            expandTrigger: "hover" | "click";
            searchOptionOnlyLabel: boolean;
            searchDelay: number;
            valueKey: string;
            fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
            expandChild: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        pathMode?: unknown;
        multiple?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        options?: unknown;
        disabled?: unknown;
        error?: unknown;
        size?: unknown;
        allowSearch?: unknown;
        allowClear?: unknown;
        inputValue?: unknown;
        defaultInputValue?: unknown;
        popupVisible?: unknown;
        expandTrigger?: unknown;
        defaultPopupVisible?: unknown;
        placeholder?: unknown;
        filterOption?: unknown;
        popupContainer?: unknown;
        maxTagCount?: unknown;
        formatLabel?: unknown;
        triggerProps?: unknown;
        checkStrictly?: unknown;
        loadMore?: unknown;
        loading?: unknown;
        searchOptionOnlyLabel?: unknown;
        searchDelay?: unknown;
        fieldNames?: unknown;
        valueKey?: unknown;
        fallback?: unknown;
        expandChild?: unknown;
        virtualListProps?: unknown;
    } & {
        defaultPopupVisible: boolean;
        disabled: boolean;
        multiple: boolean;
        error: boolean;
        defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
        allowClear: boolean;
        loading: boolean;
        allowSearch: boolean;
        maxTagCount: number;
        defaultInputValue: string;
        checkStrictly: boolean;
        options: import("./interface").CascaderOption[];
        pathMode: boolean;
        expandTrigger: "hover" | "click";
        searchOptionOnlyLabel: boolean;
        searchDelay: number;
        valueKey: string;
        fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
        expandChild: boolean;
    } & {
        popupVisible?: boolean | undefined;
        popupContainer?: string | HTMLElement | null | undefined;
        size?: "mini" | "medium" | "large" | "small" | undefined;
        modelValue?: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
        inputValue?: string | undefined;
        formatLabel?: ((options: import("./interface").CascaderOption[]) => string) | undefined;
        placeholder?: string | undefined;
        fieldNames?: import("../_utils/types").FieldString<import("./interface").CascaderOption> | undefined;
        virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
        loadMore?: ((option: import("./interface").CascaderOption, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
        filterOption?: ((inputValue: string, option: import("./interface").CascaderOption) => boolean) | undefined;
        triggerProps?: import("..").TriggerProps | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
        onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
        onFocus?: ((ev: FocusEvent) => any) | undefined;
        onBlur?: ((ev: FocusEvent) => any) | undefined;
        onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
        onInputValueChange?: ((value: string) => any) | undefined;
        onClear?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
        onSearch?: ((value: string) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        optionInfos: import("vue").Ref<{
            [x: string]: any;
            raw: {
                [x: string]: unknown;
            };
            key: string;
            valueKey: string;
            level: number;
            index: number;
            value: string | number;
            label: string;
            disabled: boolean;
            selectionDisabled: boolean;
            isLeaf: boolean;
            parent?: any | undefined;
            children?: any[] | undefined;
            path: any[];
            pathValue: any[];
            totalLeafOptions?: number | undefined;
            render?: import("vue").RenderFunction | undefined;
            tagProps?: {
                color?: string | undefined;
                size?: "medium" | "large" | "small" | undefined;
                visible?: boolean | undefined;
                defaultVisible?: boolean | undefined;
                loading?: boolean | undefined;
                closable?: boolean | undefined;
                checkable?: boolean | undefined;
                checked?: boolean | undefined;
                defaultChecked?: boolean | undefined;
            } | undefined;
        }[]>;
        filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
        selectedPath: import("vue").Ref<string[]>;
        activeKey: import("vue").Ref<string | undefined>;
        displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
        computedInputValue: import("vue").ComputedRef<string>;
        computedPopupVisible: import("vue").ComputedRef<boolean>;
        handleClear: (e: MouseEvent) => void;
        selectViewValue: import("vue").ComputedRef<any[]>;
        handleInputValueChange: (value: string, reason: string) => void;
        showSearchPanel: import("vue").ComputedRef<boolean>;
        handlePopupVisibleChange: (visible: boolean) => void;
        handleFocus: (e: FocusEvent) => void;
        handleBlur: (e: FocusEvent) => void;
        handleRemove: (key: string) => void;
        mergedDisabled: import("vue").ComputedRef<boolean>;
        handleKeyDown: (event: KeyboardEvent) => void;
        totalLevel: import("vue").Ref<number>;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    pathMode?: unknown;
    multiple?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    options?: unknown;
    disabled?: unknown;
    error?: unknown;
    size?: unknown;
    allowSearch?: unknown;
    allowClear?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    popupVisible?: unknown;
    expandTrigger?: unknown;
    defaultPopupVisible?: unknown;
    placeholder?: unknown;
    filterOption?: unknown;
    popupContainer?: unknown;
    maxTagCount?: unknown;
    formatLabel?: unknown;
    triggerProps?: unknown;
    checkStrictly?: unknown;
    loadMore?: unknown;
    loading?: unknown;
    searchOptionOnlyLabel?: unknown;
    searchDelay?: unknown;
    fieldNames?: unknown;
    valueKey?: unknown;
    fallback?: unknown;
    expandChild?: unknown;
    virtualListProps?: unknown;
} & {
    defaultPopupVisible: boolean;
    disabled: boolean;
    multiple: boolean;
    error: boolean;
    defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
    allowClear: boolean;
    loading: boolean;
    allowSearch: boolean;
    maxTagCount: number;
    defaultInputValue: string;
    checkStrictly: boolean;
    options: import("./interface").CascaderOption[];
    pathMode: boolean;
    expandTrigger: "hover" | "click";
    searchOptionOnlyLabel: boolean;
    searchDelay: number;
    valueKey: string;
    fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
    expandChild: boolean;
} & {
    popupVisible?: boolean | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    size?: "mini" | "medium" | "large" | "small" | undefined;
    modelValue?: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
    inputValue?: string | undefined;
    formatLabel?: ((options: import("./interface").CascaderOption[]) => string) | undefined;
    placeholder?: string | undefined;
    fieldNames?: import("../_utils/types").FieldString<import("./interface").CascaderOption> | undefined;
    virtualListProps?: import("../_components/virtual-list-v2/interface").VirtualListProps | undefined;
    loadMore?: ((option: import("./interface").CascaderOption, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
    filterOption?: ((inputValue: string, option: import("./interface").CascaderOption) => boolean) | undefined;
    triggerProps?: import("..").TriggerProps | undefined;
}> & {
    "onUpdate:popupVisible"?: ((visible: boolean) => any) | undefined;
    onPopupVisibleChange?: ((visible: boolean) => any) | undefined;
    onFocus?: ((ev: FocusEvent) => any) | undefined;
    onBlur?: ((ev: FocusEvent) => any) | undefined;
    onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
    onInputValueChange?: ((value: string) => any) | undefined;
    onClear?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
    onSearch?: ((value: string) => any) | undefined;
}, {
    optionInfos: import("vue").Ref<{
        [x: string]: any;
        raw: {
            [x: string]: unknown;
        };
        key: string;
        valueKey: string;
        level: number;
        index: number;
        value: string | number;
        label: string;
        disabled: boolean;
        selectionDisabled: boolean;
        isLeaf: boolean;
        parent?: any | undefined;
        children?: any[] | undefined;
        path: any[];
        pathValue: any[];
        totalLeafOptions?: number | undefined;
        render?: import("vue").RenderFunction | undefined;
        tagProps?: {
            color?: string | undefined;
            size?: "medium" | "large" | "small" | undefined;
            visible?: boolean | undefined;
            defaultVisible?: boolean | undefined;
            loading?: boolean | undefined;
            closable?: boolean | undefined;
            checkable?: boolean | undefined;
            checked?: boolean | undefined;
            defaultChecked?: boolean | undefined;
        } | undefined;
    }[]>;
    filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
    selectedPath: import("vue").Ref<string[]>;
    activeKey: import("vue").Ref<string | undefined>;
    displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
    computedInputValue: import("vue").ComputedRef<string>;
    computedPopupVisible: import("vue").ComputedRef<boolean>;
    handleClear: (e: MouseEvent) => void;
    selectViewValue: import("vue").ComputedRef<any[]>;
    handleInputValueChange: (value: string, reason: string) => void;
    showSearchPanel: import("vue").ComputedRef<boolean>;
    handlePopupVisibleChange: (visible: boolean) => void;
    handleFocus: (e: FocusEvent) => void;
    handleBlur: (e: FocusEvent) => void;
    handleRemove: (key: string) => void;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    handleKeyDown: (event: KeyboardEvent) => void;
    totalLevel: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => true;
    'update:popupVisible': (visible: boolean) => true;
    change: (value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => true;
    inputValueChange: (value: string) => true;
    clear: () => true;
    search: (value: string) => true;
    popupVisibleChange: (visible: boolean) => true;
    focus: (ev: FocusEvent) => true;
    blur: (ev: FocusEvent) => true;
}, string, {
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    disabled: boolean;
    multiple: boolean;
    inputValue: string;
    error: boolean;
    defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
    allowClear: boolean;
    loading: boolean;
    allowSearch: boolean;
    maxTagCount: number;
    defaultInputValue: string;
    checkStrictly: boolean;
    options: import("./interface").CascaderOption[];
    pathMode: boolean;
    expandTrigger: "hover" | "click";
    searchOptionOnlyLabel: boolean;
    searchDelay: number;
    valueKey: string;
    fallback: boolean | ((value: string | number | Record<string, unknown> | (string | number | Record<string, unknown>)[]) => string);
    expandChild: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    CascaderPanel: import("vue").DefineComponent<{
        pathMode: {
            type: BooleanConstructor;
            default: boolean;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined>;
        };
        defaultValue: {
            type: import("vue").PropType<string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined>;
            default: (props: import("../_utils/types").Data) => "" | never[] | undefined;
        };
        options: {
            type: import("vue").PropType<import("./interface").CascaderOption[]>;
            default: () => never[];
        };
        expandTrigger: {
            type: StringConstructor;
            default: string;
        };
        checkStrictly: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadMore: {
            type: import("vue").PropType<(option: import("./interface").CascaderOption, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void>;
        };
        fieldNames: {
            type: import("vue").PropType<import("../_utils/types").FieldString<import("./interface").CascaderOption>>;
        };
        valueKey: {
            type: StringConstructor;
            default: string;
        };
        expandChild: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        optionInfos: import("vue").Ref<{
            [x: string]: any;
            raw: {
                [x: string]: unknown;
            };
            key: string;
            valueKey: string;
            level: number;
            index: number;
            value: string | number;
            label: string;
            disabled: boolean;
            selectionDisabled: boolean;
            isLeaf: boolean;
            parent?: any | undefined;
            children?: any[] | undefined;
            path: any[];
            pathValue: any[];
            totalLeafOptions?: number | undefined;
            render?: import("vue").RenderFunction | undefined;
            tagProps?: {
                color?: string | undefined;
                size?: "medium" | "large" | "small" | undefined;
                visible?: boolean | undefined;
                defaultVisible?: boolean | undefined;
                loading?: boolean | undefined;
                closable?: boolean | undefined;
                checkable?: boolean | undefined;
                checked?: boolean | undefined;
                defaultChecked?: boolean | undefined;
            } | undefined;
        }[]>;
        filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
        selectedPath: import("vue").Ref<string[]>;
        activeKey: import("vue").Ref<string | undefined>;
        displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
        handleKeyDown: (event: KeyboardEvent) => void;
        totalLevel: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        'update:modelValue': (value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => true;
        change: (value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => true;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        pathMode?: unknown;
        multiple?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        options?: unknown;
        expandTrigger?: unknown;
        checkStrictly?: unknown;
        loadMore?: unknown;
        fieldNames?: unknown;
        valueKey?: unknown;
        expandChild?: unknown;
    } & {
        multiple: boolean;
        defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
        checkStrictly: boolean;
        options: import("./interface").CascaderOption[];
        pathMode: boolean;
        expandTrigger: string;
        valueKey: string;
        expandChild: boolean;
    } & {
        modelValue?: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
        fieldNames?: import("../_utils/types").FieldString<import("./interface").CascaderOption> | undefined;
        loadMore?: ((option: import("./interface").CascaderOption, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
    }> & {
        onChange?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined) => any) | undefined;
    }, {
        multiple: boolean;
        defaultValue: string | number | Record<string, any> | (string | number | Record<string, any> | (string | number | Record<string, any>)[])[] | undefined;
        checkStrictly: boolean;
        options: import("./interface").CascaderOption[];
        pathMode: boolean;
        expandTrigger: string;
        valueKey: string;
        expandChild: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type CascaderInstance = InstanceType<typeof _Cascader>;
export declare type CascaderPanelInstance = InstanceType<typeof _CascaderPanel>;
export type { CascaderOption, CascaderFieldNames } from './interface';
export { _CascaderPanel as CascaderPanel };
export default Cascader;
